/*! For license information please see 5288.index.js.LICENSE.txt */
"use strict";(self.webpackChunkjson_nets=self.webpackChunkjson_nets||[]).push([[5288],{45288:(e,t,n)=>{n.r(t),n.d(t,{CompletionAdapter:()=>gt,DefinitionAdapter:()=>yt,DiagnosticsAdapter:()=>ct,DocumentColorAdapter:()=>Mt,DocumentFormattingEditProvider:()=>Rt,DocumentHighlightAdapter:()=>kt,DocumentLinkAdapter:()=>St,DocumentRangeFormattingEditProvider:()=>Tt,DocumentSymbolAdapter:()=>At,FoldingRangeAdapter:()=>Pt,HoverAdapter:()=>mt,ReferenceAdapter:()=>Ct,RenameAdapter:()=>xt,SelectionRangeAdapter:()=>Lt,WorkerManager:()=>oe,fromPosition:()=>lt,fromRange:()=>ht,setupMode:()=>Ft,toRange:()=>ft,toTextEdit:()=>vt});var r=n(50158),i=Object.defineProperty,o=Object.getOwnPropertyDescriptor,a=Object.getOwnPropertyNames,s=Object.prototype.hasOwnProperty,u=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let u of a(t))s.call(e,u)||u===n||i(e,u,{get:()=>t[u],enumerable:!(r=o(t,u))||r.enumerable});return e},c={};u(c,r,"default");var d,g,l,h,f,p,v,m,_,w,k,b,y,E,C,x,A,I,S,R,T,D,M,P,L,F,j,O,N,U,W,V,H,K,z,X,B,$,q,Q,G,J,Y,Z,ee,te,ne,re,ie,oe=class{_defaults;_idleCheckInterval;_lastUsedTime;_configChangeListener;_worker;_client;constructor(e){this._defaults=e,this._worker=null,this._client=null,this._idleCheckInterval=window.setInterval((()=>this._checkIfIdle()),3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange((()=>this._stopWorker()))}_stopWorker(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null}dispose(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()}_checkIfIdle(){this._worker&&Date.now()-this._lastUsedTime>12e4&&this._stopWorker()}_getClient(){return this._lastUsedTime=Date.now(),this._client||(this._worker=c.editor.createWebWorker({moduleId:"vs/language/css/cssWorker",label:this._defaults.languageId,createData:{options:this._defaults.options,languageId:this._defaults.languageId}}),this._client=this._worker.getProxy()),this._client}getLanguageServiceWorker(...e){let t;return this._getClient().then((e=>{t=e})).then((t=>{if(this._worker)return this._worker.withSyncedResources(e)})).then((e=>t))}};(g=d||(d={})).MIN_VALUE=-2147483648,g.MAX_VALUE=2147483647,(h=l||(l={})).MIN_VALUE=0,h.MAX_VALUE=2147483647,(p=f||(f={})).create=function(e,t){return e===Number.MAX_VALUE&&(e=l.MAX_VALUE),t===Number.MAX_VALUE&&(t=l.MAX_VALUE),{line:e,character:t}},p.is=function(e){var t=e;return ot.objectLiteral(t)&&ot.uinteger(t.line)&&ot.uinteger(t.character)},(m=v||(v={})).create=function(e,t,n,r){if(ot.uinteger(e)&&ot.uinteger(t)&&ot.uinteger(n)&&ot.uinteger(r))return{start:f.create(e,t),end:f.create(n,r)};if(f.is(e)&&f.is(t))return{start:e,end:t};throw new Error("Range#create called with invalid arguments["+e+", "+t+", "+n+", "+r+"]")},m.is=function(e){var t=e;return ot.objectLiteral(t)&&f.is(t.start)&&f.is(t.end)},(w=_||(_={})).create=function(e,t){return{uri:e,range:t}},w.is=function(e){var t=e;return ot.defined(t)&&v.is(t.range)&&(ot.string(t.uri)||ot.undefined(t.uri))},(b=k||(k={})).create=function(e,t,n,r){return{targetUri:e,targetRange:t,targetSelectionRange:n,originSelectionRange:r}},b.is=function(e){var t=e;return ot.defined(t)&&v.is(t.targetRange)&&ot.string(t.targetUri)&&(v.is(t.targetSelectionRange)||ot.undefined(t.targetSelectionRange))&&(v.is(t.originSelectionRange)||ot.undefined(t.originSelectionRange))},(E=y||(y={})).create=function(e,t,n,r){return{red:e,green:t,blue:n,alpha:r}},E.is=function(e){var t=e;return ot.numberRange(t.red,0,1)&&ot.numberRange(t.green,0,1)&&ot.numberRange(t.blue,0,1)&&ot.numberRange(t.alpha,0,1)},(x=C||(C={})).create=function(e,t){return{range:e,color:t}},x.is=function(e){var t=e;return v.is(t.range)&&y.is(t.color)},(I=A||(A={})).create=function(e,t,n){return{label:e,textEdit:t,additionalTextEdits:n}},I.is=function(e){var t=e;return ot.string(t.label)&&(ot.undefined(t.textEdit)||K.is(t))&&(ot.undefined(t.additionalTextEdits)||ot.typedArray(t.additionalTextEdits,K.is))},(R=S||(S={})).Comment="comment",R.Imports="imports",R.Region="region",(D=T||(T={})).create=function(e,t,n,r,i){var o={startLine:e,endLine:t};return ot.defined(n)&&(o.startCharacter=n),ot.defined(r)&&(o.endCharacter=r),ot.defined(i)&&(o.kind=i),o},D.is=function(e){var t=e;return ot.uinteger(t.startLine)&&ot.uinteger(t.startLine)&&(ot.undefined(t.startCharacter)||ot.uinteger(t.startCharacter))&&(ot.undefined(t.endCharacter)||ot.uinteger(t.endCharacter))&&(ot.undefined(t.kind)||ot.string(t.kind))},(P=M||(M={})).create=function(e,t){return{location:e,message:t}},P.is=function(e){var t=e;return ot.defined(t)&&_.is(t.location)&&ot.string(t.message)},(F=L||(L={})).Error=1,F.Warning=2,F.Information=3,F.Hint=4,(O=j||(j={})).Unnecessary=1,O.Deprecated=2,(N||(N={})).is=function(e){var t=e;return null!=t&&ot.string(t.href)},(W=U||(U={})).create=function(e,t,n,r,i,o){var a={range:e,message:t};return ot.defined(n)&&(a.severity=n),ot.defined(r)&&(a.code=r),ot.defined(i)&&(a.source=i),ot.defined(o)&&(a.relatedInformation=o),a},W.is=function(e){var t,n=e;return ot.defined(n)&&v.is(n.range)&&ot.string(n.message)&&(ot.number(n.severity)||ot.undefined(n.severity))&&(ot.integer(n.code)||ot.string(n.code)||ot.undefined(n.code))&&(ot.undefined(n.codeDescription)||ot.string(null===(t=n.codeDescription)||void 0===t?void 0:t.href))&&(ot.string(n.source)||ot.undefined(n.source))&&(ot.undefined(n.relatedInformation)||ot.typedArray(n.relatedInformation,M.is))},(H=V||(V={})).create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={title:e,command:t};return ot.defined(n)&&n.length>0&&(i.arguments=n),i},H.is=function(e){var t=e;return ot.defined(t)&&ot.string(t.title)&&ot.string(t.command)},(z=K||(K={})).replace=function(e,t){return{range:e,newText:t}},z.insert=function(e,t){return{range:{start:e,end:e},newText:t}},z.del=function(e){return{range:e,newText:""}},z.is=function(e){var t=e;return ot.objectLiteral(t)&&ot.string(t.newText)&&v.is(t.range)},(B=X||(X={})).create=function(e,t,n){var r={label:e};return void 0!==t&&(r.needsConfirmation=t),void 0!==n&&(r.description=n),r},B.is=function(e){var t=e;return void 0!==t&&ot.objectLiteral(t)&&ot.string(t.label)&&(ot.boolean(t.needsConfirmation)||void 0===t.needsConfirmation)&&(ot.string(t.description)||void 0===t.description)},($||($={})).is=function(e){return"string"==typeof e},(Q=q||(q={})).replace=function(e,t,n){return{range:e,newText:t,annotationId:n}},Q.insert=function(e,t,n){return{range:{start:e,end:e},newText:t,annotationId:n}},Q.del=function(e,t){return{range:e,newText:"",annotationId:t}},Q.is=function(e){var t=e;return K.is(t)&&(X.is(t.annotationId)||$.is(t.annotationId))},(J=G||(G={})).create=function(e,t){return{textDocument:e,edits:t}},J.is=function(e){var t=e;return ot.defined(t)&&de.is(t.textDocument)&&Array.isArray(t.edits)},(Z=Y||(Y={})).create=function(e,t,n){var r={kind:"create",uri:e};return void 0===t||void 0===t.overwrite&&void 0===t.ignoreIfExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},Z.is=function(e){var t=e;return t&&"create"===t.kind&&ot.string(t.uri)&&(void 0===t.options||(void 0===t.options.overwrite||ot.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||ot.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||$.is(t.annotationId))},(te=ee||(ee={})).create=function(e,t,n,r){var i={kind:"rename",oldUri:e,newUri:t};return void 0===n||void 0===n.overwrite&&void 0===n.ignoreIfExists||(i.options=n),void 0!==r&&(i.annotationId=r),i},te.is=function(e){var t=e;return t&&"rename"===t.kind&&ot.string(t.oldUri)&&ot.string(t.newUri)&&(void 0===t.options||(void 0===t.options.overwrite||ot.boolean(t.options.overwrite))&&(void 0===t.options.ignoreIfExists||ot.boolean(t.options.ignoreIfExists)))&&(void 0===t.annotationId||$.is(t.annotationId))},(re=ne||(ne={})).create=function(e,t,n){var r={kind:"delete",uri:e};return void 0===t||void 0===t.recursive&&void 0===t.ignoreIfNotExists||(r.options=t),void 0!==n&&(r.annotationId=n),r},re.is=function(e){var t=e;return t&&"delete"===t.kind&&ot.string(t.uri)&&(void 0===t.options||(void 0===t.options.recursive||ot.boolean(t.options.recursive))&&(void 0===t.options.ignoreIfNotExists||ot.boolean(t.options.ignoreIfNotExists)))&&(void 0===t.annotationId||$.is(t.annotationId))},(ie||(ie={})).is=function(e){var t=e;return t&&(void 0!==t.changes||void 0!==t.documentChanges)&&(void 0===t.documentChanges||t.documentChanges.every((function(e){return ot.string(e.kind)?Y.is(e)||ee.is(e)||ne.is(e):G.is(e)})))};var ae,se,ue,ce,de,ge,le,he,fe,pe,ve,me,_e,we,ke,be,ye,Ee,Ce,xe,Ae,Ie,Se,Re,Te,De,Me,Pe,Le,Fe,je,Oe,Ne,Ue,We,Ve,He,Ke,ze,Xe,Be,$e,qe,Qe,Ge,Je,Ye,Ze,et,tt,nt,rt=function(){function e(e,t){this.edits=e,this.changeAnnotations=t}return e.prototype.insert=function(e,t,n){var r,i;if(void 0===n?r=K.insert(e,t):$.is(n)?(i=n,r=q.insert(e,t,n)):(this.assertChangeAnnotations(this.changeAnnotations),i=this.changeAnnotations.manage(n),r=q.insert(e,t,i)),this.edits.push(r),void 0!==i)return i},e.prototype.replace=function(e,t,n){var r,i;if(void 0===n?r=K.replace(e,t):$.is(n)?(i=n,r=q.replace(e,t,n)):(this.assertChangeAnnotations(this.changeAnnotations),i=this.changeAnnotations.manage(n),r=q.replace(e,t,i)),this.edits.push(r),void 0!==i)return i},e.prototype.delete=function(e,t){var n,r;if(void 0===t?n=K.del(e):$.is(t)?(r=t,n=q.del(e,t)):(this.assertChangeAnnotations(this.changeAnnotations),r=this.changeAnnotations.manage(t),n=q.del(e,r)),this.edits.push(n),void 0!==r)return r},e.prototype.add=function(e){this.edits.push(e)},e.prototype.all=function(){return this.edits},e.prototype.clear=function(){this.edits.splice(0,this.edits.length)},e.prototype.assertChangeAnnotations=function(e){if(void 0===e)throw new Error("Text edit change is not configured to manage change annotations.")},e}(),it=function(){function e(e){this._annotations=void 0===e?Object.create(null):e,this._counter=0,this._size=0}return e.prototype.all=function(){return this._annotations},Object.defineProperty(e.prototype,"size",{get:function(){return this._size},enumerable:!1,configurable:!0}),e.prototype.manage=function(e,t){var n;if($.is(e)?n=e:(n=this.nextId(),t=e),void 0!==this._annotations[n])throw new Error("Id "+n+" is already in use.");if(void 0===t)throw new Error("No annotation provided for id "+n);return this._annotations[n]=t,this._size++,n},e.prototype.nextId=function(){return this._counter++,this._counter.toString()},e}();!function(){function e(e){var t=this;this._textEditChanges=Object.create(null),void 0!==e?(this._workspaceEdit=e,e.documentChanges?(this._changeAnnotations=new it(e.changeAnnotations),e.changeAnnotations=this._changeAnnotations.all(),e.documentChanges.forEach((function(e){if(G.is(e)){var n=new rt(e.edits,t._changeAnnotations);t._textEditChanges[e.textDocument.uri]=n}}))):e.changes&&Object.keys(e.changes).forEach((function(n){var r=new rt(e.changes[n]);t._textEditChanges[n]=r}))):this._workspaceEdit={}}Object.defineProperty(e.prototype,"edit",{get:function(){return this.initDocumentChanges(),void 0!==this._changeAnnotations&&(0===this._changeAnnotations.size?this._workspaceEdit.changeAnnotations=void 0:this._workspaceEdit.changeAnnotations=this._changeAnnotations.all()),this._workspaceEdit},enumerable:!1,configurable:!0}),e.prototype.getTextEditChange=function(e){if(de.is(e)){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var t={uri:e.uri,version:e.version};if(!(r=this._textEditChanges[t.uri])){var n={textDocument:t,edits:i=[]};this._workspaceEdit.documentChanges.push(n),r=new rt(i,this._changeAnnotations),this._textEditChanges[t.uri]=r}return r}if(this.initChanges(),void 0===this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var r;if(!(r=this._textEditChanges[e])){var i=[];this._workspaceEdit.changes[e]=i,r=new rt(i),this._textEditChanges[e]=r}return r},e.prototype.initDocumentChanges=function(){void 0===this._workspaceEdit.documentChanges&&void 0===this._workspaceEdit.changes&&(this._changeAnnotations=new it,this._workspaceEdit.documentChanges=[],this._workspaceEdit.changeAnnotations=this._changeAnnotations.all())},e.prototype.initChanges=function(){void 0===this._workspaceEdit.documentChanges&&void 0===this._workspaceEdit.changes&&(this._workspaceEdit.changes=Object.create(null))},e.prototype.createFile=function(e,t,n){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var r,i,o;if(X.is(t)||$.is(t)?r=t:n=t,void 0===r?i=Y.create(e,n):(o=$.is(r)?r:this._changeAnnotations.manage(r),i=Y.create(e,n,o)),this._workspaceEdit.documentChanges.push(i),void 0!==o)return o},e.prototype.renameFile=function(e,t,n,r){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var i,o,a;if(X.is(n)||$.is(n)?i=n:r=n,void 0===i?o=ee.create(e,t,r):(a=$.is(i)?i:this._changeAnnotations.manage(i),o=ee.create(e,t,r,a)),this._workspaceEdit.documentChanges.push(o),void 0!==a)return a},e.prototype.deleteFile=function(e,t,n){if(this.initDocumentChanges(),void 0===this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var r,i,o;if(X.is(t)||$.is(t)?r=t:n=t,void 0===r?i=ne.create(e,n):(o=$.is(r)?r:this._changeAnnotations.manage(r),i=ne.create(e,n,o)),this._workspaceEdit.documentChanges.push(i),void 0!==o)return o}}(),(se=ae||(ae={})).create=function(e){return{uri:e}},se.is=function(e){var t=e;return ot.defined(t)&&ot.string(t.uri)},(ce=ue||(ue={})).create=function(e,t){return{uri:e,version:t}},ce.is=function(e){var t=e;return ot.defined(t)&&ot.string(t.uri)&&ot.integer(t.version)},(ge=de||(de={})).create=function(e,t){return{uri:e,version:t}},ge.is=function(e){var t=e;return ot.defined(t)&&ot.string(t.uri)&&(null===t.version||ot.integer(t.version))},(he=le||(le={})).create=function(e,t,n,r){return{uri:e,languageId:t,version:n,text:r}},he.is=function(e){var t=e;return ot.defined(t)&&ot.string(t.uri)&&ot.string(t.languageId)&&ot.integer(t.version)&&ot.string(t.text)},(pe=fe||(fe={})).PlainText="plaintext",pe.Markdown="markdown",function(e){e.is=function(t){var n=t;return n===e.PlainText||n===e.Markdown}}(fe||(fe={})),(ve||(ve={})).is=function(e){var t=e;return ot.objectLiteral(e)&&fe.is(t.kind)&&ot.string(t.value)},(_e=me||(me={})).Text=1,_e.Method=2,_e.Function=3,_e.Constructor=4,_e.Field=5,_e.Variable=6,_e.Class=7,_e.Interface=8,_e.Module=9,_e.Property=10,_e.Unit=11,_e.Value=12,_e.Enum=13,_e.Keyword=14,_e.Snippet=15,_e.Color=16,_e.File=17,_e.Reference=18,_e.Folder=19,_e.EnumMember=20,_e.Constant=21,_e.Struct=22,_e.Event=23,_e.Operator=24,_e.TypeParameter=25,(ke=we||(we={})).PlainText=1,ke.Snippet=2,(be||(be={})).Deprecated=1,(Ee=ye||(ye={})).create=function(e,t,n){return{newText:e,insert:t,replace:n}},Ee.is=function(e){var t=e;return t&&ot.string(t.newText)&&v.is(t.insert)&&v.is(t.replace)},(xe=Ce||(Ce={})).asIs=1,xe.adjustIndentation=2,(Ae||(Ae={})).create=function(e){return{label:e}},(Ie||(Ie={})).create=function(e,t){return{items:e||[],isIncomplete:!!t}},(Re=Se||(Se={})).fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")},Re.is=function(e){var t=e;return ot.string(t)||ot.objectLiteral(t)&&ot.string(t.language)&&ot.string(t.value)},(Te||(Te={})).is=function(e){var t=e;return!!t&&ot.objectLiteral(t)&&(ve.is(t.contents)||Se.is(t.contents)||ot.typedArray(t.contents,Se.is))&&(void 0===e.range||v.is(e.range))},(De||(De={})).create=function(e,t){return t?{label:e,documentation:t}:{label:e}},(Me||(Me={})).create=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i={label:e};return ot.defined(t)&&(i.documentation=t),ot.defined(n)?i.parameters=n:i.parameters=[],i},(Le=Pe||(Pe={})).Text=1,Le.Read=2,Le.Write=3,(Fe||(Fe={})).create=function(e,t){var n={range:e};return ot.number(t)&&(n.kind=t),n},(Oe=je||(je={})).File=1,Oe.Module=2,Oe.Namespace=3,Oe.Package=4,Oe.Class=5,Oe.Method=6,Oe.Property=7,Oe.Field=8,Oe.Constructor=9,Oe.Enum=10,Oe.Interface=11,Oe.Function=12,Oe.Variable=13,Oe.Constant=14,Oe.String=15,Oe.Number=16,Oe.Boolean=17,Oe.Array=18,Oe.Object=19,Oe.Key=20,Oe.Null=21,Oe.EnumMember=22,Oe.Struct=23,Oe.Event=24,Oe.Operator=25,Oe.TypeParameter=26,(Ne||(Ne={})).Deprecated=1,(Ue||(Ue={})).create=function(e,t,n,r,i){var o={name:e,kind:t,location:{uri:r,range:n}};return i&&(o.containerName=i),o},(Ve=We||(We={})).create=function(e,t,n,r,i,o){var a={name:e,detail:t,kind:n,range:r,selectionRange:i};return void 0!==o&&(a.children=o),a},Ve.is=function(e){var t=e;return t&&ot.string(t.name)&&ot.number(t.kind)&&v.is(t.range)&&v.is(t.selectionRange)&&(void 0===t.detail||ot.string(t.detail))&&(void 0===t.deprecated||ot.boolean(t.deprecated))&&(void 0===t.children||Array.isArray(t.children))&&(void 0===t.tags||Array.isArray(t.tags))},(Ke=He||(He={})).Empty="",Ke.QuickFix="quickfix",Ke.Refactor="refactor",Ke.RefactorExtract="refactor.extract",Ke.RefactorInline="refactor.inline",Ke.RefactorRewrite="refactor.rewrite",Ke.Source="source",Ke.SourceOrganizeImports="source.organizeImports",Ke.SourceFixAll="source.fixAll",(Xe=ze||(ze={})).create=function(e,t){var n={diagnostics:e};return null!=t&&(n.only=t),n},Xe.is=function(e){var t=e;return ot.defined(t)&&ot.typedArray(t.diagnostics,U.is)&&(void 0===t.only||ot.typedArray(t.only,ot.string))},($e=Be||(Be={})).create=function(e,t,n){var r={title:e},i=!0;return"string"==typeof t?(i=!1,r.kind=t):V.is(t)?r.command=t:r.edit=t,i&&void 0!==n&&(r.kind=n),r},$e.is=function(e){var t=e;return t&&ot.string(t.title)&&(void 0===t.diagnostics||ot.typedArray(t.diagnostics,U.is))&&(void 0===t.kind||ot.string(t.kind))&&(void 0!==t.edit||void 0!==t.command)&&(void 0===t.command||V.is(t.command))&&(void 0===t.isPreferred||ot.boolean(t.isPreferred))&&(void 0===t.edit||ie.is(t.edit))},(Qe=qe||(qe={})).create=function(e,t){var n={range:e};return ot.defined(t)&&(n.data=t),n},Qe.is=function(e){var t=e;return ot.defined(t)&&v.is(t.range)&&(ot.undefined(t.command)||V.is(t.command))},(Je=Ge||(Ge={})).create=function(e,t){return{tabSize:e,insertSpaces:t}},Je.is=function(e){var t=e;return ot.defined(t)&&ot.uinteger(t.tabSize)&&ot.boolean(t.insertSpaces)},(Ze=Ye||(Ye={})).create=function(e,t,n){return{range:e,target:t,data:n}},Ze.is=function(e){var t=e;return ot.defined(t)&&v.is(t.range)&&(ot.undefined(t.target)||ot.string(t.target))},(tt=et||(et={})).create=function(e,t){return{range:e,parent:t}},tt.is=function(e){var t=e;return void 0!==t&&v.is(t.range)&&(void 0===t.parent||tt.is(t.parent))},function(e){function t(e,n){if(e.length<=1)return e;var r=e.length/2|0,i=e.slice(0,r),o=e.slice(r);t(i,n),t(o,n);for(var a=0,s=0,u=0;a<i.length&&s<o.length;){var c=n(i[a],o[s]);e[u++]=c<=0?i[a++]:o[s++]}for(;a<i.length;)e[u++]=i[a++];for(;s<o.length;)e[u++]=o[s++];return e}e.create=function(e,t,n,r){return new ut(e,t,n,r)},e.is=function(e){var t=e;return!!(ot.defined(t)&&ot.string(t.uri)&&(ot.undefined(t.languageId)||ot.string(t.languageId))&&ot.uinteger(t.lineCount)&&ot.func(t.getText)&&ot.func(t.positionAt)&&ot.func(t.offsetAt))},e.applyEdits=function(e,n){for(var r=e.getText(),i=t(n,(function(e,t){var n=e.range.start.line-t.range.start.line;return 0===n?e.range.start.character-t.range.start.character:n})),o=r.length,a=i.length-1;a>=0;a--){var s=i[a],u=e.offsetAt(s.range.start),c=e.offsetAt(s.range.end);if(!(c<=o))throw new Error("Overlapping edit");r=r.substring(0,u)+s.newText+r.substring(c,r.length),o=u}return r}}(nt||(nt={}));var ot,at,st,ut=function(){function e(e,t,n,r){this._uri=e,this._languageId=t,this._version=n,this._content=r,this._lineOffsets=void 0}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!1,configurable:!0}),e.prototype.getText=function(e){if(e){var t=this.offsetAt(e.start),n=this.offsetAt(e.end);return this._content.substring(t,n)}return this._content},e.prototype.update=function(e,t){this._content=e.text,this._version=t,this._lineOffsets=void 0},e.prototype.getLineOffsets=function(){if(void 0===this._lineOffsets){for(var e=[],t=this._content,n=!0,r=0;r<t.length;r++){n&&(e.push(r),n=!1);var i=t.charAt(r);n="\r"===i||"\n"===i,"\r"===i&&r+1<t.length&&"\n"===t.charAt(r+1)&&r++}n&&t.length>0&&e.push(t.length),this._lineOffsets=e}return this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var t=this.getLineOffsets(),n=0,r=t.length;if(0===r)return f.create(0,e);for(;n<r;){var i=Math.floor((n+r)/2);t[i]>e?r=i:n=i+1}var o=n-1;return f.create(o,e-t[o])},e.prototype.offsetAt=function(e){var t=this.getLineOffsets();if(e.line>=t.length)return this._content.length;if(e.line<0)return 0;var n=t[e.line],r=e.line+1<t.length?t[e.line+1]:this._content.length;return Math.max(Math.min(n+e.character,r),n)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!1,configurable:!0}),e}();at=ot||(ot={}),st=Object.prototype.toString,at.defined=function(e){return void 0!==e},at.undefined=function(e){return void 0===e},at.boolean=function(e){return!0===e||!1===e},at.string=function(e){return"[object String]"===st.call(e)},at.number=function(e){return"[object Number]"===st.call(e)},at.numberRange=function(e,t,n){return"[object Number]"===st.call(e)&&t<=e&&e<=n},at.integer=function(e){return"[object Number]"===st.call(e)&&-2147483648<=e&&e<=2147483647},at.uinteger=function(e){return"[object Number]"===st.call(e)&&0<=e&&e<=2147483647},at.func=function(e){return"[object Function]"===st.call(e)},at.objectLiteral=function(e){return null!==e&&"object"==typeof e},at.typedArray=function(e,t){return Array.isArray(e)&&e.every(t)};var ct=class{constructor(e,t,n){this._languageId=e,this._worker=t;const r=e=>{let t,n=e.getLanguageId();n===this._languageId&&(this._listener[e.uri.toString()]=e.onDidChangeContent((()=>{window.clearTimeout(t),t=window.setTimeout((()=>this._doValidate(e.uri,n)),500)})),this._doValidate(e.uri,n))},i=e=>{c.editor.setModelMarkers(e,this._languageId,[]);let t=e.uri.toString(),n=this._listener[t];n&&(n.dispose(),delete this._listener[t])};this._disposables.push(c.editor.onDidCreateModel(r)),this._disposables.push(c.editor.onWillDisposeModel(i)),this._disposables.push(c.editor.onDidChangeModelLanguage((e=>{i(e.model),r(e.model)}))),this._disposables.push(n((e=>{c.editor.getModels().forEach((e=>{e.getLanguageId()===this._languageId&&(i(e),r(e))}))}))),this._disposables.push({dispose:()=>{c.editor.getModels().forEach(i);for(let e in this._listener)this._listener[e].dispose()}}),c.editor.getModels().forEach(r)}_disposables=[];_listener=Object.create(null);dispose(){this._disposables.forEach((e=>e&&e.dispose())),this._disposables.length=0}_doValidate(e,t){this._worker(e).then((t=>t.doValidation(e.toString()))).then((n=>{const r=n.map((e=>function(e,t){let n="number"==typeof t.code?String(t.code):t.code;return{severity:dt(t.severity),startLineNumber:t.range.start.line+1,startColumn:t.range.start.character+1,endLineNumber:t.range.end.line+1,endColumn:t.range.end.character+1,message:t.message,code:n,source:t.source}}(0,e)));let i=c.editor.getModel(e);i&&i.getLanguageId()===t&&c.editor.setModelMarkers(i,t,r)})).then(void 0,(e=>{console.error(e)}))}};function dt(e){switch(e){case L.Error:return c.MarkerSeverity.Error;case L.Warning:return c.MarkerSeverity.Warning;case L.Information:return c.MarkerSeverity.Info;case L.Hint:return c.MarkerSeverity.Hint;default:return c.MarkerSeverity.Info}}var gt=class{constructor(e,t){this._worker=e,this._triggerCharacters=t}get triggerCharacters(){return this._triggerCharacters}provideCompletionItems(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doComplete(i.toString(),lt(t)))).then((n=>{if(!n)return;const r=e.getWordUntilPosition(t),i=new c.Range(t.lineNumber,r.startColumn,t.lineNumber,r.endColumn),o=n.items.map((e=>{const t={label:e.label,insertText:e.insertText||e.label,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,command:(n=e.command,n&&"editor.action.triggerSuggest"===n.command?{id:n.command,title:n.title,arguments:n.arguments}:void 0),range:i,kind:pt(e.kind)};var n,r;return e.textEdit&&(void 0!==(r=e.textEdit).insert&&void 0!==r.replace?t.range={insert:ft(e.textEdit.insert),replace:ft(e.textEdit.replace)}:t.range=ft(e.textEdit.range),t.insertText=e.textEdit.newText),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map(vt)),e.insertTextFormat===we.Snippet&&(t.insertTextRules=c.languages.CompletionItemInsertTextRule.InsertAsSnippet),t}));return{isIncomplete:n.isIncomplete,suggestions:o}}))}};function lt(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function ht(e){if(e)return{start:{line:e.startLineNumber-1,character:e.startColumn-1},end:{line:e.endLineNumber-1,character:e.endColumn-1}}}function ft(e){if(e)return new c.Range(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function pt(e){const t=c.languages.CompletionItemKind;switch(e){case me.Text:return t.Text;case me.Method:return t.Method;case me.Function:return t.Function;case me.Constructor:return t.Constructor;case me.Field:return t.Field;case me.Variable:return t.Variable;case me.Class:return t.Class;case me.Interface:return t.Interface;case me.Module:return t.Module;case me.Property:return t.Property;case me.Unit:return t.Unit;case me.Value:return t.Value;case me.Enum:return t.Enum;case me.Keyword:return t.Keyword;case me.Snippet:return t.Snippet;case me.Color:return t.Color;case me.File:return t.File;case me.Reference:return t.Reference}return t.Property}function vt(e){if(e)return{range:ft(e.range),text:e.newText}}var mt=class{constructor(e){this._worker=e}provideHover(e,t,n){let r=e.uri;return this._worker(r).then((e=>e.doHover(r.toString(),lt(t)))).then((e=>{if(e)return{range:ft(e.range),contents:wt(e.contents)}}))}};function _t(e){return"string"==typeof e?{value:e}:(t=e)&&"object"==typeof t&&"string"==typeof t.kind?"plaintext"===e.kind?{value:e.value.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}:{value:e.value}:{value:"```"+e.language+"\n"+e.value+"\n```\n"};var t}function wt(e){if(e)return Array.isArray(e)?e.map(_t):[_t(e)]}var kt=class{constructor(e){this._worker=e}provideDocumentHighlights(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDocumentHighlights(r.toString(),lt(t)))).then((e=>{if(e)return e.map((e=>({range:ft(e.range),kind:bt(e.kind)})))}))}};function bt(e){switch(e){case Pe.Read:return c.languages.DocumentHighlightKind.Read;case Pe.Write:return c.languages.DocumentHighlightKind.Write;case Pe.Text:return c.languages.DocumentHighlightKind.Text}return c.languages.DocumentHighlightKind.Text}var yt=class{constructor(e){this._worker=e}provideDefinition(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.findDefinition(r.toString(),lt(t)))).then((e=>{if(e)return[Et(e)]}))}};function Et(e){return{uri:c.Uri.parse(e.uri),range:ft(e.range)}}var Ct=class{constructor(e){this._worker=e}provideReferences(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.findReferences(i.toString(),lt(t)))).then((e=>{if(e)return e.map(Et)}))}},xt=class{constructor(e){this._worker=e}provideRenameEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.doRename(i.toString(),lt(t),n))).then((e=>function(e){if(!e||!e.changes)return;let t=[];for(let n in e.changes){const r=c.Uri.parse(n);for(let i of e.changes[n])t.push({resource:r,versionId:void 0,textEdit:{range:ft(i.range),text:i.newText}})}return{edits:t}}(e)))}},At=class{constructor(e){this._worker=e}provideDocumentSymbols(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentSymbols(n.toString()))).then((e=>{if(e)return e.map((e=>({name:e.name,detail:"",containerName:e.containerName,kind:It(e.kind),range:ft(e.location.range),selectionRange:ft(e.location.range),tags:[]})))}))}};function It(e){let t=c.languages.SymbolKind;switch(e){case je.File:return t.Array;case je.Module:return t.Module;case je.Namespace:return t.Namespace;case je.Package:return t.Package;case je.Class:return t.Class;case je.Method:return t.Method;case je.Property:return t.Property;case je.Field:return t.Field;case je.Constructor:return t.Constructor;case je.Enum:return t.Enum;case je.Interface:return t.Interface;case je.Function:return t.Function;case je.Variable:return t.Variable;case je.Constant:return t.Constant;case je.String:return t.String;case je.Number:return t.Number;case je.Boolean:return t.Boolean;case je.Array:return t.Array}return t.Function}var St=class{constructor(e){this._worker=e}provideLinks(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentLinks(n.toString()))).then((e=>{if(e)return{links:e.map((e=>({range:ft(e.range),url:e.target})))}}))}},Rt=class{constructor(e){this._worker=e}provideDocumentFormattingEdits(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.format(r.toString(),null,Dt(t)).then((e=>{if(e&&0!==e.length)return e.map(vt)}))))}},Tt=class{constructor(e){this._worker=e}provideDocumentRangeFormattingEdits(e,t,n,r){const i=e.uri;return this._worker(i).then((e=>e.format(i.toString(),ht(t),Dt(n)).then((e=>{if(e&&0!==e.length)return e.map(vt)}))))}};function Dt(e){return{tabSize:e.tabSize,insertSpaces:e.insertSpaces}}var Mt=class{constructor(e){this._worker=e}provideDocumentColors(e,t){const n=e.uri;return this._worker(n).then((e=>e.findDocumentColors(n.toString()))).then((e=>{if(e)return e.map((e=>({color:e.color,range:ft(e.range)})))}))}provideColorPresentations(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getColorPresentations(r.toString(),t.color,ht(t.range)))).then((e=>{if(e)return e.map((e=>{let t={label:e.label};return e.textEdit&&(t.textEdit=vt(e.textEdit)),e.additionalTextEdits&&(t.additionalTextEdits=e.additionalTextEdits.map(vt)),t}))}))}},Pt=class{constructor(e){this._worker=e}provideFoldingRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getFoldingRanges(r.toString(),t))).then((e=>{if(e)return e.map((e=>{const t={start:e.startLine+1,end:e.endLine+1};return void 0!==e.kind&&(t.kind=function(e){switch(e){case S.Comment:return c.languages.FoldingRangeKind.Comment;case S.Imports:return c.languages.FoldingRangeKind.Imports;case S.Region:return c.languages.FoldingRangeKind.Region}}(e.kind)),t}))}))}},Lt=class{constructor(e){this._worker=e}provideSelectionRanges(e,t,n){const r=e.uri;return this._worker(r).then((e=>e.getSelectionRanges(r.toString(),t.map(lt)))).then((e=>{if(e)return e.map((e=>{const t=[];for(;e;)t.push({range:ft(e.range)}),e=e.parent;return t}))}))}};function Ft(e){const t=[],n=[],r=new oe(e);t.push(r);const i=(...e)=>r.getLanguageServiceWorker(...e);return function(){const{languageId:t,modeConfiguration:r}=e;Ot(n),r.completionItems&&n.push(c.languages.registerCompletionItemProvider(t,new gt(i,["/","-",":"]))),r.hovers&&n.push(c.languages.registerHoverProvider(t,new mt(i))),r.documentHighlights&&n.push(c.languages.registerDocumentHighlightProvider(t,new kt(i))),r.definitions&&n.push(c.languages.registerDefinitionProvider(t,new yt(i))),r.references&&n.push(c.languages.registerReferenceProvider(t,new Ct(i))),r.documentSymbols&&n.push(c.languages.registerDocumentSymbolProvider(t,new At(i))),r.rename&&n.push(c.languages.registerRenameProvider(t,new xt(i))),r.colors&&n.push(c.languages.registerColorProvider(t,new Mt(i))),r.foldingRanges&&n.push(c.languages.registerFoldingRangeProvider(t,new Pt(i))),r.diagnostics&&n.push(new ct(t,i,e.onDidChange)),r.selectionRanges&&n.push(c.languages.registerSelectionRangeProvider(t,new Lt(i))),r.documentFormattingEdits&&n.push(c.languages.registerDocumentFormattingEditProvider(t,new Rt(i))),r.documentRangeFormattingEdits&&n.push(c.languages.registerDocumentRangeFormattingEditProvider(t,new Tt(i)))}(),t.push(jt(n)),jt(t)}function jt(e){return{dispose:()=>Ot(e)}}function Ot(e){for(;e.length;)e.pop().dispose()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUtyTyxFQUEyQnVjLFVBQVVrRyx1Q0FBdUMvZCxFQUFZLElBQUkwYSxHQUErQnZGLEtBRXhJc0gsRUFBa0J1Qiw4QkFDcEJ6QixFQUFVNVMsS0FBS3JPLEVBQTJCdWMsVUFBVW9HLDRDQUE0Q2plLEVBQVksSUFBSThhLEdBQW9DM0YsSUFFeEosQ0FDQStJLEdBQ0E1QixFQUFZM1MsS0FBS3dVLEdBQWE1QixJQUN2QjRCLEdBQWE3QixFQUN0QixDQUNBLFNBQVM2QixHQUFhN0IsR0FDcEIsTUFBTyxDQUFFL2MsUUFBUyxJQUFNbWQsR0FBV0osR0FDckMsQ0FDQSxTQUFTSSxHQUFXSixHQUNsQixLQUFPQSxFQUFZOVgsUUFDakI4WCxFQUFZOEIsTUFBTTdlLFNBRXRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vanNvbi1uZXRzLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2xhbmd1YWdlL2Nzcy9jc3NNb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFZlcnNpb246IDAuMzQuMSg1NDc4NzBiNjg4MTMwMmM1YjRmZjMyMTczYzE2ZDA2MDA5ZTM1ODhmKVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L21vbmFjby1lZGl0b3IvYmxvYi9tYWluL0xJQ0VOU0UudHh0XG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX19yZUV4cG9ydCA9ICh0YXJnZXQsIG1vZCwgc2Vjb25kVGFyZ2V0KSA9PiAoX19jb3B5UHJvcHModGFyZ2V0LCBtb2QsIFwiZGVmYXVsdFwiKSwgc2Vjb25kVGFyZ2V0ICYmIF9fY29weVByb3BzKHNlY29uZFRhcmdldCwgbW9kLCBcImRlZmF1bHRcIikpO1xuXG4vLyBzcmMvZmlsbGVycy9tb25hY28tZWRpdG9yLWNvcmUudHNcbnZhciBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cyA9IHt9O1xuX19yZUV4cG9ydChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cywgbW9uYWNvX2VkaXRvcl9jb3JlX3N0YXIpO1xuaW1wb3J0ICogYXMgbW9uYWNvX2VkaXRvcl9jb3JlX3N0YXIgZnJvbSBcIi4uLy4uL2VkaXRvci9lZGl0b3IuYXBpLmpzXCI7XG5cbi8vIHNyYy9sYW5ndWFnZS9jc3Mvd29ya2VyTWFuYWdlci50c1xudmFyIFNUT1BfV0hFTl9JRExFX0ZPUiA9IDIgKiA2MCAqIDFlMztcbnZhciBXb3JrZXJNYW5hZ2VyID0gY2xhc3Mge1xuICBfZGVmYXVsdHM7XG4gIF9pZGxlQ2hlY2tJbnRlcnZhbDtcbiAgX2xhc3RVc2VkVGltZTtcbiAgX2NvbmZpZ0NoYW5nZUxpc3RlbmVyO1xuICBfd29ya2VyO1xuICBfY2xpZW50O1xuICBjb25zdHJ1Y3RvcihkZWZhdWx0cykge1xuICAgIHRoaXMuX2RlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICB0aGlzLl9jbGllbnQgPSBudWxsO1xuICAgIHRoaXMuX2lkbGVDaGVja0ludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHRoaXMuX2NoZWNrSWZJZGxlKCksIDMwICogMWUzKTtcbiAgICB0aGlzLl9sYXN0VXNlZFRpbWUgPSAwO1xuICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyID0gdGhpcy5fZGVmYXVsdHMub25EaWRDaGFuZ2UoKCkgPT4gdGhpcy5fc3RvcFdvcmtlcigpKTtcbiAgfVxuICBfc3RvcFdvcmtlcigpIHtcbiAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICB0aGlzLl93b3JrZXIuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5fY2xpZW50ID0gbnVsbDtcbiAgfVxuICBkaXNwb3NlKCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faWRsZUNoZWNrSW50ZXJ2YWwpO1xuICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICB0aGlzLl9zdG9wV29ya2VyKCk7XG4gIH1cbiAgX2NoZWNrSWZJZGxlKCkge1xuICAgIGlmICghdGhpcy5fd29ya2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0aW1lUGFzc2VkU2luY2VMYXN0VXNlZCA9IERhdGUubm93KCkgLSB0aGlzLl9sYXN0VXNlZFRpbWU7XG4gICAgaWYgKHRpbWVQYXNzZWRTaW5jZUxhc3RVc2VkID4gU1RPUF9XSEVOX0lETEVfRk9SKSB7XG4gICAgICB0aGlzLl9zdG9wV29ya2VyKCk7XG4gICAgfVxuICB9XG4gIF9nZXRDbGllbnQoKSB7XG4gICAgdGhpcy5fbGFzdFVzZWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBpZiAoIXRoaXMuX2NsaWVudCkge1xuICAgICAgdGhpcy5fd29ya2VyID0gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuZWRpdG9yLmNyZWF0ZVdlYldvcmtlcih7XG4gICAgICAgIG1vZHVsZUlkOiBcInZzL2xhbmd1YWdlL2Nzcy9jc3NXb3JrZXJcIixcbiAgICAgICAgbGFiZWw6IHRoaXMuX2RlZmF1bHRzLmxhbmd1YWdlSWQsXG4gICAgICAgIGNyZWF0ZURhdGE6IHtcbiAgICAgICAgICBvcHRpb25zOiB0aGlzLl9kZWZhdWx0cy5vcHRpb25zLFxuICAgICAgICAgIGxhbmd1YWdlSWQ6IHRoaXMuX2RlZmF1bHRzLmxhbmd1YWdlSWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLl9jbGllbnQgPSB0aGlzLl93b3JrZXIuZ2V0UHJveHkoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudDtcbiAgfVxuICBnZXRMYW5ndWFnZVNlcnZpY2VXb3JrZXIoLi4ucmVzb3VyY2VzKSB7XG4gICAgbGV0IF9jbGllbnQ7XG4gICAgcmV0dXJuIHRoaXMuX2dldENsaWVudCgpLnRoZW4oKGNsaWVudCkgPT4ge1xuICAgICAgX2NsaWVudCA9IGNsaWVudDtcbiAgICB9KS50aGVuKChfKSA9PiB7XG4gICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93b3JrZXIud2l0aFN5bmNlZFJlc291cmNlcyhyZXNvdXJjZXMpO1xuICAgICAgfVxuICAgIH0pLnRoZW4oKF8pID0+IF9jbGllbnQpO1xuICB9XG59O1xuXG4vLyBub2RlX21vZHVsZXMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXR5cGVzL2xpYi9lc20vbWFpbi5qc1xudmFyIGludGVnZXI7XG4oZnVuY3Rpb24oaW50ZWdlcjIpIHtcbiAgaW50ZWdlcjIuTUlOX1ZBTFVFID0gLTIxNDc0ODM2NDg7XG4gIGludGVnZXIyLk1BWF9WQUxVRSA9IDIxNDc0ODM2NDc7XG59KShpbnRlZ2VyIHx8IChpbnRlZ2VyID0ge30pKTtcbnZhciB1aW50ZWdlcjtcbihmdW5jdGlvbih1aW50ZWdlcjIpIHtcbiAgdWludGVnZXIyLk1JTl9WQUxVRSA9IDA7XG4gIHVpbnRlZ2VyMi5NQVhfVkFMVUUgPSAyMTQ3NDgzNjQ3O1xufSkodWludGVnZXIgfHwgKHVpbnRlZ2VyID0ge30pKTtcbnZhciBQb3NpdGlvbjtcbihmdW5jdGlvbihQb3NpdGlvbjMpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxpbmUsIGNoYXJhY3Rlcikge1xuICAgIGlmIChsaW5lID09PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICBsaW5lID0gdWludGVnZXIuTUFYX1ZBTFVFO1xuICAgIH1cbiAgICBpZiAoY2hhcmFjdGVyID09PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB1aW50ZWdlci5NQVhfVkFMVUU7XG4gICAgfVxuICAgIHJldHVybiB7IGxpbmUsIGNoYXJhY3RlciB9O1xuICB9XG4gIFBvc2l0aW9uMy5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLmxpbmUpICYmIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5jaGFyYWN0ZXIpO1xuICB9XG4gIFBvc2l0aW9uMy5pcyA9IGlzO1xufSkoUG9zaXRpb24gfHwgKFBvc2l0aW9uID0ge30pKTtcbnZhciBSYW5nZTtcbihmdW5jdGlvbihSYW5nZTMpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKG9uZSwgdHdvLCB0aHJlZSwgZm91cikge1xuICAgIGlmIChJcy51aW50ZWdlcihvbmUpICYmIElzLnVpbnRlZ2VyKHR3bykgJiYgSXMudWludGVnZXIodGhyZWUpICYmIElzLnVpbnRlZ2VyKGZvdXIpKSB7XG4gICAgICByZXR1cm4geyBzdGFydDogUG9zaXRpb24uY3JlYXRlKG9uZSwgdHdvKSwgZW5kOiBQb3NpdGlvbi5jcmVhdGUodGhyZWUsIGZvdXIpIH07XG4gICAgfSBlbHNlIGlmIChQb3NpdGlvbi5pcyhvbmUpICYmIFBvc2l0aW9uLmlzKHR3bykpIHtcbiAgICAgIHJldHVybiB7IHN0YXJ0OiBvbmUsIGVuZDogdHdvIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJhbmdlI2NyZWF0ZSBjYWxsZWQgd2l0aCBpbnZhbGlkIGFyZ3VtZW50c1tcIiArIG9uZSArIFwiLCBcIiArIHR3byArIFwiLCBcIiArIHRocmVlICsgXCIsIFwiICsgZm91ciArIFwiXVwiKTtcbiAgICB9XG4gIH1cbiAgUmFuZ2UzLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBQb3NpdGlvbi5pcyhjYW5kaWRhdGUuc3RhcnQpICYmIFBvc2l0aW9uLmlzKGNhbmRpZGF0ZS5lbmQpO1xuICB9XG4gIFJhbmdlMy5pcyA9IGlzO1xufSkoUmFuZ2UgfHwgKFJhbmdlID0ge30pKTtcbnZhciBMb2NhdGlvbjtcbihmdW5jdGlvbihMb2NhdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgcmFuZ2UpIHtcbiAgICByZXR1cm4geyB1cmksIHJhbmdlIH07XG4gIH1cbiAgTG9jYXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS51cmkpKTtcbiAgfVxuICBMb2NhdGlvbjIuaXMgPSBpcztcbn0pKExvY2F0aW9uIHx8IChMb2NhdGlvbiA9IHt9KSk7XG52YXIgTG9jYXRpb25MaW5rO1xuKGZ1bmN0aW9uKExvY2F0aW9uTGluazIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHRhcmdldFVyaSwgdGFyZ2V0UmFuZ2UsIHRhcmdldFNlbGVjdGlvblJhbmdlLCBvcmlnaW5TZWxlY3Rpb25SYW5nZSkge1xuICAgIHJldHVybiB7IHRhcmdldFVyaSwgdGFyZ2V0UmFuZ2UsIHRhcmdldFNlbGVjdGlvblJhbmdlLCBvcmlnaW5TZWxlY3Rpb25SYW5nZSB9O1xuICB9XG4gIExvY2F0aW9uTGluazIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS50YXJnZXRSYW5nZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50YXJnZXRVcmkpICYmIChSYW5nZS5pcyhjYW5kaWRhdGUudGFyZ2V0U2VsZWN0aW9uUmFuZ2UpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUudGFyZ2V0U2VsZWN0aW9uUmFuZ2UpKSAmJiAoUmFuZ2UuaXMoY2FuZGlkYXRlLm9yaWdpblNlbGVjdGlvblJhbmdlKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLm9yaWdpblNlbGVjdGlvblJhbmdlKSk7XG4gIH1cbiAgTG9jYXRpb25MaW5rMi5pcyA9IGlzO1xufSkoTG9jYXRpb25MaW5rIHx8IChMb2NhdGlvbkxpbmsgPSB7fSkpO1xudmFyIENvbG9yO1xuKGZ1bmN0aW9uKENvbG9yMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVkLFxuICAgICAgZ3JlZW4sXG4gICAgICBibHVlLFxuICAgICAgYWxwaGFcbiAgICB9O1xuICB9XG4gIENvbG9yMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUucmVkLCAwLCAxKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuZ3JlZW4sIDAsIDEpICYmIElzLm51bWJlclJhbmdlKGNhbmRpZGF0ZS5ibHVlLCAwLCAxKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuYWxwaGEsIDAsIDEpO1xuICB9XG4gIENvbG9yMi5pcyA9IGlzO1xufSkoQ29sb3IgfHwgKENvbG9yID0ge30pKTtcbnZhciBDb2xvckluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uKENvbG9ySW5mb3JtYXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgY29sb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmFuZ2UsXG4gICAgICBjb2xvclxuICAgIH07XG4gIH1cbiAgQ29sb3JJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBDb2xvci5pcyhjYW5kaWRhdGUuY29sb3IpO1xuICB9XG4gIENvbG9ySW5mb3JtYXRpb24yLmlzID0gaXM7XG59KShDb2xvckluZm9ybWF0aW9uIHx8IChDb2xvckluZm9ybWF0aW9uID0ge30pKTtcbnZhciBDb2xvclByZXNlbnRhdGlvbjtcbihmdW5jdGlvbihDb2xvclByZXNlbnRhdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCB0ZXh0RWRpdCwgYWRkaXRpb25hbFRleHRFZGl0cykge1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbCxcbiAgICAgIHRleHRFZGl0LFxuICAgICAgYWRkaXRpb25hbFRleHRFZGl0c1xuICAgIH07XG4gIH1cbiAgQ29sb3JQcmVzZW50YXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLnN0cmluZyhjYW5kaWRhdGUubGFiZWwpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnRleHRFZGl0KSB8fCBUZXh0RWRpdC5pcyhjYW5kaWRhdGUpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzLCBUZXh0RWRpdC5pcykpO1xuICB9XG4gIENvbG9yUHJlc2VudGF0aW9uMi5pcyA9IGlzO1xufSkoQ29sb3JQcmVzZW50YXRpb24gfHwgKENvbG9yUHJlc2VudGF0aW9uID0ge30pKTtcbnZhciBGb2xkaW5nUmFuZ2VLaW5kO1xuKGZ1bmN0aW9uKEZvbGRpbmdSYW5nZUtpbmQyKSB7XG4gIEZvbGRpbmdSYW5nZUtpbmQyW1wiQ29tbWVudFwiXSA9IFwiY29tbWVudFwiO1xuICBGb2xkaW5nUmFuZ2VLaW5kMltcIkltcG9ydHNcIl0gPSBcImltcG9ydHNcIjtcbiAgRm9sZGluZ1JhbmdlS2luZDJbXCJSZWdpb25cIl0gPSBcInJlZ2lvblwiO1xufSkoRm9sZGluZ1JhbmdlS2luZCB8fCAoRm9sZGluZ1JhbmdlS2luZCA9IHt9KSk7XG52YXIgRm9sZGluZ1JhbmdlO1xuKGZ1bmN0aW9uKEZvbGRpbmdSYW5nZTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHN0YXJ0TGluZSwgZW5kTGluZSwgc3RhcnRDaGFyYWN0ZXIsIGVuZENoYXJhY3Rlciwga2luZCkge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBzdGFydExpbmUsXG4gICAgICBlbmRMaW5lXG4gICAgfTtcbiAgICBpZiAoSXMuZGVmaW5lZChzdGFydENoYXJhY3RlcikpIHtcbiAgICAgIHJlc3VsdC5zdGFydENoYXJhY3RlciA9IHN0YXJ0Q2hhcmFjdGVyO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChlbmRDaGFyYWN0ZXIpKSB7XG4gICAgICByZXN1bHQuZW5kQ2hhcmFjdGVyID0gZW5kQ2hhcmFjdGVyO1xuICAgIH1cbiAgICBpZiAoSXMuZGVmaW5lZChraW5kKSkge1xuICAgICAgcmVzdWx0LmtpbmQgPSBraW5kO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIEZvbGRpbmdSYW5nZTIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMudWludGVnZXIoY2FuZGlkYXRlLnN0YXJ0TGluZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLnN0YXJ0TGluZSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuc3RhcnRDaGFyYWN0ZXIpIHx8IElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5zdGFydENoYXJhY3RlcikpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmVuZENoYXJhY3RlcikgfHwgSXMudWludGVnZXIoY2FuZGlkYXRlLmVuZENoYXJhY3RlcikpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmtpbmQpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUua2luZCkpO1xuICB9XG4gIEZvbGRpbmdSYW5nZTIuaXMgPSBpcztcbn0pKEZvbGRpbmdSYW5nZSB8fCAoRm9sZGluZ1JhbmdlID0ge30pKTtcbnZhciBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uKERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShsb2NhdGlvbiwgbWVzc2FnZSkge1xuICAgIHJldHVybiB7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIG1lc3NhZ2VcbiAgICB9O1xuICB9XG4gIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBMb2NhdGlvbi5pcyhjYW5kaWRhdGUubG9jYXRpb24pICYmIElzLnN0cmluZyhjYW5kaWRhdGUubWVzc2FnZSk7XG4gIH1cbiAgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbjIuaXMgPSBpcztcbn0pKERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24gfHwgKERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24gPSB7fSkpO1xudmFyIERpYWdub3N0aWNTZXZlcml0eTtcbihmdW5jdGlvbihEaWFnbm9zdGljU2V2ZXJpdHkyKSB7XG4gIERpYWdub3N0aWNTZXZlcml0eTIuRXJyb3IgPSAxO1xuICBEaWFnbm9zdGljU2V2ZXJpdHkyLldhcm5pbmcgPSAyO1xuICBEaWFnbm9zdGljU2V2ZXJpdHkyLkluZm9ybWF0aW9uID0gMztcbiAgRGlhZ25vc3RpY1NldmVyaXR5Mi5IaW50ID0gNDtcbn0pKERpYWdub3N0aWNTZXZlcml0eSB8fCAoRGlhZ25vc3RpY1NldmVyaXR5ID0ge30pKTtcbnZhciBEaWFnbm9zdGljVGFnO1xuKGZ1bmN0aW9uKERpYWdub3N0aWNUYWcyKSB7XG4gIERpYWdub3N0aWNUYWcyLlVubmVjZXNzYXJ5ID0gMTtcbiAgRGlhZ25vc3RpY1RhZzIuRGVwcmVjYXRlZCA9IDI7XG59KShEaWFnbm9zdGljVGFnIHx8IChEaWFnbm9zdGljVGFnID0ge30pKTtcbnZhciBDb2RlRGVzY3JpcHRpb247XG4oZnVuY3Rpb24oQ29kZURlc2NyaXB0aW9uMikge1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB2b2lkIDAgJiYgY2FuZGlkYXRlICE9PSBudWxsICYmIElzLnN0cmluZyhjYW5kaWRhdGUuaHJlZik7XG4gIH1cbiAgQ29kZURlc2NyaXB0aW9uMi5pcyA9IGlzO1xufSkoQ29kZURlc2NyaXB0aW9uIHx8IChDb2RlRGVzY3JpcHRpb24gPSB7fSkpO1xudmFyIERpYWdub3N0aWM7XG4oZnVuY3Rpb24oRGlhZ25vc3RpYzIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBtZXNzYWdlLCBzZXZlcml0eSwgY29kZSwgc291cmNlLCByZWxhdGVkSW5mb3JtYXRpb24pIHtcbiAgICB2YXIgcmVzdWx0ID0geyByYW5nZSwgbWVzc2FnZSB9O1xuICAgIGlmIChJcy5kZWZpbmVkKHNldmVyaXR5KSkge1xuICAgICAgcmVzdWx0LnNldmVyaXR5ID0gc2V2ZXJpdHk7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKGNvZGUpKSB7XG4gICAgICByZXN1bHQuY29kZSA9IGNvZGU7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKHNvdXJjZSkpIHtcbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIGlmIChJcy5kZWZpbmVkKHJlbGF0ZWRJbmZvcm1hdGlvbikpIHtcbiAgICAgIHJlc3VsdC5yZWxhdGVkSW5mb3JtYXRpb24gPSByZWxhdGVkSW5mb3JtYXRpb247XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgRGlhZ25vc3RpYzIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubWVzc2FnZSkgJiYgKElzLm51bWJlcihjYW5kaWRhdGUuc2V2ZXJpdHkpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUuc2V2ZXJpdHkpKSAmJiAoSXMuaW50ZWdlcihjYW5kaWRhdGUuY29kZSkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5jb2RlKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLmNvZGUpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5jb2RlRGVzY3JpcHRpb24pIHx8IElzLnN0cmluZygoX2EgPSBjYW5kaWRhdGUuY29kZURlc2NyaXB0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaHJlZikpICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLnNvdXJjZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5zb3VyY2UpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5yZWxhdGVkSW5mb3JtYXRpb24pIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLnJlbGF0ZWRJbmZvcm1hdGlvbiwgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbi5pcykpO1xuICB9XG4gIERpYWdub3N0aWMyLmlzID0gaXM7XG59KShEaWFnbm9zdGljIHx8IChEaWFnbm9zdGljID0ge30pKTtcbnZhciBDb21tYW5kO1xuKGZ1bmN0aW9uKENvbW1hbmQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh0aXRsZSwgY29tbWFuZCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSB7IHRpdGxlLCBjb21tYW5kIH07XG4gICAgaWYgKElzLmRlZmluZWQoYXJncykgJiYgYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICByZXN1bHQuYXJndW1lbnRzID0gYXJncztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBDb21tYW5kMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50aXRsZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5jb21tYW5kKTtcbiAgfVxuICBDb21tYW5kMi5pcyA9IGlzO1xufSkoQ29tbWFuZCB8fCAoQ29tbWFuZCA9IHt9KSk7XG52YXIgVGV4dEVkaXQ7XG4oZnVuY3Rpb24oVGV4dEVkaXQyKSB7XG4gIGZ1bmN0aW9uIHJlcGxhY2UocmFuZ2UsIG5ld1RleHQpIHtcbiAgICByZXR1cm4geyByYW5nZSwgbmV3VGV4dCB9O1xuICB9XG4gIFRleHRFZGl0Mi5yZXBsYWNlID0gcmVwbGFjZTtcbiAgZnVuY3Rpb24gaW5zZXJ0KHBvc2l0aW9uLCBuZXdUZXh0KSB7XG4gICAgcmV0dXJuIHsgcmFuZ2U6IHsgc3RhcnQ6IHBvc2l0aW9uLCBlbmQ6IHBvc2l0aW9uIH0sIG5ld1RleHQgfTtcbiAgfVxuICBUZXh0RWRpdDIuaW5zZXJ0ID0gaW5zZXJ0O1xuICBmdW5jdGlvbiBkZWwocmFuZ2UpIHtcbiAgICByZXR1cm4geyByYW5nZSwgbmV3VGV4dDogXCJcIiB9O1xuICB9XG4gIFRleHRFZGl0Mi5kZWwgPSBkZWw7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uZXdUZXh0KSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpO1xuICB9XG4gIFRleHRFZGl0Mi5pcyA9IGlzO1xufSkoVGV4dEVkaXQgfHwgKFRleHRFZGl0ID0ge30pKTtcbnZhciBDaGFuZ2VBbm5vdGF0aW9uO1xuKGZ1bmN0aW9uKENoYW5nZUFubm90YXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgbmVlZHNDb25maXJtYXRpb24sIGRlc2NyaXB0aW9uKSB7XG4gICAgdmFyIHJlc3VsdCA9IHsgbGFiZWwgfTtcbiAgICBpZiAobmVlZHNDb25maXJtYXRpb24gIT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0Lm5lZWRzQ29uZmlybWF0aW9uID0gbmVlZHNDb25maXJtYXRpb247XG4gICAgfVxuICAgIGlmIChkZXNjcmlwdGlvbiAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBDaGFuZ2VBbm5vdGF0aW9uMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgIT09IHZvaWQgMCAmJiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYWJlbCkgJiYgKElzLmJvb2xlYW4oY2FuZGlkYXRlLm5lZWRzQ29uZmlybWF0aW9uKSB8fCBjYW5kaWRhdGUubmVlZHNDb25maXJtYXRpb24gPT09IHZvaWQgMCkgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUuZGVzY3JpcHRpb24pIHx8IGNhbmRpZGF0ZS5kZXNjcmlwdGlvbiA9PT0gdm9pZCAwKTtcbiAgfVxuICBDaGFuZ2VBbm5vdGF0aW9uMi5pcyA9IGlzO1xufSkoQ2hhbmdlQW5ub3RhdGlvbiB8fCAoQ2hhbmdlQW5ub3RhdGlvbiA9IHt9KSk7XG52YXIgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXI7XG4oZnVuY3Rpb24oQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIyKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiB0eXBlb2YgY2FuZGlkYXRlID09PSBcInN0cmluZ1wiO1xuICB9XG4gIENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyMi5pcyA9IGlzO1xufSkoQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIgfHwgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyID0ge30pKTtcbnZhciBBbm5vdGF0ZWRUZXh0RWRpdDtcbihmdW5jdGlvbihBbm5vdGF0ZWRUZXh0RWRpdDIpIHtcbiAgZnVuY3Rpb24gcmVwbGFjZShyYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbikge1xuICAgIHJldHVybiB7IHJhbmdlLCBuZXdUZXh0LCBhbm5vdGF0aW9uSWQ6IGFubm90YXRpb24gfTtcbiAgfVxuICBBbm5vdGF0ZWRUZXh0RWRpdDIucmVwbGFjZSA9IHJlcGxhY2U7XG4gIGZ1bmN0aW9uIGluc2VydChwb3NpdGlvbiwgbmV3VGV4dCwgYW5ub3RhdGlvbikge1xuICAgIHJldHVybiB7IHJhbmdlOiB7IHN0YXJ0OiBwb3NpdGlvbiwgZW5kOiBwb3NpdGlvbiB9LCBuZXdUZXh0LCBhbm5vdGF0aW9uSWQ6IGFubm90YXRpb24gfTtcbiAgfVxuICBBbm5vdGF0ZWRUZXh0RWRpdDIuaW5zZXJ0ID0gaW5zZXJ0O1xuICBmdW5jdGlvbiBkZWwocmFuZ2UsIGFubm90YXRpb24pIHtcbiAgICByZXR1cm4geyByYW5nZSwgbmV3VGV4dDogXCJcIiwgYW5ub3RhdGlvbklkOiBhbm5vdGF0aW9uIH07XG4gIH1cbiAgQW5ub3RhdGVkVGV4dEVkaXQyLmRlbCA9IGRlbDtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIFRleHRFZGl0LmlzKGNhbmRpZGF0ZSkgJiYgKENoYW5nZUFubm90YXRpb24uaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICB9XG4gIEFubm90YXRlZFRleHRFZGl0Mi5pcyA9IGlzO1xufSkoQW5ub3RhdGVkVGV4dEVkaXQgfHwgKEFubm90YXRlZFRleHRFZGl0ID0ge30pKTtcbnZhciBUZXh0RG9jdW1lbnRFZGl0O1xuKGZ1bmN0aW9uKFRleHREb2N1bWVudEVkaXQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh0ZXh0RG9jdW1lbnQsIGVkaXRzKSB7XG4gICAgcmV0dXJuIHsgdGV4dERvY3VtZW50LCBlZGl0cyB9O1xuICB9XG4gIFRleHREb2N1bWVudEVkaXQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIuaXMoY2FuZGlkYXRlLnRleHREb2N1bWVudCkgJiYgQXJyYXkuaXNBcnJheShjYW5kaWRhdGUuZWRpdHMpO1xuICB9XG4gIFRleHREb2N1bWVudEVkaXQyLmlzID0gaXM7XG59KShUZXh0RG9jdW1lbnRFZGl0IHx8IChUZXh0RG9jdW1lbnRFZGl0ID0ge30pKTtcbnZhciBDcmVhdGVGaWxlO1xuKGZ1bmN0aW9uKENyZWF0ZUZpbGUyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIG9wdGlvbnMsIGFubm90YXRpb24pIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAga2luZDogXCJjcmVhdGVcIixcbiAgICAgIHVyaVxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMgIT09IHZvaWQgMCAmJiAob3B0aW9ucy5vdmVyd3JpdGUgIT09IHZvaWQgMCB8fCBvcHRpb25zLmlnbm9yZUlmRXhpc3RzICE9PSB2b2lkIDApKSB7XG4gICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGlmIChhbm5vdGF0aW9uICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5hbm5vdGF0aW9uSWQgPSBhbm5vdGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIENyZWF0ZUZpbGUyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBjYW5kaWRhdGUua2luZCA9PT0gXCJjcmVhdGVcIiAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zID09PSB2b2lkIDAgfHwgKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMub3ZlcndyaXRlKSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmRXhpc3RzID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cykpKSAmJiAoY2FuZGlkYXRlLmFubm90YXRpb25JZCA9PT0gdm9pZCAwIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgfVxuICBDcmVhdGVGaWxlMi5pcyA9IGlzO1xufSkoQ3JlYXRlRmlsZSB8fCAoQ3JlYXRlRmlsZSA9IHt9KSk7XG52YXIgUmVuYW1lRmlsZTtcbihmdW5jdGlvbihSZW5hbWVGaWxlMikge1xuICBmdW5jdGlvbiBjcmVhdGUob2xkVXJpLCBuZXdVcmksIG9wdGlvbnMsIGFubm90YXRpb24pIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAga2luZDogXCJyZW5hbWVcIixcbiAgICAgIG9sZFVyaSxcbiAgICAgIG5ld1VyaVxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMgIT09IHZvaWQgMCAmJiAob3B0aW9ucy5vdmVyd3JpdGUgIT09IHZvaWQgMCB8fCBvcHRpb25zLmlnbm9yZUlmRXhpc3RzICE9PSB2b2lkIDApKSB7XG4gICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGlmIChhbm5vdGF0aW9uICE9PSB2b2lkIDApIHtcbiAgICAgIHJlc3VsdC5hbm5vdGF0aW9uSWQgPSBhbm5vdGF0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIFJlbmFtZUZpbGUyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBjYW5kaWRhdGUua2luZCA9PT0gXCJyZW5hbWVcIiAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm9sZFVyaSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uZXdVcmkpICYmIChjYW5kaWRhdGUub3B0aW9ucyA9PT0gdm9pZCAwIHx8IChjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSkpICYmIChjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cyA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMpKSkgJiYgKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQgPT09IHZvaWQgMCB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhjYW5kaWRhdGUuYW5ub3RhdGlvbklkKSk7XG4gIH1cbiAgUmVuYW1lRmlsZTIuaXMgPSBpcztcbn0pKFJlbmFtZUZpbGUgfHwgKFJlbmFtZUZpbGUgPSB7fSkpO1xudmFyIERlbGV0ZUZpbGU7XG4oZnVuY3Rpb24oRGVsZXRlRmlsZTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgb3B0aW9ucywgYW5ub3RhdGlvbikge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBraW5kOiBcImRlbGV0ZVwiLFxuICAgICAgdXJpXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucyAhPT0gdm9pZCAwICYmIChvcHRpb25zLnJlY3Vyc2l2ZSAhPT0gdm9pZCAwIHx8IG9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMgIT09IHZvaWQgMCkpIHtcbiAgICAgIHJlc3VsdC5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgaWYgKGFubm90YXRpb24gIT09IHZvaWQgMCkge1xuICAgICAgcmVzdWx0LmFubm90YXRpb25JZCA9IGFubm90YXRpb247XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgRGVsZXRlRmlsZTIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIGNhbmRpZGF0ZS5raW5kID09PSBcImRlbGV0ZVwiICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMgPT09IHZvaWQgMCB8fCAoY2FuZGlkYXRlLm9wdGlvbnMucmVjdXJzaXZlID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5yZWN1cnNpdmUpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmTm90RXhpc3RzKSkpICYmIChjYW5kaWRhdGUuYW5ub3RhdGlvbklkID09PSB2b2lkIDAgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICB9XG4gIERlbGV0ZUZpbGUyLmlzID0gaXM7XG59KShEZWxldGVGaWxlIHx8IChEZWxldGVGaWxlID0ge30pKTtcbnZhciBXb3Jrc3BhY2VFZGl0O1xuKGZ1bmN0aW9uKFdvcmtzcGFjZUVkaXQyKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgJiYgKGNhbmRpZGF0ZS5jaGFuZ2VzICE9PSB2b2lkIDAgfHwgY2FuZGlkYXRlLmRvY3VtZW50Q2hhbmdlcyAhPT0gdm9pZCAwKSAmJiAoY2FuZGlkYXRlLmRvY3VtZW50Q2hhbmdlcyA9PT0gdm9pZCAwIHx8IGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMuZXZlcnkoZnVuY3Rpb24oY2hhbmdlKSB7XG4gICAgICBpZiAoSXMuc3RyaW5nKGNoYW5nZS5raW5kKSkge1xuICAgICAgICByZXR1cm4gQ3JlYXRlRmlsZS5pcyhjaGFuZ2UpIHx8IFJlbmFtZUZpbGUuaXMoY2hhbmdlKSB8fCBEZWxldGVGaWxlLmlzKGNoYW5nZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVGV4dERvY3VtZW50RWRpdC5pcyhjaGFuZ2UpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfVxuICBXb3Jrc3BhY2VFZGl0Mi5pcyA9IGlzO1xufSkoV29ya3NwYWNlRWRpdCB8fCAoV29ya3NwYWNlRWRpdCA9IHt9KSk7XG52YXIgVGV4dEVkaXRDaGFuZ2VJbXBsID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIFRleHRFZGl0Q2hhbmdlSW1wbDIoZWRpdHMsIGNoYW5nZUFubm90YXRpb25zKSB7XG4gICAgdGhpcy5lZGl0cyA9IGVkaXRzO1xuICAgIHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMgPSBjaGFuZ2VBbm5vdGF0aW9ucztcbiAgfVxuICBUZXh0RWRpdENoYW5nZUltcGwyLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihwb3NpdGlvbiwgbmV3VGV4dCwgYW5ub3RhdGlvbikge1xuICAgIHZhciBlZGl0O1xuICAgIHZhciBpZDtcbiAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlZGl0ID0gVGV4dEVkaXQuaW5zZXJ0KHBvc2l0aW9uLCBuZXdUZXh0KTtcbiAgICB9IGVsc2UgaWYgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGFubm90YXRpb24pKSB7XG4gICAgICBpZCA9IGFubm90YXRpb247XG4gICAgICBlZGl0ID0gQW5ub3RhdGVkVGV4dEVkaXQuaW5zZXJ0KHBvc2l0aW9uLCBuZXdUZXh0LCBhbm5vdGF0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyh0aGlzLmNoYW5nZUFubm90YXRpb25zKTtcbiAgICAgIGlkID0gdGhpcy5jaGFuZ2VBbm5vdGF0aW9ucy5tYW5hZ2UoYW5ub3RhdGlvbik7XG4gICAgICBlZGl0ID0gQW5ub3RhdGVkVGV4dEVkaXQuaW5zZXJ0KHBvc2l0aW9uLCBuZXdUZXh0LCBpZCk7XG4gICAgfVxuICAgIHRoaXMuZWRpdHMucHVzaChlZGl0KTtcbiAgICBpZiAoaWQgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgfTtcbiAgVGV4dEVkaXRDaGFuZ2VJbXBsMi5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uKHJhbmdlLCBuZXdUZXh0LCBhbm5vdGF0aW9uKSB7XG4gICAgdmFyIGVkaXQ7XG4gICAgdmFyIGlkO1xuICAgIGlmIChhbm5vdGF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIGVkaXQgPSBUZXh0RWRpdC5yZXBsYWNlKHJhbmdlLCBuZXdUZXh0KTtcbiAgICB9IGVsc2UgaWYgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGFubm90YXRpb24pKSB7XG4gICAgICBpZCA9IGFubm90YXRpb247XG4gICAgICBlZGl0ID0gQW5ub3RhdGVkVGV4dEVkaXQucmVwbGFjZShyYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0Q2hhbmdlQW5ub3RhdGlvbnModGhpcy5jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICBpZCA9IHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMubWFuYWdlKGFubm90YXRpb24pO1xuICAgICAgZWRpdCA9IEFubm90YXRlZFRleHRFZGl0LnJlcGxhY2UocmFuZ2UsIG5ld1RleHQsIGlkKTtcbiAgICB9XG4gICAgdGhpcy5lZGl0cy5wdXNoKGVkaXQpO1xuICAgIGlmIChpZCAhPT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfVxuICB9O1xuICBUZXh0RWRpdENoYW5nZUltcGwyLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbihyYW5nZSwgYW5ub3RhdGlvbikge1xuICAgIHZhciBlZGl0O1xuICAgIHZhciBpZDtcbiAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBlZGl0ID0gVGV4dEVkaXQuZGVsKHJhbmdlKTtcbiAgICB9IGVsc2UgaWYgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGFubm90YXRpb24pKSB7XG4gICAgICBpZCA9IGFubm90YXRpb247XG4gICAgICBlZGl0ID0gQW5ub3RhdGVkVGV4dEVkaXQuZGVsKHJhbmdlLCBhbm5vdGF0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyh0aGlzLmNoYW5nZUFubm90YXRpb25zKTtcbiAgICAgIGlkID0gdGhpcy5jaGFuZ2VBbm5vdGF0aW9ucy5tYW5hZ2UoYW5ub3RhdGlvbik7XG4gICAgICBlZGl0ID0gQW5ub3RhdGVkVGV4dEVkaXQuZGVsKHJhbmdlLCBpZCk7XG4gICAgfVxuICAgIHRoaXMuZWRpdHMucHVzaChlZGl0KTtcbiAgICBpZiAoaWQgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgfTtcbiAgVGV4dEVkaXRDaGFuZ2VJbXBsMi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oZWRpdCkge1xuICAgIHRoaXMuZWRpdHMucHVzaChlZGl0KTtcbiAgfTtcbiAgVGV4dEVkaXRDaGFuZ2VJbXBsMi5wcm90b3R5cGUuYWxsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdHM7XG4gIH07XG4gIFRleHRFZGl0Q2hhbmdlSW1wbDIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5lZGl0cy5zcGxpY2UoMCwgdGhpcy5lZGl0cy5sZW5ndGgpO1xuICB9O1xuICBUZXh0RWRpdENoYW5nZUltcGwyLnByb3RvdHlwZS5hc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRleHQgZWRpdCBjaGFuZ2UgaXMgbm90IGNvbmZpZ3VyZWQgdG8gbWFuYWdlIGNoYW5nZSBhbm5vdGF0aW9ucy5cIik7XG4gICAgfVxuICB9O1xuICByZXR1cm4gVGV4dEVkaXRDaGFuZ2VJbXBsMjtcbn0oKTtcbnZhciBDaGFuZ2VBbm5vdGF0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBDaGFuZ2VBbm5vdGF0aW9uczIoYW5ub3RhdGlvbnMpIHtcbiAgICB0aGlzLl9hbm5vdGF0aW9ucyA9IGFubm90YXRpb25zID09PSB2b2lkIDAgPyAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IGFubm90YXRpb25zO1xuICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xuICAgIHRoaXMuX3NpemUgPSAwO1xuICB9XG4gIENoYW5nZUFubm90YXRpb25zMi5wcm90b3R5cGUuYWxsID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Fubm90YXRpb25zO1xuICB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2hhbmdlQW5ub3RhdGlvbnMyLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIENoYW5nZUFubm90YXRpb25zMi5wcm90b3R5cGUubWFuYWdlID0gZnVuY3Rpb24oaWRPckFubm90YXRpb24sIGFubm90YXRpb24pIHtcbiAgICB2YXIgaWQ7XG4gICAgaWYgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGlkT3JBbm5vdGF0aW9uKSkge1xuICAgICAgaWQgPSBpZE9yQW5ub3RhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWQgPSB0aGlzLm5leHRJZCgpO1xuICAgICAgYW5ub3RhdGlvbiA9IGlkT3JBbm5vdGF0aW9uO1xuICAgIH1cbiAgICBpZiAodGhpcy5fYW5ub3RhdGlvbnNbaWRdICE9PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIklkIFwiICsgaWQgKyBcIiBpcyBhbHJlYWR5IGluIHVzZS5cIik7XG4gICAgfVxuICAgIGlmIChhbm5vdGF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGFubm90YXRpb24gcHJvdmlkZWQgZm9yIGlkIFwiICsgaWQpO1xuICAgIH1cbiAgICB0aGlzLl9hbm5vdGF0aW9uc1tpZF0gPSBhbm5vdGF0aW9uO1xuICAgIHRoaXMuX3NpemUrKztcbiAgICByZXR1cm4gaWQ7XG4gIH07XG4gIENoYW5nZUFubm90YXRpb25zMi5wcm90b3R5cGUubmV4dElkID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY291bnRlcisrO1xuICAgIHJldHVybiB0aGlzLl9jb3VudGVyLnRvU3RyaW5nKCk7XG4gIH07XG4gIHJldHVybiBDaGFuZ2VBbm5vdGF0aW9uczI7XG59KCk7XG52YXIgV29ya3NwYWNlQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIFdvcmtzcGFjZUNoYW5nZTIod29ya3NwYWNlRWRpdCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5fdGV4dEVkaXRDaGFuZ2VzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgaWYgKHdvcmtzcGFjZUVkaXQgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdCA9IHdvcmtzcGFjZUVkaXQ7XG4gICAgICBpZiAod29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMgPSBuZXcgQ2hhbmdlQW5ub3RhdGlvbnMod29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICAgIHdvcmtzcGFjZUVkaXQuY2hhbmdlQW5ub3RhdGlvbnMgPSB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucy5hbGwoKTtcbiAgICAgICAgd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMuZm9yRWFjaChmdW5jdGlvbihjaGFuZ2UpIHtcbiAgICAgICAgICBpZiAoVGV4dERvY3VtZW50RWRpdC5pcyhjaGFuZ2UpKSB7XG4gICAgICAgICAgICB2YXIgdGV4dEVkaXRDaGFuZ2UgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKGNoYW5nZS5lZGl0cywgX3RoaXMuX2NoYW5nZUFubm90YXRpb25zKTtcbiAgICAgICAgICAgIF90aGlzLl90ZXh0RWRpdENoYW5nZXNbY2hhbmdlLnRleHREb2N1bWVudC51cmldID0gdGV4dEVkaXRDaGFuZ2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAod29ya3NwYWNlRWRpdC5jaGFuZ2VzKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHdvcmtzcGFjZUVkaXQuY2hhbmdlcykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICB2YXIgdGV4dEVkaXRDaGFuZ2UgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKHdvcmtzcGFjZUVkaXQuY2hhbmdlc1trZXldKTtcbiAgICAgICAgICBfdGhpcy5fdGV4dEVkaXRDaGFuZ2VzW2tleV0gPSB0ZXh0RWRpdENoYW5nZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQgPSB7fTtcbiAgICB9XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdvcmtzcGFjZUNoYW5nZTIucHJvdG90eXBlLCBcImVkaXRcIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmluaXREb2N1bWVudENoYW5nZXMoKTtcbiAgICAgIGlmICh0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucyAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGlmICh0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyA9IHZvaWQgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZUFubm90YXRpb25zID0gdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMuYWxsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl93b3Jrc3BhY2VFZGl0O1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBXb3Jrc3BhY2VDaGFuZ2UyLnByb3RvdHlwZS5nZXRUZXh0RWRpdENoYW5nZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIuaXMoa2V5KSkge1xuICAgICAgdGhpcy5pbml0RG9jdW1lbnRDaGFuZ2VzKCk7XG4gICAgICBpZiAodGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMgPT09IHZvaWQgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXb3Jrc3BhY2UgZWRpdCBpcyBub3QgY29uZmlndXJlZCBmb3IgZG9jdW1lbnQgY2hhbmdlcy5cIik7XG4gICAgICB9XG4gICAgICB2YXIgdGV4dERvY3VtZW50ID0geyB1cmk6IGtleS51cmksIHZlcnNpb246IGtleS52ZXJzaW9uIH07XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fdGV4dEVkaXRDaGFuZ2VzW3RleHREb2N1bWVudC51cmldO1xuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgdmFyIGVkaXRzID0gW107XG4gICAgICAgIHZhciB0ZXh0RG9jdW1lbnRFZGl0ID0ge1xuICAgICAgICAgIHRleHREb2N1bWVudCxcbiAgICAgICAgICBlZGl0c1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5wdXNoKHRleHREb2N1bWVudEVkaXQpO1xuICAgICAgICByZXN1bHQgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKGVkaXRzLCB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICAgIHRoaXMuX3RleHRFZGl0Q2hhbmdlc1t0ZXh0RG9jdW1lbnQudXJpXSA9IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5pdENoYW5nZXMoKTtcbiAgICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXMgPT09IHZvaWQgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXb3Jrc3BhY2UgZWRpdCBpcyBub3QgY29uZmlndXJlZCBmb3Igbm9ybWFsIHRleHQgZWRpdCBjaGFuZ2VzLlwiKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLl90ZXh0RWRpdENoYW5nZXNba2V5XTtcbiAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHZhciBlZGl0cyA9IFtdO1xuICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXNba2V5XSA9IGVkaXRzO1xuICAgICAgICByZXN1bHQgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKGVkaXRzKTtcbiAgICAgICAgdGhpcy5fdGV4dEVkaXRDaGFuZ2VzW2tleV0gPSByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfTtcbiAgV29ya3NwYWNlQ2hhbmdlMi5wcm90b3R5cGUuaW5pdERvY3VtZW50Q2hhbmdlcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9PT0gdm9pZCAwICYmIHRoaXMuX3dvcmtzcGFjZUVkaXQuY2hhbmdlcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucyA9IG5ldyBDaGFuZ2VBbm5vdGF0aW9ucygpO1xuICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMgPSBbXTtcbiAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuY2hhbmdlQW5ub3RhdGlvbnMgPSB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucy5hbGwoKTtcbiAgICB9XG4gIH07XG4gIFdvcmtzcGFjZUNoYW5nZTIucHJvdG90eXBlLmluaXRDaGFuZ2VzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzID09PSB2b2lkIDAgJiYgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzID09PSB2b2lkIDApIHtcbiAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuY2hhbmdlcyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgfTtcbiAgV29ya3NwYWNlQ2hhbmdlMi5wcm90b3R5cGUuY3JlYXRlRmlsZSA9IGZ1bmN0aW9uKHVyaSwgb3B0aW9uc09yQW5ub3RhdGlvbiwgb3B0aW9ucykge1xuICAgIHRoaXMuaW5pdERvY3VtZW50Q2hhbmdlcygpO1xuICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXb3Jrc3BhY2UgZWRpdCBpcyBub3QgY29uZmlndXJlZCBmb3IgZG9jdW1lbnQgY2hhbmdlcy5cIik7XG4gICAgfVxuICAgIHZhciBhbm5vdGF0aW9uO1xuICAgIGlmIChDaGFuZ2VBbm5vdGF0aW9uLmlzKG9wdGlvbnNPckFubm90YXRpb24pIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKG9wdGlvbnNPckFubm90YXRpb24pKSB7XG4gICAgICBhbm5vdGF0aW9uID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnNPckFubm90YXRpb247XG4gICAgfVxuICAgIHZhciBvcGVyYXRpb247XG4gICAgdmFyIGlkO1xuICAgIGlmIChhbm5vdGF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIG9wZXJhdGlvbiA9IENyZWF0ZUZpbGUuY3JlYXRlKHVyaSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlkID0gQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoYW5ub3RhdGlvbikgPyBhbm5vdGF0aW9uIDogdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMubWFuYWdlKGFubm90YXRpb24pO1xuICAgICAgb3BlcmF0aW9uID0gQ3JlYXRlRmlsZS5jcmVhdGUodXJpLCBvcHRpb25zLCBpZCk7XG4gICAgfVxuICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLnB1c2gob3BlcmF0aW9uKTtcbiAgICBpZiAoaWQgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgfTtcbiAgV29ya3NwYWNlQ2hhbmdlMi5wcm90b3R5cGUucmVuYW1lRmlsZSA9IGZ1bmN0aW9uKG9sZFVyaSwgbmV3VXJpLCBvcHRpb25zT3JBbm5vdGF0aW9uLCBvcHRpb25zKSB7XG4gICAgdGhpcy5pbml0RG9jdW1lbnRDaGFuZ2VzKCk7XG4gICAgaWYgKHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldvcmtzcGFjZSBlZGl0IGlzIG5vdCBjb25maWd1cmVkIGZvciBkb2N1bWVudCBjaGFuZ2VzLlwiKTtcbiAgICB9XG4gICAgdmFyIGFubm90YXRpb247XG4gICAgaWYgKENoYW5nZUFubm90YXRpb24uaXMob3B0aW9uc09yQW5ub3RhdGlvbikgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMob3B0aW9uc09yQW5ub3RhdGlvbikpIHtcbiAgICAgIGFubm90YXRpb24gPSBvcHRpb25zT3JBbm5vdGF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICB9XG4gICAgdmFyIG9wZXJhdGlvbjtcbiAgICB2YXIgaWQ7XG4gICAgaWYgKGFubm90YXRpb24gPT09IHZvaWQgMCkge1xuICAgICAgb3BlcmF0aW9uID0gUmVuYW1lRmlsZS5jcmVhdGUob2xkVXJpLCBuZXdVcmksIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCA9IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGFubm90YXRpb24pID8gYW5ub3RhdGlvbiA6IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgIG9wZXJhdGlvbiA9IFJlbmFtZUZpbGUuY3JlYXRlKG9sZFVyaSwgbmV3VXJpLCBvcHRpb25zLCBpZCk7XG4gICAgfVxuICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLnB1c2gob3BlcmF0aW9uKTtcbiAgICBpZiAoaWQgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgfTtcbiAgV29ya3NwYWNlQ2hhbmdlMi5wcm90b3R5cGUuZGVsZXRlRmlsZSA9IGZ1bmN0aW9uKHVyaSwgb3B0aW9uc09yQW5ub3RhdGlvbiwgb3B0aW9ucykge1xuICAgIHRoaXMuaW5pdERvY3VtZW50Q2hhbmdlcygpO1xuICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXb3Jrc3BhY2UgZWRpdCBpcyBub3QgY29uZmlndXJlZCBmb3IgZG9jdW1lbnQgY2hhbmdlcy5cIik7XG4gICAgfVxuICAgIHZhciBhbm5vdGF0aW9uO1xuICAgIGlmIChDaGFuZ2VBbm5vdGF0aW9uLmlzKG9wdGlvbnNPckFubm90YXRpb24pIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKG9wdGlvbnNPckFubm90YXRpb24pKSB7XG4gICAgICBhbm5vdGF0aW9uID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnNPckFubm90YXRpb247XG4gICAgfVxuICAgIHZhciBvcGVyYXRpb247XG4gICAgdmFyIGlkO1xuICAgIGlmIChhbm5vdGF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIG9wZXJhdGlvbiA9IERlbGV0ZUZpbGUuY3JlYXRlKHVyaSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlkID0gQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoYW5ub3RhdGlvbikgPyBhbm5vdGF0aW9uIDogdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMubWFuYWdlKGFubm90YXRpb24pO1xuICAgICAgb3BlcmF0aW9uID0gRGVsZXRlRmlsZS5jcmVhdGUodXJpLCBvcHRpb25zLCBpZCk7XG4gICAgfVxuICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLnB1c2gob3BlcmF0aW9uKTtcbiAgICBpZiAoaWQgIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIFdvcmtzcGFjZUNoYW5nZTI7XG59KCk7XG52YXIgVGV4dERvY3VtZW50SWRlbnRpZmllcjtcbihmdW5jdGlvbihUZXh0RG9jdW1lbnRJZGVudGlmaWVyMikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpKSB7XG4gICAgcmV0dXJuIHsgdXJpIH07XG4gIH1cbiAgVGV4dERvY3VtZW50SWRlbnRpZmllcjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKTtcbiAgfVxuICBUZXh0RG9jdW1lbnRJZGVudGlmaWVyMi5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50SWRlbnRpZmllciB8fCAoVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG52YXIgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjtcbihmdW5jdGlvbihWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyMikge1xuICBmdW5jdGlvbiBjcmVhdGUodXJpLCB2ZXJzaW9uKSB7XG4gICAgcmV0dXJuIHsgdXJpLCB2ZXJzaW9uIH07XG4gIH1cbiAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5pbnRlZ2VyKGNhbmRpZGF0ZS52ZXJzaW9uKTtcbiAgfVxuICBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyMi5pcyA9IGlzO1xufSkoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciB8fCAoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG52YXIgT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyO1xuKGZ1bmN0aW9uKE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgdmVyc2lvbikge1xuICAgIHJldHVybiB7IHVyaSwgdmVyc2lvbiB9O1xuICB9XG4gIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoY2FuZGlkYXRlLnZlcnNpb24gPT09IG51bGwgfHwgSXMuaW50ZWdlcihjYW5kaWRhdGUudmVyc2lvbikpO1xuICB9XG4gIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjIuaXMgPSBpcztcbn0pKE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciB8fCAoT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyID0ge30pKTtcbnZhciBUZXh0RG9jdW1lbnRJdGVtO1xuKGZ1bmN0aW9uKFRleHREb2N1bWVudEl0ZW0yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIHRleHQpIHtcbiAgICByZXR1cm4geyB1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIHRleHQgfTtcbiAgfVxuICBUZXh0RG9jdW1lbnRJdGVtMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2VJZCkgJiYgSXMuaW50ZWdlcihjYW5kaWRhdGUudmVyc2lvbikgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50ZXh0KTtcbiAgfVxuICBUZXh0RG9jdW1lbnRJdGVtMi5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50SXRlbSB8fCAoVGV4dERvY3VtZW50SXRlbSA9IHt9KSk7XG52YXIgTWFya3VwS2luZDtcbihmdW5jdGlvbihNYXJrdXBLaW5kMikge1xuICBNYXJrdXBLaW5kMi5QbGFpblRleHQgPSBcInBsYWludGV4dFwiO1xuICBNYXJrdXBLaW5kMi5NYXJrZG93biA9IFwibWFya2Rvd25cIjtcbn0pKE1hcmt1cEtpbmQgfHwgKE1hcmt1cEtpbmQgPSB7fSkpO1xuKGZ1bmN0aW9uKE1hcmt1cEtpbmQyKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgPT09IE1hcmt1cEtpbmQyLlBsYWluVGV4dCB8fCBjYW5kaWRhdGUgPT09IE1hcmt1cEtpbmQyLk1hcmtkb3duO1xuICB9XG4gIE1hcmt1cEtpbmQyLmlzID0gaXM7XG59KShNYXJrdXBLaW5kIHx8IChNYXJrdXBLaW5kID0ge30pKTtcbnZhciBNYXJrdXBDb250ZW50O1xuKGZ1bmN0aW9uKE1hcmt1cENvbnRlbnQyKSB7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKHZhbHVlKSAmJiBNYXJrdXBLaW5kLmlzKGNhbmRpZGF0ZS5raW5kKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnZhbHVlKTtcbiAgfVxuICBNYXJrdXBDb250ZW50Mi5pcyA9IGlzO1xufSkoTWFya3VwQ29udGVudCB8fCAoTWFya3VwQ29udGVudCA9IHt9KSk7XG52YXIgQ29tcGxldGlvbkl0ZW1LaW5kO1xuKGZ1bmN0aW9uKENvbXBsZXRpb25JdGVtS2luZDIpIHtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5UZXh0ID0gMTtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5NZXRob2QgPSAyO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkZ1bmN0aW9uID0gMztcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5Db25zdHJ1Y3RvciA9IDQ7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuRmllbGQgPSA1O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlZhcmlhYmxlID0gNjtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5DbGFzcyA9IDc7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuSW50ZXJmYWNlID0gODtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5Nb2R1bGUgPSA5O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlByb3BlcnR5ID0gMTA7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuVW5pdCA9IDExO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlZhbHVlID0gMTI7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuRW51bSA9IDEzO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLktleXdvcmQgPSAxNDtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5TbmlwcGV0ID0gMTU7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuQ29sb3IgPSAxNjtcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5GaWxlID0gMTc7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuUmVmZXJlbmNlID0gMTg7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuRm9sZGVyID0gMTk7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuRW51bU1lbWJlciA9IDIwO1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLkNvbnN0YW50ID0gMjE7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuU3RydWN0ID0gMjI7XG4gIENvbXBsZXRpb25JdGVtS2luZDIuRXZlbnQgPSAyMztcbiAgQ29tcGxldGlvbkl0ZW1LaW5kMi5PcGVyYXRvciA9IDI0O1xuICBDb21wbGV0aW9uSXRlbUtpbmQyLlR5cGVQYXJhbWV0ZXIgPSAyNTtcbn0pKENvbXBsZXRpb25JdGVtS2luZCB8fCAoQ29tcGxldGlvbkl0ZW1LaW5kID0ge30pKTtcbnZhciBJbnNlcnRUZXh0Rm9ybWF0O1xuKGZ1bmN0aW9uKEluc2VydFRleHRGb3JtYXQyKSB7XG4gIEluc2VydFRleHRGb3JtYXQyLlBsYWluVGV4dCA9IDE7XG4gIEluc2VydFRleHRGb3JtYXQyLlNuaXBwZXQgPSAyO1xufSkoSW5zZXJ0VGV4dEZvcm1hdCB8fCAoSW5zZXJ0VGV4dEZvcm1hdCA9IHt9KSk7XG52YXIgQ29tcGxldGlvbkl0ZW1UYWc7XG4oZnVuY3Rpb24oQ29tcGxldGlvbkl0ZW1UYWcyKSB7XG4gIENvbXBsZXRpb25JdGVtVGFnMi5EZXByZWNhdGVkID0gMTtcbn0pKENvbXBsZXRpb25JdGVtVGFnIHx8IChDb21wbGV0aW9uSXRlbVRhZyA9IHt9KSk7XG52YXIgSW5zZXJ0UmVwbGFjZUVkaXQ7XG4oZnVuY3Rpb24oSW5zZXJ0UmVwbGFjZUVkaXQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShuZXdUZXh0LCBpbnNlcnQsIHJlcGxhY2UpIHtcbiAgICByZXR1cm4geyBuZXdUZXh0LCBpbnNlcnQsIHJlcGxhY2UgfTtcbiAgfVxuICBJbnNlcnRSZXBsYWNlRWRpdDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VGV4dCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLmluc2VydCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJlcGxhY2UpO1xuICB9XG4gIEluc2VydFJlcGxhY2VFZGl0Mi5pcyA9IGlzO1xufSkoSW5zZXJ0UmVwbGFjZUVkaXQgfHwgKEluc2VydFJlcGxhY2VFZGl0ID0ge30pKTtcbnZhciBJbnNlcnRUZXh0TW9kZTtcbihmdW5jdGlvbihJbnNlcnRUZXh0TW9kZTIpIHtcbiAgSW5zZXJ0VGV4dE1vZGUyLmFzSXMgPSAxO1xuICBJbnNlcnRUZXh0TW9kZTIuYWRqdXN0SW5kZW50YXRpb24gPSAyO1xufSkoSW5zZXJ0VGV4dE1vZGUgfHwgKEluc2VydFRleHRNb2RlID0ge30pKTtcbnZhciBDb21wbGV0aW9uSXRlbTtcbihmdW5jdGlvbihDb21wbGV0aW9uSXRlbTIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsKSB7XG4gICAgcmV0dXJuIHsgbGFiZWwgfTtcbiAgfVxuICBDb21wbGV0aW9uSXRlbTIuY3JlYXRlID0gY3JlYXRlO1xufSkoQ29tcGxldGlvbkl0ZW0gfHwgKENvbXBsZXRpb25JdGVtID0ge30pKTtcbnZhciBDb21wbGV0aW9uTGlzdDtcbihmdW5jdGlvbihDb21wbGV0aW9uTGlzdDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGl0ZW1zLCBpc0luY29tcGxldGUpIHtcbiAgICByZXR1cm4geyBpdGVtczogaXRlbXMgPyBpdGVtcyA6IFtdLCBpc0luY29tcGxldGU6ICEhaXNJbmNvbXBsZXRlIH07XG4gIH1cbiAgQ29tcGxldGlvbkxpc3QyLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKENvbXBsZXRpb25MaXN0IHx8IChDb21wbGV0aW9uTGlzdCA9IHt9KSk7XG52YXIgTWFya2VkU3RyaW5nO1xuKGZ1bmN0aW9uKE1hcmtlZFN0cmluZzIpIHtcbiAgZnVuY3Rpb24gZnJvbVBsYWluVGV4dChwbGFpblRleHQpIHtcbiAgICByZXR1cm4gcGxhaW5UZXh0LnJlcGxhY2UoL1tcXFxcYCpfe31bXFxdKCkjK1xcLS4hXS9nLCBcIlxcXFwkJlwiKTtcbiAgfVxuICBNYXJrZWRTdHJpbmcyLmZyb21QbGFpblRleHQgPSBmcm9tUGxhaW5UZXh0O1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuc3RyaW5nKGNhbmRpZGF0ZSkgfHwgSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudmFsdWUpO1xuICB9XG4gIE1hcmtlZFN0cmluZzIuaXMgPSBpcztcbn0pKE1hcmtlZFN0cmluZyB8fCAoTWFya2VkU3RyaW5nID0ge30pKTtcbnZhciBIb3ZlcjtcbihmdW5jdGlvbihIb3ZlcjIpIHtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuICEhY2FuZGlkYXRlICYmIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiAoTWFya3VwQ29udGVudC5pcyhjYW5kaWRhdGUuY29udGVudHMpIHx8IE1hcmtlZFN0cmluZy5pcyhjYW5kaWRhdGUuY29udGVudHMpIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmNvbnRlbnRzLCBNYXJrZWRTdHJpbmcuaXMpKSAmJiAodmFsdWUucmFuZ2UgPT09IHZvaWQgMCB8fCBSYW5nZS5pcyh2YWx1ZS5yYW5nZSkpO1xuICB9XG4gIEhvdmVyMi5pcyA9IGlzO1xufSkoSG92ZXIgfHwgKEhvdmVyID0ge30pKTtcbnZhciBQYXJhbWV0ZXJJbmZvcm1hdGlvbjtcbihmdW5jdGlvbihQYXJhbWV0ZXJJbmZvcm1hdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCBkb2N1bWVudGF0aW9uKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50YXRpb24gPyB7IGxhYmVsLCBkb2N1bWVudGF0aW9uIH0gOiB7IGxhYmVsIH07XG4gIH1cbiAgUGFyYW1ldGVySW5mb3JtYXRpb24yLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFBhcmFtZXRlckluZm9ybWF0aW9uIHx8IChQYXJhbWV0ZXJJbmZvcm1hdGlvbiA9IHt9KSk7XG52YXIgU2lnbmF0dXJlSW5mb3JtYXRpb247XG4oZnVuY3Rpb24oU2lnbmF0dXJlSW5mb3JtYXRpb24yKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgZG9jdW1lbnRhdGlvbikge1xuICAgIHZhciBwYXJhbWV0ZXJzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHBhcmFtZXRlcnNbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSB7IGxhYmVsIH07XG4gICAgaWYgKElzLmRlZmluZWQoZG9jdW1lbnRhdGlvbikpIHtcbiAgICAgIHJlc3VsdC5kb2N1bWVudGF0aW9uID0gZG9jdW1lbnRhdGlvbjtcbiAgICB9XG4gICAgaWYgKElzLmRlZmluZWQocGFyYW1ldGVycykpIHtcbiAgICAgIHJlc3VsdC5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhcmFtZXRlcnMgPSBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBTaWduYXR1cmVJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xufSkoU2lnbmF0dXJlSW5mb3JtYXRpb24gfHwgKFNpZ25hdHVyZUluZm9ybWF0aW9uID0ge30pKTtcbnZhciBEb2N1bWVudEhpZ2hsaWdodEtpbmQ7XG4oZnVuY3Rpb24oRG9jdW1lbnRIaWdobGlnaHRLaW5kMikge1xuICBEb2N1bWVudEhpZ2hsaWdodEtpbmQyLlRleHQgPSAxO1xuICBEb2N1bWVudEhpZ2hsaWdodEtpbmQyLlJlYWQgPSAyO1xuICBEb2N1bWVudEhpZ2hsaWdodEtpbmQyLldyaXRlID0gMztcbn0pKERvY3VtZW50SGlnaGxpZ2h0S2luZCB8fCAoRG9jdW1lbnRIaWdobGlnaHRLaW5kID0ge30pKTtcbnZhciBEb2N1bWVudEhpZ2hsaWdodDtcbihmdW5jdGlvbihEb2N1bWVudEhpZ2hsaWdodDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBraW5kKSB7XG4gICAgdmFyIHJlc3VsdCA9IHsgcmFuZ2UgfTtcbiAgICBpZiAoSXMubnVtYmVyKGtpbmQpKSB7XG4gICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgRG9jdW1lbnRIaWdobGlnaHQyLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKERvY3VtZW50SGlnaGxpZ2h0IHx8IChEb2N1bWVudEhpZ2hsaWdodCA9IHt9KSk7XG52YXIgU3ltYm9sS2luZDtcbihmdW5jdGlvbihTeW1ib2xLaW5kMikge1xuICBTeW1ib2xLaW5kMi5GaWxlID0gMTtcbiAgU3ltYm9sS2luZDIuTW9kdWxlID0gMjtcbiAgU3ltYm9sS2luZDIuTmFtZXNwYWNlID0gMztcbiAgU3ltYm9sS2luZDIuUGFja2FnZSA9IDQ7XG4gIFN5bWJvbEtpbmQyLkNsYXNzID0gNTtcbiAgU3ltYm9sS2luZDIuTWV0aG9kID0gNjtcbiAgU3ltYm9sS2luZDIuUHJvcGVydHkgPSA3O1xuICBTeW1ib2xLaW5kMi5GaWVsZCA9IDg7XG4gIFN5bWJvbEtpbmQyLkNvbnN0cnVjdG9yID0gOTtcbiAgU3ltYm9sS2luZDIuRW51bSA9IDEwO1xuICBTeW1ib2xLaW5kMi5JbnRlcmZhY2UgPSAxMTtcbiAgU3ltYm9sS2luZDIuRnVuY3Rpb24gPSAxMjtcbiAgU3ltYm9sS2luZDIuVmFyaWFibGUgPSAxMztcbiAgU3ltYm9sS2luZDIuQ29uc3RhbnQgPSAxNDtcbiAgU3ltYm9sS2luZDIuU3RyaW5nID0gMTU7XG4gIFN5bWJvbEtpbmQyLk51bWJlciA9IDE2O1xuICBTeW1ib2xLaW5kMi5Cb29sZWFuID0gMTc7XG4gIFN5bWJvbEtpbmQyLkFycmF5ID0gMTg7XG4gIFN5bWJvbEtpbmQyLk9iamVjdCA9IDE5O1xuICBTeW1ib2xLaW5kMi5LZXkgPSAyMDtcbiAgU3ltYm9sS2luZDIuTnVsbCA9IDIxO1xuICBTeW1ib2xLaW5kMi5FbnVtTWVtYmVyID0gMjI7XG4gIFN5bWJvbEtpbmQyLlN0cnVjdCA9IDIzO1xuICBTeW1ib2xLaW5kMi5FdmVudCA9IDI0O1xuICBTeW1ib2xLaW5kMi5PcGVyYXRvciA9IDI1O1xuICBTeW1ib2xLaW5kMi5UeXBlUGFyYW1ldGVyID0gMjY7XG59KShTeW1ib2xLaW5kIHx8IChTeW1ib2xLaW5kID0ge30pKTtcbnZhciBTeW1ib2xUYWc7XG4oZnVuY3Rpb24oU3ltYm9sVGFnMikge1xuICBTeW1ib2xUYWcyLkRlcHJlY2F0ZWQgPSAxO1xufSkoU3ltYm9sVGFnIHx8IChTeW1ib2xUYWcgPSB7fSkpO1xudmFyIFN5bWJvbEluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uKFN5bWJvbEluZm9ybWF0aW9uMikge1xuICBmdW5jdGlvbiBjcmVhdGUobmFtZSwga2luZCwgcmFuZ2UsIHVyaSwgY29udGFpbmVyTmFtZSkge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBuYW1lLFxuICAgICAga2luZCxcbiAgICAgIGxvY2F0aW9uOiB7IHVyaSwgcmFuZ2UgfVxuICAgIH07XG4gICAgaWYgKGNvbnRhaW5lck5hbWUpIHtcbiAgICAgIHJlc3VsdC5jb250YWluZXJOYW1lID0gY29udGFpbmVyTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBTeW1ib2xJbmZvcm1hdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xufSkoU3ltYm9sSW5mb3JtYXRpb24gfHwgKFN5bWJvbEluZm9ybWF0aW9uID0ge30pKTtcbnZhciBEb2N1bWVudFN5bWJvbDtcbihmdW5jdGlvbihEb2N1bWVudFN5bWJvbDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKG5hbWUsIGRldGFpbCwga2luZCwgcmFuZ2UsIHNlbGVjdGlvblJhbmdlLCBjaGlsZHJlbikge1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBuYW1lLFxuICAgICAgZGV0YWlsLFxuICAgICAga2luZCxcbiAgICAgIHJhbmdlLFxuICAgICAgc2VsZWN0aW9uUmFuZ2VcbiAgICB9O1xuICAgIGlmIChjaGlsZHJlbiAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBEb2N1bWVudFN5bWJvbDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmFtZSkgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS5raW5kKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5zZWxlY3Rpb25SYW5nZSkgJiYgKGNhbmRpZGF0ZS5kZXRhaWwgPT09IHZvaWQgMCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmRldGFpbCkpICYmIChjYW5kaWRhdGUuZGVwcmVjYXRlZCA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLmRlcHJlY2F0ZWQpKSAmJiAoY2FuZGlkYXRlLmNoaWxkcmVuID09PSB2b2lkIDAgfHwgQXJyYXkuaXNBcnJheShjYW5kaWRhdGUuY2hpbGRyZW4pKSAmJiAoY2FuZGlkYXRlLnRhZ3MgPT09IHZvaWQgMCB8fCBBcnJheS5pc0FycmF5KGNhbmRpZGF0ZS50YWdzKSk7XG4gIH1cbiAgRG9jdW1lbnRTeW1ib2wyLmlzID0gaXM7XG59KShEb2N1bWVudFN5bWJvbCB8fCAoRG9jdW1lbnRTeW1ib2wgPSB7fSkpO1xudmFyIENvZGVBY3Rpb25LaW5kO1xuKGZ1bmN0aW9uKENvZGVBY3Rpb25LaW5kMikge1xuICBDb2RlQWN0aW9uS2luZDIuRW1wdHkgPSBcIlwiO1xuICBDb2RlQWN0aW9uS2luZDIuUXVpY2tGaXggPSBcInF1aWNrZml4XCI7XG4gIENvZGVBY3Rpb25LaW5kMi5SZWZhY3RvciA9IFwicmVmYWN0b3JcIjtcbiAgQ29kZUFjdGlvbktpbmQyLlJlZmFjdG9yRXh0cmFjdCA9IFwicmVmYWN0b3IuZXh0cmFjdFwiO1xuICBDb2RlQWN0aW9uS2luZDIuUmVmYWN0b3JJbmxpbmUgPSBcInJlZmFjdG9yLmlubGluZVwiO1xuICBDb2RlQWN0aW9uS2luZDIuUmVmYWN0b3JSZXdyaXRlID0gXCJyZWZhY3Rvci5yZXdyaXRlXCI7XG4gIENvZGVBY3Rpb25LaW5kMi5Tb3VyY2UgPSBcInNvdXJjZVwiO1xuICBDb2RlQWN0aW9uS2luZDIuU291cmNlT3JnYW5pemVJbXBvcnRzID0gXCJzb3VyY2Uub3JnYW5pemVJbXBvcnRzXCI7XG4gIENvZGVBY3Rpb25LaW5kMi5Tb3VyY2VGaXhBbGwgPSBcInNvdXJjZS5maXhBbGxcIjtcbn0pKENvZGVBY3Rpb25LaW5kIHx8IChDb2RlQWN0aW9uS2luZCA9IHt9KSk7XG52YXIgQ29kZUFjdGlvbkNvbnRleHQ7XG4oZnVuY3Rpb24oQ29kZUFjdGlvbkNvbnRleHQyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShkaWFnbm9zdGljcywgb25seSkge1xuICAgIHZhciByZXN1bHQgPSB7IGRpYWdub3N0aWNzIH07XG4gICAgaWYgKG9ubHkgIT09IHZvaWQgMCAmJiBvbmx5ICE9PSBudWxsKSB7XG4gICAgICByZXN1bHQub25seSA9IG9ubHk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgQ29kZUFjdGlvbkNvbnRleHQyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5kaWFnbm9zdGljcywgRGlhZ25vc3RpYy5pcykgJiYgKGNhbmRpZGF0ZS5vbmx5ID09PSB2b2lkIDAgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUub25seSwgSXMuc3RyaW5nKSk7XG4gIH1cbiAgQ29kZUFjdGlvbkNvbnRleHQyLmlzID0gaXM7XG59KShDb2RlQWN0aW9uQ29udGV4dCB8fCAoQ29kZUFjdGlvbkNvbnRleHQgPSB7fSkpO1xudmFyIENvZGVBY3Rpb247XG4oZnVuY3Rpb24oQ29kZUFjdGlvbjIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHRpdGxlLCBraW5kT3JDb21tYW5kT3JFZGl0LCBraW5kKSB7XG4gICAgdmFyIHJlc3VsdCA9IHsgdGl0bGUgfTtcbiAgICB2YXIgY2hlY2tLaW5kID0gdHJ1ZTtcbiAgICBpZiAodHlwZW9mIGtpbmRPckNvbW1hbmRPckVkaXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNoZWNrS2luZCA9IGZhbHNlO1xuICAgICAgcmVzdWx0LmtpbmQgPSBraW5kT3JDb21tYW5kT3JFZGl0O1xuICAgIH0gZWxzZSBpZiAoQ29tbWFuZC5pcyhraW5kT3JDb21tYW5kT3JFZGl0KSkge1xuICAgICAgcmVzdWx0LmNvbW1hbmQgPSBraW5kT3JDb21tYW5kT3JFZGl0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQuZWRpdCA9IGtpbmRPckNvbW1hbmRPckVkaXQ7XG4gICAgfVxuICAgIGlmIChjaGVja0tpbmQgJiYga2luZCAhPT0gdm9pZCAwKSB7XG4gICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgQ29kZUFjdGlvbjIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGl0bGUpICYmIChjYW5kaWRhdGUuZGlhZ25vc3RpY3MgPT09IHZvaWQgMCB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5kaWFnbm9zdGljcywgRGlhZ25vc3RpYy5pcykpICYmIChjYW5kaWRhdGUua2luZCA9PT0gdm9pZCAwIHx8IElzLnN0cmluZyhjYW5kaWRhdGUua2luZCkpICYmIChjYW5kaWRhdGUuZWRpdCAhPT0gdm9pZCAwIHx8IGNhbmRpZGF0ZS5jb21tYW5kICE9PSB2b2lkIDApICYmIChjYW5kaWRhdGUuY29tbWFuZCA9PT0gdm9pZCAwIHx8IENvbW1hbmQuaXMoY2FuZGlkYXRlLmNvbW1hbmQpKSAmJiAoY2FuZGlkYXRlLmlzUHJlZmVycmVkID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUuaXNQcmVmZXJyZWQpKSAmJiAoY2FuZGlkYXRlLmVkaXQgPT09IHZvaWQgMCB8fCBXb3Jrc3BhY2VFZGl0LmlzKGNhbmRpZGF0ZS5lZGl0KSk7XG4gIH1cbiAgQ29kZUFjdGlvbjIuaXMgPSBpcztcbn0pKENvZGVBY3Rpb24gfHwgKENvZGVBY3Rpb24gPSB7fSkpO1xudmFyIENvZGVMZW5zO1xuKGZ1bmN0aW9uKENvZGVMZW5zMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGRhdGEpIHtcbiAgICB2YXIgcmVzdWx0ID0geyByYW5nZSB9O1xuICAgIGlmIChJcy5kZWZpbmVkKGRhdGEpKSB7XG4gICAgICByZXN1bHQuZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgQ29kZUxlbnMyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmNvbW1hbmQpIHx8IENvbW1hbmQuaXMoY2FuZGlkYXRlLmNvbW1hbmQpKTtcbiAgfVxuICBDb2RlTGVuczIuaXMgPSBpcztcbn0pKENvZGVMZW5zIHx8IChDb2RlTGVucyA9IHt9KSk7XG52YXIgRm9ybWF0dGluZ09wdGlvbnM7XG4oZnVuY3Rpb24oRm9ybWF0dGluZ09wdGlvbnMyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZSh0YWJTaXplLCBpbnNlcnRTcGFjZXMpIHtcbiAgICByZXR1cm4geyB0YWJTaXplLCBpbnNlcnRTcGFjZXMgfTtcbiAgfVxuICBGb3JtYXR0aW5nT3B0aW9uczIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS50YWJTaXplKSAmJiBJcy5ib29sZWFuKGNhbmRpZGF0ZS5pbnNlcnRTcGFjZXMpO1xuICB9XG4gIEZvcm1hdHRpbmdPcHRpb25zMi5pcyA9IGlzO1xufSkoRm9ybWF0dGluZ09wdGlvbnMgfHwgKEZvcm1hdHRpbmdPcHRpb25zID0ge30pKTtcbnZhciBEb2N1bWVudExpbms7XG4oZnVuY3Rpb24oRG9jdW1lbnRMaW5rMikge1xuICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHRhcmdldCwgZGF0YSkge1xuICAgIHJldHVybiB7IHJhbmdlLCB0YXJnZXQsIGRhdGEgfTtcbiAgfVxuICBEb2N1bWVudExpbmsyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnRhcmdldCkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS50YXJnZXQpKTtcbiAgfVxuICBEb2N1bWVudExpbmsyLmlzID0gaXM7XG59KShEb2N1bWVudExpbmsgfHwgKERvY3VtZW50TGluayA9IHt9KSk7XG52YXIgU2VsZWN0aW9uUmFuZ2U7XG4oZnVuY3Rpb24oU2VsZWN0aW9uUmFuZ2UyKSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgcGFyZW50KSB7XG4gICAgcmV0dXJuIHsgcmFuZ2UsIHBhcmVudCB9O1xuICB9XG4gIFNlbGVjdGlvblJhbmdlMi5jcmVhdGUgPSBjcmVhdGU7XG4gIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiBjYW5kaWRhdGUgIT09IHZvaWQgMCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChjYW5kaWRhdGUucGFyZW50ID09PSB2b2lkIDAgfHwgU2VsZWN0aW9uUmFuZ2UyLmlzKGNhbmRpZGF0ZS5wYXJlbnQpKTtcbiAgfVxuICBTZWxlY3Rpb25SYW5nZTIuaXMgPSBpcztcbn0pKFNlbGVjdGlvblJhbmdlIHx8IChTZWxlY3Rpb25SYW5nZSA9IHt9KSk7XG52YXIgVGV4dERvY3VtZW50O1xuKGZ1bmN0aW9uKFRleHREb2N1bWVudDIpIHtcbiAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xuICAgIHJldHVybiBuZXcgRnVsbFRleHREb2N1bWVudCh1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpO1xuICB9XG4gIFRleHREb2N1bWVudDIuY3JlYXRlID0gY3JlYXRlO1xuICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5sYW5ndWFnZUlkKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlSWQpKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUubGluZUNvdW50KSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5nZXRUZXh0KSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5wb3NpdGlvbkF0KSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5vZmZzZXRBdCkgPyB0cnVlIDogZmFsc2U7XG4gIH1cbiAgVGV4dERvY3VtZW50Mi5pcyA9IGlzO1xuICBmdW5jdGlvbiBhcHBseUVkaXRzKGRvY3VtZW50LCBlZGl0cykge1xuICAgIHZhciB0ZXh0ID0gZG9jdW1lbnQuZ2V0VGV4dCgpO1xuICAgIHZhciBzb3J0ZWRFZGl0cyA9IG1lcmdlU29ydChlZGl0cywgZnVuY3Rpb24oYSwgYikge1xuICAgICAgdmFyIGRpZmYgPSBhLnJhbmdlLnN0YXJ0LmxpbmUgLSBiLnJhbmdlLnN0YXJ0LmxpbmU7XG4gICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gYS5yYW5nZS5zdGFydC5jaGFyYWN0ZXIgLSBiLnJhbmdlLnN0YXJ0LmNoYXJhY3RlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkaWZmO1xuICAgIH0pO1xuICAgIHZhciBsYXN0TW9kaWZpZWRPZmZzZXQgPSB0ZXh0Lmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gc29ydGVkRWRpdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBlID0gc29ydGVkRWRpdHNbaV07XG4gICAgICB2YXIgc3RhcnRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChlLnJhbmdlLnN0YXJ0KTtcbiAgICAgIHZhciBlbmRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChlLnJhbmdlLmVuZCk7XG4gICAgICBpZiAoZW5kT2Zmc2V0IDw9IGxhc3RNb2RpZmllZE9mZnNldCkge1xuICAgICAgICB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgc3RhcnRPZmZzZXQpICsgZS5uZXdUZXh0ICsgdGV4dC5zdWJzdHJpbmcoZW5kT2Zmc2V0LCB0ZXh0Lmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPdmVybGFwcGluZyBlZGl0XCIpO1xuICAgICAgfVxuICAgICAgbGFzdE1vZGlmaWVkT2Zmc2V0ID0gc3RhcnRPZmZzZXQ7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xuICB9XG4gIFRleHREb2N1bWVudDIuYXBwbHlFZGl0cyA9IGFwcGx5RWRpdHM7XG4gIGZ1bmN0aW9uIG1lcmdlU29ydChkYXRhLCBjb21wYXJlKSB7XG4gICAgaWYgKGRhdGEubGVuZ3RoIDw9IDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICB2YXIgcCA9IGRhdGEubGVuZ3RoIC8gMiB8IDA7XG4gICAgdmFyIGxlZnQgPSBkYXRhLnNsaWNlKDAsIHApO1xuICAgIHZhciByaWdodCA9IGRhdGEuc2xpY2UocCk7XG4gICAgbWVyZ2VTb3J0KGxlZnQsIGNvbXBhcmUpO1xuICAgIG1lcmdlU29ydChyaWdodCwgY29tcGFyZSk7XG4gICAgdmFyIGxlZnRJZHggPSAwO1xuICAgIHZhciByaWdodElkeCA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGggJiYgcmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICAgIHZhciByZXQgPSBjb21wYXJlKGxlZnRbbGVmdElkeF0sIHJpZ2h0W3JpZ2h0SWR4XSk7XG4gICAgICBpZiAocmV0IDw9IDApIHtcbiAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGgpIHtcbiAgICAgIGRhdGFbaSsrXSA9IGxlZnRbbGVmdElkeCsrXTtcbiAgICB9XG4gICAgd2hpbGUgKHJpZ2h0SWR4IDwgcmlnaHQubGVuZ3RoKSB7XG4gICAgICBkYXRhW2krK10gPSByaWdodFtyaWdodElkeCsrXTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn0pKFRleHREb2N1bWVudCB8fCAoVGV4dERvY3VtZW50ID0ge30pKTtcbnZhciBGdWxsVGV4dERvY3VtZW50ID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIEZ1bGxUZXh0RG9jdW1lbnQyKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xuICAgIHRoaXMuX3VyaSA9IHVyaTtcbiAgICB0aGlzLl9sYW5ndWFnZUlkID0gbGFuZ3VhZ2VJZDtcbiAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcbiAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IHZvaWQgMDtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVsbFRleHREb2N1bWVudDIucHJvdG90eXBlLCBcInVyaVwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl91cmk7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdWxsVGV4dERvY3VtZW50Mi5wcm90b3R5cGUsIFwibGFuZ3VhZ2VJZFwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sYW5ndWFnZUlkO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVsbFRleHREb2N1bWVudDIucHJvdG90eXBlLCBcInZlcnNpb25cIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdmVyc2lvbjtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgRnVsbFRleHREb2N1bWVudDIucHJvdG90eXBlLmdldFRleHQgPSBmdW5jdGlvbihyYW5nZSkge1xuICAgIGlmIChyYW5nZSkge1xuICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5vZmZzZXRBdChyYW5nZS5zdGFydCk7XG4gICAgICB2YXIgZW5kID0gdGhpcy5vZmZzZXRBdChyYW5nZS5lbmQpO1xuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY29udGVudDtcbiAgfTtcbiAgRnVsbFRleHREb2N1bWVudDIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGV2ZW50LCB2ZXJzaW9uKSB7XG4gICAgdGhpcy5fY29udGVudCA9IGV2ZW50LnRleHQ7XG4gICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgdGhpcy5fbGluZU9mZnNldHMgPSB2b2lkIDA7XG4gIH07XG4gIEZ1bGxUZXh0RG9jdW1lbnQyLnByb3RvdHlwZS5nZXRMaW5lT2Zmc2V0cyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXIgbGluZU9mZnNldHMgPSBbXTtcbiAgICAgIHZhciB0ZXh0ID0gdGhpcy5fY29udGVudDtcbiAgICAgIHZhciBpc0xpbmVTdGFydCA9IHRydWU7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzTGluZVN0YXJ0KSB7XG4gICAgICAgICAgbGluZU9mZnNldHMucHVzaChpKTtcbiAgICAgICAgICBpc0xpbmVTdGFydCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaCA9IHRleHQuY2hhckF0KGkpO1xuICAgICAgICBpc0xpbmVTdGFydCA9IGNoID09PSBcIlxcclwiIHx8IGNoID09PSBcIlxcblwiO1xuICAgICAgICBpZiAoY2ggPT09IFwiXFxyXCIgJiYgaSArIDEgPCB0ZXh0Lmxlbmd0aCAmJiB0ZXh0LmNoYXJBdChpICsgMSkgPT09IFwiXFxuXCIpIHtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0xpbmVTdGFydCAmJiB0ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGluZU9mZnNldHMucHVzaCh0ZXh0Lmxlbmd0aCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IGxpbmVPZmZzZXRzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbGluZU9mZnNldHM7XG4gIH07XG4gIEZ1bGxUZXh0RG9jdW1lbnQyLnByb3RvdHlwZS5wb3NpdGlvbkF0ID0gZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgb2Zmc2V0ID0gTWF0aC5tYXgoTWF0aC5taW4ob2Zmc2V0LCB0aGlzLl9jb250ZW50Lmxlbmd0aCksIDApO1xuICAgIHZhciBsaW5lT2Zmc2V0cyA9IHRoaXMuZ2V0TGluZU9mZnNldHMoKTtcbiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGxpbmVPZmZzZXRzLmxlbmd0aDtcbiAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFBvc2l0aW9uLmNyZWF0ZSgwLCBvZmZzZXQpO1xuICAgIH1cbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7XG4gICAgICBpZiAobGluZU9mZnNldHNbbWlkXSA+IG9mZnNldCkge1xuICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGxpbmUgPSBsb3cgLSAxO1xuICAgIHJldHVybiBQb3NpdGlvbi5jcmVhdGUobGluZSwgb2Zmc2V0IC0gbGluZU9mZnNldHNbbGluZV0pO1xuICB9O1xuICBGdWxsVGV4dERvY3VtZW50Mi5wcm90b3R5cGUub2Zmc2V0QXQgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuICAgIHZhciBsaW5lT2Zmc2V0cyA9IHRoaXMuZ2V0TGluZU9mZnNldHMoKTtcbiAgICBpZiAocG9zaXRpb24ubGluZSA+PSBsaW5lT2Zmc2V0cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jb250ZW50Lmxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uLmxpbmUgPCAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIGxpbmVPZmZzZXQgPSBsaW5lT2Zmc2V0c1twb3NpdGlvbi5saW5lXTtcbiAgICB2YXIgbmV4dExpbmVPZmZzZXQgPSBwb3NpdGlvbi5saW5lICsgMSA8IGxpbmVPZmZzZXRzLmxlbmd0aCA/IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmUgKyAxXSA6IHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihsaW5lT2Zmc2V0ICsgcG9zaXRpb24uY2hhcmFjdGVyLCBuZXh0TGluZU9mZnNldCksIGxpbmVPZmZzZXQpO1xuICB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVsbFRleHREb2N1bWVudDIucHJvdG90eXBlLCBcImxpbmVDb3VudFwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldExpbmVPZmZzZXRzKCkubGVuZ3RoO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gRnVsbFRleHREb2N1bWVudDI7XG59KCk7XG52YXIgSXM7XG4oZnVuY3Rpb24oSXMyKSB7XG4gIHZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4gIGZ1bmN0aW9uIGRlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiO1xuICB9XG4gIElzMi5kZWZpbmVkID0gZGVmaW5lZDtcbiAgZnVuY3Rpb24gdW5kZWZpbmVkMih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG4gIH1cbiAgSXMyLnVuZGVmaW5lZCA9IHVuZGVmaW5lZDI7XG4gIGZ1bmN0aW9uIGJvb2xlYW4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlO1xuICB9XG4gIElzMi5ib29sZWFuID0gYm9vbGVhbjtcbiAgZnVuY3Rpb24gc3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgU3RyaW5nXVwiO1xuICB9XG4gIElzMi5zdHJpbmcgPSBzdHJpbmc7XG4gIGZ1bmN0aW9uIG51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IE51bWJlcl1cIjtcbiAgfVxuICBJczIubnVtYmVyID0gbnVtYmVyO1xuICBmdW5jdGlvbiBudW1iZXJSYW5nZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBOdW1iZXJdXCIgJiYgbWluIDw9IHZhbHVlICYmIHZhbHVlIDw9IG1heDtcbiAgfVxuICBJczIubnVtYmVyUmFuZ2UgPSBudW1iZXJSYW5nZTtcbiAgZnVuY3Rpb24gaW50ZWdlcjIodmFsdWUpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBOdW1iZXJdXCIgJiYgLTIxNDc0ODM2NDggPD0gdmFsdWUgJiYgdmFsdWUgPD0gMjE0NzQ4MzY0NztcbiAgfVxuICBJczIuaW50ZWdlciA9IGludGVnZXIyO1xuICBmdW5jdGlvbiB1aW50ZWdlcjIodmFsdWUpIHtcbiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBOdW1iZXJdXCIgJiYgMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAyMTQ3NDgzNjQ3O1xuICB9XG4gIElzMi51aW50ZWdlciA9IHVpbnRlZ2VyMjtcbiAgZnVuY3Rpb24gZnVuYyh2YWx1ZSkge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiO1xuICB9XG4gIElzMi5mdW5jID0gZnVuYztcbiAgZnVuY3Rpb24gb2JqZWN0TGl0ZXJhbCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG4gIH1cbiAgSXMyLm9iamVjdExpdGVyYWwgPSBvYmplY3RMaXRlcmFsO1xuICBmdW5jdGlvbiB0eXBlZEFycmF5KHZhbHVlLCBjaGVjaykge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5ldmVyeShjaGVjayk7XG4gIH1cbiAgSXMyLnR5cGVkQXJyYXkgPSB0eXBlZEFycmF5O1xufSkoSXMgfHwgKElzID0ge30pKTtcblxuLy8gc3JjL2xhbmd1YWdlL2NvbW1vbi9sc3BMYW5ndWFnZUZlYXR1cmVzLnRzXG52YXIgRGlhZ25vc3RpY3NBZGFwdGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihfbGFuZ3VhZ2VJZCwgX3dvcmtlciwgY29uZmlnQ2hhbmdlRXZlbnQpIHtcbiAgICB0aGlzLl9sYW5ndWFnZUlkID0gX2xhbmd1YWdlSWQ7XG4gICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICBjb25zdCBvbk1vZGVsQWRkID0gKG1vZGVsKSA9PiB7XG4gICAgICBsZXQgbW9kZUlkID0gbW9kZWwuZ2V0TGFuZ3VhZ2VJZCgpO1xuICAgICAgaWYgKG1vZGVJZCAhPT0gdGhpcy5fbGFuZ3VhZ2VJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgaGFuZGxlO1xuICAgICAgdGhpcy5fbGlzdGVuZXJbbW9kZWwudXJpLnRvU3RyaW5nKCldID0gbW9kZWwub25EaWRDaGFuZ2VDb250ZW50KCgpID0+IHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgICAgICBoYW5kbGUgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB0aGlzLl9kb1ZhbGlkYXRlKG1vZGVsLnVyaSwgbW9kZUlkKSwgNTAwKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fZG9WYWxpZGF0ZShtb2RlbC51cmksIG1vZGVJZCk7XG4gICAgfTtcbiAgICBjb25zdCBvbk1vZGVsUmVtb3ZlZCA9IChtb2RlbCkgPT4ge1xuICAgICAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuZWRpdG9yLnNldE1vZGVsTWFya2Vycyhtb2RlbCwgdGhpcy5fbGFuZ3VhZ2VJZCwgW10pO1xuICAgICAgbGV0IHVyaVN0ciA9IG1vZGVsLnVyaS50b1N0cmluZygpO1xuICAgICAgbGV0IGxpc3RlbmVyID0gdGhpcy5fbGlzdGVuZXJbdXJpU3RyXTtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lci5kaXNwb3NlKCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lclt1cmlTdHJdO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5lZGl0b3Iub25EaWRDcmVhdGVNb2RlbChvbk1vZGVsQWRkKSk7XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5lZGl0b3Iub25XaWxsRGlzcG9zZU1vZGVsKG9uTW9kZWxSZW1vdmVkKSk7XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5lZGl0b3Iub25EaWRDaGFuZ2VNb2RlbExhbmd1YWdlKChldmVudCkgPT4ge1xuICAgICAgb25Nb2RlbFJlbW92ZWQoZXZlbnQubW9kZWwpO1xuICAgICAgb25Nb2RlbEFkZChldmVudC5tb2RlbCk7XG4gICAgfSkpO1xuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLnB1c2goY29uZmlnQ2hhbmdlRXZlbnQoKF8pID0+IHtcbiAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmVkaXRvci5nZXRNb2RlbHMoKS5mb3JFYWNoKChtb2RlbCkgPT4ge1xuICAgICAgICBpZiAobW9kZWwuZ2V0TGFuZ3VhZ2VJZCgpID09PSB0aGlzLl9sYW5ndWFnZUlkKSB7XG4gICAgICAgICAgb25Nb2RlbFJlbW92ZWQobW9kZWwpO1xuICAgICAgICAgIG9uTW9kZWxBZGQobW9kZWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KSk7XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaCh7XG4gICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmVkaXRvci5nZXRNb2RlbHMoKS5mb3JFYWNoKG9uTW9kZWxSZW1vdmVkKTtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuX2xpc3RlbmVyKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJba2V5XS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5lZGl0b3IuZ2V0TW9kZWxzKCkuZm9yRWFjaChvbk1vZGVsQWRkKTtcbiAgfVxuICBfZGlzcG9zYWJsZXMgPSBbXTtcbiAgX2xpc3RlbmVyID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMuZm9yRWFjaCgoZCkgPT4gZCAmJiBkLmRpc3Bvc2UoKSk7XG4gICAgdGhpcy5fZGlzcG9zYWJsZXMubGVuZ3RoID0gMDtcbiAgfVxuICBfZG9WYWxpZGF0ZShyZXNvdXJjZSwgbGFuZ3VhZ2VJZCkge1xuICAgIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbigod29ya2VyKSA9PiB7XG4gICAgICByZXR1cm4gd29ya2VyLmRvVmFsaWRhdGlvbihyZXNvdXJjZS50b1N0cmluZygpKTtcbiAgICB9KS50aGVuKChkaWFnbm9zdGljcykgPT4ge1xuICAgICAgY29uc3QgbWFya2VycyA9IGRpYWdub3N0aWNzLm1hcCgoZCkgPT4gdG9EaWFnbm9zdGljcyhyZXNvdXJjZSwgZCkpO1xuICAgICAgbGV0IG1vZGVsID0gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuZWRpdG9yLmdldE1vZGVsKHJlc291cmNlKTtcbiAgICAgIGlmIChtb2RlbCAmJiBtb2RlbC5nZXRMYW5ndWFnZUlkKCkgPT09IGxhbmd1YWdlSWQpIHtcbiAgICAgICAgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuZWRpdG9yLnNldE1vZGVsTWFya2Vycyhtb2RlbCwgbGFuZ3VhZ2VJZCwgbWFya2Vycyk7XG4gICAgICB9XG4gICAgfSkudGhlbih2b2lkIDAsIChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIHRvU2V2ZXJpdHkobHNTZXZlcml0eSkge1xuICBzd2l0Y2ggKGxzU2V2ZXJpdHkpIHtcbiAgICBjYXNlIERpYWdub3N0aWNTZXZlcml0eS5FcnJvcjpcbiAgICAgIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5NYXJrZXJTZXZlcml0eS5FcnJvcjtcbiAgICBjYXNlIERpYWdub3N0aWNTZXZlcml0eS5XYXJuaW5nOlxuICAgICAgcmV0dXJuIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLk1hcmtlclNldmVyaXR5Lldhcm5pbmc7XG4gICAgY2FzZSBEaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb246XG4gICAgICByZXR1cm4gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuTWFya2VyU2V2ZXJpdHkuSW5mbztcbiAgICBjYXNlIERpYWdub3N0aWNTZXZlcml0eS5IaW50OlxuICAgICAgcmV0dXJuIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLk1hcmtlclNldmVyaXR5LkhpbnQ7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5NYXJrZXJTZXZlcml0eS5JbmZvO1xuICB9XG59XG5mdW5jdGlvbiB0b0RpYWdub3N0aWNzKHJlc291cmNlLCBkaWFnKSB7XG4gIGxldCBjb2RlID0gdHlwZW9mIGRpYWcuY29kZSA9PT0gXCJudW1iZXJcIiA/IFN0cmluZyhkaWFnLmNvZGUpIDogZGlhZy5jb2RlO1xuICByZXR1cm4ge1xuICAgIHNldmVyaXR5OiB0b1NldmVyaXR5KGRpYWcuc2V2ZXJpdHkpLFxuICAgIHN0YXJ0TGluZU51bWJlcjogZGlhZy5yYW5nZS5zdGFydC5saW5lICsgMSxcbiAgICBzdGFydENvbHVtbjogZGlhZy5yYW5nZS5zdGFydC5jaGFyYWN0ZXIgKyAxLFxuICAgIGVuZExpbmVOdW1iZXI6IGRpYWcucmFuZ2UuZW5kLmxpbmUgKyAxLFxuICAgIGVuZENvbHVtbjogZGlhZy5yYW5nZS5lbmQuY2hhcmFjdGVyICsgMSxcbiAgICBtZXNzYWdlOiBkaWFnLm1lc3NhZ2UsXG4gICAgY29kZSxcbiAgICBzb3VyY2U6IGRpYWcuc291cmNlXG4gIH07XG59XG52YXIgQ29tcGxldGlvbkFkYXB0ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF93b3JrZXIsIF90cmlnZ2VyQ2hhcmFjdGVycykge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gICAgdGhpcy5fdHJpZ2dlckNoYXJhY3RlcnMgPSBfdHJpZ2dlckNoYXJhY3RlcnM7XG4gIH1cbiAgZ2V0IHRyaWdnZXJDaGFyYWN0ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl90cmlnZ2VyQ2hhcmFjdGVycztcbiAgfVxuICBwcm92aWRlQ29tcGxldGlvbkl0ZW1zKG1vZGVsLCBwb3NpdGlvbiwgY29udGV4dCwgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKCh3b3JrZXIpID0+IHtcbiAgICAgIHJldHVybiB3b3JrZXIuZG9Db21wbGV0ZShyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUG9zaXRpb24ocG9zaXRpb24pKTtcbiAgICB9KS50aGVuKChpbmZvKSA9PiB7XG4gICAgICBpZiAoIWluZm8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgd29yZEluZm8gPSBtb2RlbC5nZXRXb3JkVW50aWxQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICBjb25zdCB3b3JkUmFuZ2UgPSBuZXcgbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuUmFuZ2UocG9zaXRpb24ubGluZU51bWJlciwgd29yZEluZm8uc3RhcnRDb2x1bW4sIHBvc2l0aW9uLmxpbmVOdW1iZXIsIHdvcmRJbmZvLmVuZENvbHVtbik7XG4gICAgICBjb25zdCBpdGVtcyA9IGluZm8uaXRlbXMubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtID0ge1xuICAgICAgICAgIGxhYmVsOiBlbnRyeS5sYWJlbCxcbiAgICAgICAgICBpbnNlcnRUZXh0OiBlbnRyeS5pbnNlcnRUZXh0IHx8IGVudHJ5LmxhYmVsLFxuICAgICAgICAgIHNvcnRUZXh0OiBlbnRyeS5zb3J0VGV4dCxcbiAgICAgICAgICBmaWx0ZXJUZXh0OiBlbnRyeS5maWx0ZXJUZXh0LFxuICAgICAgICAgIGRvY3VtZW50YXRpb246IGVudHJ5LmRvY3VtZW50YXRpb24sXG4gICAgICAgICAgZGV0YWlsOiBlbnRyeS5kZXRhaWwsXG4gICAgICAgICAgY29tbWFuZDogdG9Db21tYW5kKGVudHJ5LmNvbW1hbmQpLFxuICAgICAgICAgIHJhbmdlOiB3b3JkUmFuZ2UsXG4gICAgICAgICAga2luZDogdG9Db21wbGV0aW9uSXRlbUtpbmQoZW50cnkua2luZClcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGVudHJ5LnRleHRFZGl0KSB7XG4gICAgICAgICAgaWYgKGlzSW5zZXJ0UmVwbGFjZUVkaXQoZW50cnkudGV4dEVkaXQpKSB7XG4gICAgICAgICAgICBpdGVtLnJhbmdlID0ge1xuICAgICAgICAgICAgICBpbnNlcnQ6IHRvUmFuZ2UoZW50cnkudGV4dEVkaXQuaW5zZXJ0KSxcbiAgICAgICAgICAgICAgcmVwbGFjZTogdG9SYW5nZShlbnRyeS50ZXh0RWRpdC5yZXBsYWNlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5yYW5nZSA9IHRvUmFuZ2UoZW50cnkudGV4dEVkaXQucmFuZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtLmluc2VydFRleHQgPSBlbnRyeS50ZXh0RWRpdC5uZXdUZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeS5hZGRpdGlvbmFsVGV4dEVkaXRzKSB7XG4gICAgICAgICAgaXRlbS5hZGRpdGlvbmFsVGV4dEVkaXRzID0gZW50cnkuYWRkaXRpb25hbFRleHRFZGl0cy5tYXAodG9UZXh0RWRpdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVudHJ5Lmluc2VydFRleHRGb3JtYXQgPT09IEluc2VydFRleHRGb3JtYXQuU25pcHBldCkge1xuICAgICAgICAgIGl0ZW0uaW5zZXJ0VGV4dFJ1bGVzID0gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtSW5zZXJ0VGV4dFJ1bGUuSW5zZXJ0QXNTbmlwcGV0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc0luY29tcGxldGU6IGluZm8uaXNJbmNvbXBsZXRlLFxuICAgICAgICBzdWdnZXN0aW9uczogaXRlbXNcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBmcm9tUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgaWYgKCFwb3NpdGlvbikge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgcmV0dXJuIHsgY2hhcmFjdGVyOiBwb3NpdGlvbi5jb2x1bW4gLSAxLCBsaW5lOiBwb3NpdGlvbi5saW5lTnVtYmVyIC0gMSB9O1xufVxuZnVuY3Rpb24gZnJvbVJhbmdlKHJhbmdlKSB7XG4gIGlmICghcmFuZ2UpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHtcbiAgICAgIGxpbmU6IHJhbmdlLnN0YXJ0TGluZU51bWJlciAtIDEsXG4gICAgICBjaGFyYWN0ZXI6IHJhbmdlLnN0YXJ0Q29sdW1uIC0gMVxuICAgIH0sXG4gICAgZW5kOiB7IGxpbmU6IHJhbmdlLmVuZExpbmVOdW1iZXIgLSAxLCBjaGFyYWN0ZXI6IHJhbmdlLmVuZENvbHVtbiAtIDEgfVxuICB9O1xufVxuZnVuY3Rpb24gdG9SYW5nZShyYW5nZSkge1xuICBpZiAoIXJhbmdlKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICByZXR1cm4gbmV3IG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLlJhbmdlKHJhbmdlLnN0YXJ0LmxpbmUgKyAxLCByYW5nZS5zdGFydC5jaGFyYWN0ZXIgKyAxLCByYW5nZS5lbmQubGluZSArIDEsIHJhbmdlLmVuZC5jaGFyYWN0ZXIgKyAxKTtcbn1cbmZ1bmN0aW9uIGlzSW5zZXJ0UmVwbGFjZUVkaXQoZWRpdCkge1xuICByZXR1cm4gdHlwZW9mIGVkaXQuaW5zZXJ0ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBlZGl0LnJlcGxhY2UgIT09IFwidW5kZWZpbmVkXCI7XG59XG5mdW5jdGlvbiB0b0NvbXBsZXRpb25JdGVtS2luZChraW5kKSB7XG4gIGNvbnN0IG1JdGVtS2luZCA9IG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUtpbmQ7XG4gIHN3aXRjaCAoa2luZCkge1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlRleHQ6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLlRleHQ7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuTWV0aG9kOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5NZXRob2Q7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuRnVuY3Rpb246XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLkZ1bmN0aW9uO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0cnVjdG9yOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5Db25zdHJ1Y3RvcjtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5GaWVsZDpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuRmllbGQ7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGU6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLlZhcmlhYmxlO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkNsYXNzOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5DbGFzcztcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5JbnRlcmZhY2U6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLkludGVyZmFjZTtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5Nb2R1bGU6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLk1vZHVsZTtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eTpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuUHJvcGVydHk7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdDpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuVW5pdDtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5WYWx1ZTpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuVmFsdWU7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuRW51bTpcbiAgICAgIHJldHVybiBtSXRlbUtpbmQuRW51bTtcbiAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5LZXl3b3JkOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5LZXl3b3JkO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlNuaXBwZXQ6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLlNuaXBwZXQ7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuQ29sb3I6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLkNvbG9yO1xuICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkZpbGU6XG4gICAgICByZXR1cm4gbUl0ZW1LaW5kLkZpbGU7XG4gICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuUmVmZXJlbmNlOlxuICAgICAgcmV0dXJuIG1JdGVtS2luZC5SZWZlcmVuY2U7XG4gIH1cbiAgcmV0dXJuIG1JdGVtS2luZC5Qcm9wZXJ0eTtcbn1cbmZ1bmN0aW9uIHRvVGV4dEVkaXQodGV4dEVkaXQpIHtcbiAgaWYgKCF0ZXh0RWRpdCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICByYW5nZTogdG9SYW5nZSh0ZXh0RWRpdC5yYW5nZSksXG4gICAgdGV4dDogdGV4dEVkaXQubmV3VGV4dFxuICB9O1xufVxuZnVuY3Rpb24gdG9Db21tYW5kKGMpIHtcbiAgcmV0dXJuIGMgJiYgYy5jb21tYW5kID09PSBcImVkaXRvci5hY3Rpb24udHJpZ2dlclN1Z2dlc3RcIiA/IHsgaWQ6IGMuY29tbWFuZCwgdGl0bGU6IGMudGl0bGUsIGFyZ3VtZW50czogYy5hcmd1bWVudHMgfSA6IHZvaWQgMDtcbn1cbnZhciBIb3ZlckFkYXB0ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF93b3JrZXIpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICB9XG4gIHByb3ZpZGVIb3Zlcihtb2RlbCwgcG9zaXRpb24sIHRva2VuKSB7XG4gICAgbGV0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4ge1xuICAgICAgcmV0dXJuIHdvcmtlci5kb0hvdmVyKHJlc291cmNlLnRvU3RyaW5nKCksIGZyb21Qb3NpdGlvbihwb3NpdGlvbikpO1xuICAgIH0pLnRoZW4oKGluZm8pID0+IHtcbiAgICAgIGlmICghaW5mbykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICByYW5nZTogdG9SYW5nZShpbmZvLnJhbmdlKSxcbiAgICAgICAgY29udGVudHM6IHRvTWFya2VkU3RyaW5nQXJyYXkoaW5mby5jb250ZW50cylcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBpc01hcmt1cENvbnRlbnQodGhpbmcpIHtcbiAgcmV0dXJuIHRoaW5nICYmIHR5cGVvZiB0aGluZyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdGhpbmcua2luZCA9PT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIHRvTWFya2Rvd25TdHJpbmcoZW50cnkpIHtcbiAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogZW50cnlcbiAgICB9O1xuICB9XG4gIGlmIChpc01hcmt1cENvbnRlbnQoZW50cnkpKSB7XG4gICAgaWYgKGVudHJ5LmtpbmQgPT09IFwicGxhaW50ZXh0XCIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBlbnRyeS52YWx1ZS5yZXBsYWNlKC9bXFxcXGAqX3t9W1xcXSgpIytcXC0uIV0vZywgXCJcXFxcJCZcIilcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogZW50cnkudmFsdWVcbiAgICB9O1xuICB9XG4gIHJldHVybiB7IHZhbHVlOiBcImBgYFwiICsgZW50cnkubGFuZ3VhZ2UgKyBcIlxcblwiICsgZW50cnkudmFsdWUgKyBcIlxcbmBgYFxcblwiIH07XG59XG5mdW5jdGlvbiB0b01hcmtlZFN0cmluZ0FycmF5KGNvbnRlbnRzKSB7XG4gIGlmICghY29udGVudHMpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGNvbnRlbnRzKSkge1xuICAgIHJldHVybiBjb250ZW50cy5tYXAodG9NYXJrZG93blN0cmluZyk7XG4gIH1cbiAgcmV0dXJuIFt0b01hcmtkb3duU3RyaW5nKGNvbnRlbnRzKV07XG59XG52YXIgRG9jdW1lbnRIaWdobGlnaHRBZGFwdGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfd29ya2VyKSB7XG4gICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgfVxuICBwcm92aWRlRG9jdW1lbnRIaWdobGlnaHRzKG1vZGVsLCBwb3NpdGlvbiwgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKCh3b3JrZXIpID0+IHdvcmtlci5maW5kRG9jdW1lbnRIaWdobGlnaHRzKHJlc291cmNlLnRvU3RyaW5nKCksIGZyb21Qb3NpdGlvbihwb3NpdGlvbikpKS50aGVuKChlbnRyaWVzKSA9PiB7XG4gICAgICBpZiAoIWVudHJpZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVudHJpZXMubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJhbmdlOiB0b1JhbmdlKGVudHJ5LnJhbmdlKSxcbiAgICAgICAgICBraW5kOiB0b0RvY3VtZW50SGlnaGxpZ2h0S2luZChlbnRyeS5raW5kKVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiB0b0RvY3VtZW50SGlnaGxpZ2h0S2luZChraW5kKSB7XG4gIHN3aXRjaCAoa2luZCkge1xuICAgIGNhc2UgRG9jdW1lbnRIaWdobGlnaHRLaW5kLlJlYWQ6XG4gICAgICByZXR1cm4gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLkRvY3VtZW50SGlnaGxpZ2h0S2luZC5SZWFkO1xuICAgIGNhc2UgRG9jdW1lbnRIaWdobGlnaHRLaW5kLldyaXRlOlxuICAgICAgcmV0dXJuIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuV3JpdGU7XG4gICAgY2FzZSBEb2N1bWVudEhpZ2hsaWdodEtpbmQuVGV4dDpcbiAgICAgIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMuRG9jdW1lbnRIaWdobGlnaHRLaW5kLlRleHQ7XG4gIH1cbiAgcmV0dXJuIG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuVGV4dDtcbn1cbnZhciBEZWZpbml0aW9uQWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZURlZmluaXRpb24obW9kZWwsIHBvc2l0aW9uLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4ge1xuICAgICAgcmV0dXJuIHdvcmtlci5maW5kRGVmaW5pdGlvbihyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUG9zaXRpb24ocG9zaXRpb24pKTtcbiAgICB9KS50aGVuKChkZWZpbml0aW9uKSA9PiB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFt0b0xvY2F0aW9uKGRlZmluaXRpb24pXTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIHRvTG9jYXRpb24obG9jYXRpb24pIHtcbiAgcmV0dXJuIHtcbiAgICB1cmk6IG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLlVyaS5wYXJzZShsb2NhdGlvbi51cmkpLFxuICAgIHJhbmdlOiB0b1JhbmdlKGxvY2F0aW9uLnJhbmdlKVxuICB9O1xufVxudmFyIFJlZmVyZW5jZUFkYXB0ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF93b3JrZXIpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICB9XG4gIHByb3ZpZGVSZWZlcmVuY2VzKG1vZGVsLCBwb3NpdGlvbiwgY29udGV4dCwgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKCh3b3JrZXIpID0+IHtcbiAgICAgIHJldHVybiB3b3JrZXIuZmluZFJlZmVyZW5jZXMocmVzb3VyY2UudG9TdHJpbmcoKSwgZnJvbVBvc2l0aW9uKHBvc2l0aW9uKSk7XG4gICAgfSkudGhlbigoZW50cmllcykgPT4ge1xuICAgICAgaWYgKCFlbnRyaWVzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbnRyaWVzLm1hcCh0b0xvY2F0aW9uKTtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBSZW5hbWVBZGFwdGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfd29ya2VyKSB7XG4gICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgfVxuICBwcm92aWRlUmVuYW1lRWRpdHMobW9kZWwsIHBvc2l0aW9uLCBuZXdOYW1lLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4ge1xuICAgICAgcmV0dXJuIHdvcmtlci5kb1JlbmFtZShyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUG9zaXRpb24ocG9zaXRpb24pLCBuZXdOYW1lKTtcbiAgICB9KS50aGVuKChlZGl0KSA9PiB7XG4gICAgICByZXR1cm4gdG9Xb3Jrc3BhY2VFZGl0KGVkaXQpO1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gdG9Xb3Jrc3BhY2VFZGl0KGVkaXQpIHtcbiAgaWYgKCFlZGl0IHx8ICFlZGl0LmNoYW5nZXMpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGxldCByZXNvdXJjZUVkaXRzID0gW107XG4gIGZvciAobGV0IHVyaSBpbiBlZGl0LmNoYW5nZXMpIHtcbiAgICBjb25zdCBfdXJpID0gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMuVXJpLnBhcnNlKHVyaSk7XG4gICAgZm9yIChsZXQgZSBvZiBlZGl0LmNoYW5nZXNbdXJpXSkge1xuICAgICAgcmVzb3VyY2VFZGl0cy5wdXNoKHtcbiAgICAgICAgcmVzb3VyY2U6IF91cmksXG4gICAgICAgIHZlcnNpb25JZDogdm9pZCAwLFxuICAgICAgICB0ZXh0RWRpdDoge1xuICAgICAgICAgIHJhbmdlOiB0b1JhbmdlKGUucmFuZ2UpLFxuICAgICAgICAgIHRleHQ6IGUubmV3VGV4dFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBlZGl0czogcmVzb3VyY2VFZGl0c1xuICB9O1xufVxudmFyIERvY3VtZW50U3ltYm9sQWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZURvY3VtZW50U3ltYm9scyhtb2RlbCwgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKCh3b3JrZXIpID0+IHdvcmtlci5maW5kRG9jdW1lbnRTeW1ib2xzKHJlc291cmNlLnRvU3RyaW5nKCkpKS50aGVuKChpdGVtcykgPT4ge1xuICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlbXMubWFwKChpdGVtKSA9PiAoe1xuICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgIGRldGFpbDogXCJcIixcbiAgICAgICAgY29udGFpbmVyTmFtZTogaXRlbS5jb250YWluZXJOYW1lLFxuICAgICAgICBraW5kOiB0b1N5bWJvbEtpbmQoaXRlbS5raW5kKSxcbiAgICAgICAgcmFuZ2U6IHRvUmFuZ2UoaXRlbS5sb2NhdGlvbi5yYW5nZSksXG4gICAgICAgIHNlbGVjdGlvblJhbmdlOiB0b1JhbmdlKGl0ZW0ubG9jYXRpb24ucmFuZ2UpLFxuICAgICAgICB0YWdzOiBbXVxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gdG9TeW1ib2xLaW5kKGtpbmQpIHtcbiAgbGV0IG1LaW5kID0gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLlN5bWJvbEtpbmQ7XG4gIHN3aXRjaCAoa2luZCkge1xuICAgIGNhc2UgU3ltYm9sS2luZC5GaWxlOlxuICAgICAgcmV0dXJuIG1LaW5kLkFycmF5O1xuICAgIGNhc2UgU3ltYm9sS2luZC5Nb2R1bGU6XG4gICAgICByZXR1cm4gbUtpbmQuTW9kdWxlO1xuICAgIGNhc2UgU3ltYm9sS2luZC5OYW1lc3BhY2U6XG4gICAgICByZXR1cm4gbUtpbmQuTmFtZXNwYWNlO1xuICAgIGNhc2UgU3ltYm9sS2luZC5QYWNrYWdlOlxuICAgICAgcmV0dXJuIG1LaW5kLlBhY2thZ2U7XG4gICAgY2FzZSBTeW1ib2xLaW5kLkNsYXNzOlxuICAgICAgcmV0dXJuIG1LaW5kLkNsYXNzO1xuICAgIGNhc2UgU3ltYm9sS2luZC5NZXRob2Q6XG4gICAgICByZXR1cm4gbUtpbmQuTWV0aG9kO1xuICAgIGNhc2UgU3ltYm9sS2luZC5Qcm9wZXJ0eTpcbiAgICAgIHJldHVybiBtS2luZC5Qcm9wZXJ0eTtcbiAgICBjYXNlIFN5bWJvbEtpbmQuRmllbGQ6XG4gICAgICByZXR1cm4gbUtpbmQuRmllbGQ7XG4gICAgY2FzZSBTeW1ib2xLaW5kLkNvbnN0cnVjdG9yOlxuICAgICAgcmV0dXJuIG1LaW5kLkNvbnN0cnVjdG9yO1xuICAgIGNhc2UgU3ltYm9sS2luZC5FbnVtOlxuICAgICAgcmV0dXJuIG1LaW5kLkVudW07XG4gICAgY2FzZSBTeW1ib2xLaW5kLkludGVyZmFjZTpcbiAgICAgIHJldHVybiBtS2luZC5JbnRlcmZhY2U7XG4gICAgY2FzZSBTeW1ib2xLaW5kLkZ1bmN0aW9uOlxuICAgICAgcmV0dXJuIG1LaW5kLkZ1bmN0aW9uO1xuICAgIGNhc2UgU3ltYm9sS2luZC5WYXJpYWJsZTpcbiAgICAgIHJldHVybiBtS2luZC5WYXJpYWJsZTtcbiAgICBjYXNlIFN5bWJvbEtpbmQuQ29uc3RhbnQ6XG4gICAgICByZXR1cm4gbUtpbmQuQ29uc3RhbnQ7XG4gICAgY2FzZSBTeW1ib2xLaW5kLlN0cmluZzpcbiAgICAgIHJldHVybiBtS2luZC5TdHJpbmc7XG4gICAgY2FzZSBTeW1ib2xLaW5kLk51bWJlcjpcbiAgICAgIHJldHVybiBtS2luZC5OdW1iZXI7XG4gICAgY2FzZSBTeW1ib2xLaW5kLkJvb2xlYW46XG4gICAgICByZXR1cm4gbUtpbmQuQm9vbGVhbjtcbiAgICBjYXNlIFN5bWJvbEtpbmQuQXJyYXk6XG4gICAgICByZXR1cm4gbUtpbmQuQXJyYXk7XG4gIH1cbiAgcmV0dXJuIG1LaW5kLkZ1bmN0aW9uO1xufVxudmFyIERvY3VtZW50TGlua0FkYXB0ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF93b3JrZXIpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICB9XG4gIHByb3ZpZGVMaW5rcyhtb2RlbCwgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKCh3b3JrZXIpID0+IHdvcmtlci5maW5kRG9jdW1lbnRMaW5rcyhyZXNvdXJjZS50b1N0cmluZygpKSkudGhlbigoaXRlbXMpID0+IHtcbiAgICAgIGlmICghaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGlua3M6IGl0ZW1zLm1hcCgoaXRlbSkgPT4gKHtcbiAgICAgICAgICByYW5nZTogdG9SYW5nZShpdGVtLnJhbmdlKSxcbiAgICAgICAgICB1cmw6IGl0ZW0udGFyZ2V0XG4gICAgICAgIH0pKVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF93b3JrZXIpIHtcbiAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICB9XG4gIHByb3ZpZGVEb2N1bWVudEZvcm1hdHRpbmdFZGl0cyhtb2RlbCwgb3B0aW9ucywgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKCh3b3JrZXIpID0+IHtcbiAgICAgIHJldHVybiB3b3JrZXIuZm9ybWF0KHJlc291cmNlLnRvU3RyaW5nKCksIG51bGwsIGZyb21Gb3JtYXR0aW5nT3B0aW9ucyhvcHRpb25zKSkudGhlbigoZWRpdHMpID0+IHtcbiAgICAgICAgaWYgKCFlZGl0cyB8fCBlZGl0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVkaXRzLm1hcCh0b1RleHRFZGl0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xudmFyIERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfd29ya2VyKSB7XG4gICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgfVxuICBwcm92aWRlRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0cyhtb2RlbCwgcmFuZ2UsIG9wdGlvbnMsIHRva2VuKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbigod29ya2VyKSA9PiB7XG4gICAgICByZXR1cm4gd29ya2VyLmZvcm1hdChyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUmFuZ2UocmFuZ2UpLCBmcm9tRm9ybWF0dGluZ09wdGlvbnMob3B0aW9ucykpLnRoZW4oKGVkaXRzKSA9PiB7XG4gICAgICAgIGlmICghZWRpdHMgfHwgZWRpdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlZGl0cy5tYXAodG9UZXh0RWRpdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIGZyb21Gb3JtYXR0aW5nT3B0aW9ucyhvcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgdGFiU2l6ZTogb3B0aW9ucy50YWJTaXplLFxuICAgIGluc2VydFNwYWNlczogb3B0aW9ucy5pbnNlcnRTcGFjZXNcbiAgfTtcbn1cbnZhciBEb2N1bWVudENvbG9yQWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZURvY3VtZW50Q29sb3JzKG1vZGVsLCB0b2tlbikge1xuICAgIGNvbnN0IHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oKHdvcmtlcikgPT4gd29ya2VyLmZpbmREb2N1bWVudENvbG9ycyhyZXNvdXJjZS50b1N0cmluZygpKSkudGhlbigoaW5mb3MpID0+IHtcbiAgICAgIGlmICghaW5mb3MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGluZm9zLm1hcCgoaXRlbSkgPT4gKHtcbiAgICAgICAgY29sb3I6IGl0ZW0uY29sb3IsXG4gICAgICAgIHJhbmdlOiB0b1JhbmdlKGl0ZW0ucmFuZ2UpXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH1cbiAgcHJvdmlkZUNvbG9yUHJlc2VudGF0aW9ucyhtb2RlbCwgaW5mbywgdG9rZW4pIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKCh3b3JrZXIpID0+IHdvcmtlci5nZXRDb2xvclByZXNlbnRhdGlvbnMocmVzb3VyY2UudG9TdHJpbmcoKSwgaW5mby5jb2xvciwgZnJvbVJhbmdlKGluZm8ucmFuZ2UpKSkudGhlbigocHJlc2VudGF0aW9ucykgPT4ge1xuICAgICAgaWYgKCFwcmVzZW50YXRpb25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmVzZW50YXRpb25zLm1hcCgocHJlc2VudGF0aW9uKSA9PiB7XG4gICAgICAgIGxldCBpdGVtID0ge1xuICAgICAgICAgIGxhYmVsOiBwcmVzZW50YXRpb24ubGFiZWxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHByZXNlbnRhdGlvbi50ZXh0RWRpdCkge1xuICAgICAgICAgIGl0ZW0udGV4dEVkaXQgPSB0b1RleHRFZGl0KHByZXNlbnRhdGlvbi50ZXh0RWRpdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXNlbnRhdGlvbi5hZGRpdGlvbmFsVGV4dEVkaXRzKSB7XG4gICAgICAgICAgaXRlbS5hZGRpdGlvbmFsVGV4dEVkaXRzID0gcHJlc2VudGF0aW9uLmFkZGl0aW9uYWxUZXh0RWRpdHMubWFwKHRvVGV4dEVkaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG52YXIgRm9sZGluZ1JhbmdlQWRhcHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoX3dvcmtlcikge1xuICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gIH1cbiAgcHJvdmlkZUZvbGRpbmdSYW5nZXMobW9kZWwsIGNvbnRleHQsIHRva2VuKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbigod29ya2VyKSA9PiB3b3JrZXIuZ2V0Rm9sZGluZ1JhbmdlcyhyZXNvdXJjZS50b1N0cmluZygpLCBjb250ZXh0KSkudGhlbigocmFuZ2VzKSA9PiB7XG4gICAgICBpZiAoIXJhbmdlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gcmFuZ2VzLm1hcCgocmFuZ2UpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgIHN0YXJ0OiByYW5nZS5zdGFydExpbmUgKyAxLFxuICAgICAgICAgIGVuZDogcmFuZ2UuZW5kTGluZSArIDFcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiByYW5nZS5raW5kICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgcmVzdWx0LmtpbmQgPSB0b0ZvbGRpbmdSYW5nZUtpbmQocmFuZ2Uua2luZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuZnVuY3Rpb24gdG9Gb2xkaW5nUmFuZ2VLaW5kKGtpbmQpIHtcbiAgc3dpdGNoIChraW5kKSB7XG4gICAgY2FzZSBGb2xkaW5nUmFuZ2VLaW5kLkNvbW1lbnQ6XG4gICAgICByZXR1cm4gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLkZvbGRpbmdSYW5nZUtpbmQuQ29tbWVudDtcbiAgICBjYXNlIEZvbGRpbmdSYW5nZUtpbmQuSW1wb3J0czpcbiAgICAgIHJldHVybiBtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMuRm9sZGluZ1JhbmdlS2luZC5JbXBvcnRzO1xuICAgIGNhc2UgRm9sZGluZ1JhbmdlS2luZC5SZWdpb246XG4gICAgICByZXR1cm4gbW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLkZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG52YXIgU2VsZWN0aW9uUmFuZ2VBZGFwdGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihfd29ya2VyKSB7XG4gICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgfVxuICBwcm92aWRlU2VsZWN0aW9uUmFuZ2VzKG1vZGVsLCBwb3NpdGlvbnMsIHRva2VuKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbigod29ya2VyKSA9PiB3b3JrZXIuZ2V0U2VsZWN0aW9uUmFuZ2VzKHJlc291cmNlLnRvU3RyaW5nKCksIHBvc2l0aW9ucy5tYXAoZnJvbVBvc2l0aW9uKSkpLnRoZW4oKHNlbGVjdGlvblJhbmdlcykgPT4ge1xuICAgICAgaWYgKCFzZWxlY3Rpb25SYW5nZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGVjdGlvblJhbmdlcy5tYXAoKHNlbGVjdGlvblJhbmdlKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICB3aGlsZSAoc2VsZWN0aW9uUmFuZ2UpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh7IHJhbmdlOiB0b1JhbmdlKHNlbGVjdGlvblJhbmdlLnJhbmdlKSB9KTtcbiAgICAgICAgICBzZWxlY3Rpb25SYW5nZSA9IHNlbGVjdGlvblJhbmdlLnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIHNyYy9sYW5ndWFnZS9jc3MvY3NzTW9kZS50c1xuZnVuY3Rpb24gc2V0dXBNb2RlKGRlZmF1bHRzKSB7XG4gIGNvbnN0IGRpc3Bvc2FibGVzID0gW107XG4gIGNvbnN0IHByb3ZpZGVycyA9IFtdO1xuICBjb25zdCBjbGllbnQgPSBuZXcgV29ya2VyTWFuYWdlcihkZWZhdWx0cyk7XG4gIGRpc3Bvc2FibGVzLnB1c2goY2xpZW50KTtcbiAgY29uc3Qgd29ya2VyID0gKC4uLnVyaXMpID0+IHtcbiAgICByZXR1cm4gY2xpZW50LmdldExhbmd1YWdlU2VydmljZVdvcmtlciguLi51cmlzKTtcbiAgfTtcbiAgZnVuY3Rpb24gcmVnaXN0ZXJQcm92aWRlcnMoKSB7XG4gICAgY29uc3QgeyBsYW5ndWFnZUlkLCBtb2RlQ29uZmlndXJhdGlvbiB9ID0gZGVmYXVsdHM7XG4gICAgZGlzcG9zZUFsbChwcm92aWRlcnMpO1xuICAgIGlmIChtb2RlQ29uZmlndXJhdGlvbi5jb21wbGV0aW9uSXRlbXMpIHtcbiAgICAgIHByb3ZpZGVycy5wdXNoKG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IENvbXBsZXRpb25BZGFwdGVyKHdvcmtlciwgW1wiL1wiLCBcIi1cIiwgXCI6XCJdKSkpO1xuICAgIH1cbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24uaG92ZXJzKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJIb3ZlclByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBIb3ZlckFkYXB0ZXIod29ya2VyKSkpO1xuICAgIH1cbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24uZG9jdW1lbnRIaWdobGlnaHRzKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJEb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIod29ya2VyKSkpO1xuICAgIH1cbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24uZGVmaW5pdGlvbnMpIHtcbiAgICAgIHByb3ZpZGVycy5wdXNoKG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckRlZmluaXRpb25Qcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgRGVmaW5pdGlvbkFkYXB0ZXIod29ya2VyKSkpO1xuICAgIH1cbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24ucmVmZXJlbmNlcykge1xuICAgICAgcHJvdmlkZXJzLnB1c2gobW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyUmVmZXJlbmNlUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IFJlZmVyZW5jZUFkYXB0ZXIod29ya2VyKSkpO1xuICAgIH1cbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24uZG9jdW1lbnRTeW1ib2xzKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJEb2N1bWVudFN5bWJvbFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBEb2N1bWVudFN5bWJvbEFkYXB0ZXIod29ya2VyKSkpO1xuICAgIH1cbiAgICBpZiAobW9kZUNvbmZpZ3VyYXRpb24ucmVuYW1lKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJSZW5hbWVQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgUmVuYW1lQWRhcHRlcih3b3JrZXIpKSk7XG4gICAgfVxuICAgIGlmIChtb2RlQ29uZmlndXJhdGlvbi5jb2xvcnMpIHtcbiAgICAgIHByb3ZpZGVycy5wdXNoKG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckNvbG9yUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IERvY3VtZW50Q29sb3JBZGFwdGVyKHdvcmtlcikpKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLmZvbGRpbmdSYW5nZXMpIHtcbiAgICAgIHByb3ZpZGVycy5wdXNoKG1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzLmxhbmd1YWdlcy5yZWdpc3RlckZvbGRpbmdSYW5nZVByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBGb2xkaW5nUmFuZ2VBZGFwdGVyKHdvcmtlcikpKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLmRpYWdub3N0aWNzKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChuZXcgRGlhZ25vc3RpY3NBZGFwdGVyKGxhbmd1YWdlSWQsIHdvcmtlciwgZGVmYXVsdHMub25EaWRDaGFuZ2UpKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLnNlbGVjdGlvblJhbmdlcykge1xuICAgICAgcHJvdmlkZXJzLnB1c2gobW9uYWNvX2VkaXRvcl9jb3JlX2V4cG9ydHMubGFuZ3VhZ2VzLnJlZ2lzdGVyU2VsZWN0aW9uUmFuZ2VQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgU2VsZWN0aW9uUmFuZ2VBZGFwdGVyKHdvcmtlcikpKTtcbiAgICB9XG4gICAgaWYgKG1vZGVDb25maWd1cmF0aW9uLmRvY3VtZW50Rm9ybWF0dGluZ0VkaXRzKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IERvY3VtZW50Rm9ybWF0dGluZ0VkaXRQcm92aWRlcih3b3JrZXIpKSk7XG4gICAgfVxuICAgIGlmIChtb2RlQ29uZmlndXJhdGlvbi5kb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRzKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChtb25hY29fZWRpdG9yX2NvcmVfZXhwb3J0cy5sYW5ndWFnZXMucmVnaXN0ZXJEb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIod29ya2VyKSkpO1xuICAgIH1cbiAgfVxuICByZWdpc3RlclByb3ZpZGVycygpO1xuICBkaXNwb3NhYmxlcy5wdXNoKGFzRGlzcG9zYWJsZShwcm92aWRlcnMpKTtcbiAgcmV0dXJuIGFzRGlzcG9zYWJsZShkaXNwb3NhYmxlcyk7XG59XG5mdW5jdGlvbiBhc0Rpc3Bvc2FibGUoZGlzcG9zYWJsZXMpIHtcbiAgcmV0dXJuIHsgZGlzcG9zZTogKCkgPT4gZGlzcG9zZUFsbChkaXNwb3NhYmxlcykgfTtcbn1cbmZ1bmN0aW9uIGRpc3Bvc2VBbGwoZGlzcG9zYWJsZXMpIHtcbiAgd2hpbGUgKGRpc3Bvc2FibGVzLmxlbmd0aCkge1xuICAgIGRpc3Bvc2FibGVzLnBvcCgpLmRpc3Bvc2UoKTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgQ29tcGxldGlvbkFkYXB0ZXIsXG4gIERlZmluaXRpb25BZGFwdGVyLFxuICBEaWFnbm9zdGljc0FkYXB0ZXIsXG4gIERvY3VtZW50Q29sb3JBZGFwdGVyLFxuICBEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIsXG4gIERvY3VtZW50SGlnaGxpZ2h0QWRhcHRlcixcbiAgRG9jdW1lbnRMaW5rQWRhcHRlcixcbiAgRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIsXG4gIERvY3VtZW50U3ltYm9sQWRhcHRlcixcbiAgRm9sZGluZ1JhbmdlQWRhcHRlcixcbiAgSG92ZXJBZGFwdGVyLFxuICBSZWZlcmVuY2VBZGFwdGVyLFxuICBSZW5hbWVBZGFwdGVyLFxuICBTZWxlY3Rpb25SYW5nZUFkYXB0ZXIsXG4gIFdvcmtlck1hbmFnZXIsXG4gIGZyb21Qb3NpdGlvbixcbiAgZnJvbVJhbmdlLFxuICBzZXR1cE1vZGUsXG4gIHRvUmFuZ2UsXG4gIHRvVGV4dEVkaXRcbn07XG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiZ2V0IiwiZW51bWVyYWJsZSIsIm1vbmFjb19lZGl0b3JfY29yZV9leHBvcnRzIiwiaW50ZWdlciIsImludGVnZXIyIiwidWludGVnZXIiLCJ1aW50ZWdlcjIiLCJQb3NpdGlvbiIsIlBvc2l0aW9uMyIsIlJhbmdlIiwiUmFuZ2UzIiwiTG9jYXRpb24iLCJMb2NhdGlvbjIiLCJMb2NhdGlvbkxpbmsiLCJMb2NhdGlvbkxpbmsyIiwiQ29sb3IiLCJDb2xvcjIiLCJDb2xvckluZm9ybWF0aW9uIiwiQ29sb3JJbmZvcm1hdGlvbjIiLCJDb2xvclByZXNlbnRhdGlvbiIsIkNvbG9yUHJlc2VudGF0aW9uMiIsIkZvbGRpbmdSYW5nZUtpbmQiLCJGb2xkaW5nUmFuZ2VLaW5kMiIsIkZvbGRpbmdSYW5nZSIsIkZvbGRpbmdSYW5nZTIiLCJEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uIiwiRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbjIiLCJEaWFnbm9zdGljU2V2ZXJpdHkiLCJEaWFnbm9zdGljU2V2ZXJpdHkyIiwiRGlhZ25vc3RpY1RhZyIsIkRpYWdub3N0aWNUYWcyIiwiQ29kZURlc2NyaXB0aW9uIiwiRGlhZ25vc3RpYyIsIkRpYWdub3N0aWMyIiwiQ29tbWFuZCIsIkNvbW1hbmQyIiwiVGV4dEVkaXQiLCJUZXh0RWRpdDIiLCJDaGFuZ2VBbm5vdGF0aW9uIiwiQ2hhbmdlQW5ub3RhdGlvbjIiLCJDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllciIsIkFubm90YXRlZFRleHRFZGl0IiwiQW5ub3RhdGVkVGV4dEVkaXQyIiwiVGV4dERvY3VtZW50RWRpdCIsIlRleHREb2N1bWVudEVkaXQyIiwiQ3JlYXRlRmlsZSIsIkNyZWF0ZUZpbGUyIiwiUmVuYW1lRmlsZSIsIlJlbmFtZUZpbGUyIiwiRGVsZXRlRmlsZSIsIkRlbGV0ZUZpbGUyIiwiV29ya3NwYWNlRWRpdCIsIldvcmtlck1hbmFnZXIiLCJfZGVmYXVsdHMiLCJfaWRsZUNoZWNrSW50ZXJ2YWwiLCJfbGFzdFVzZWRUaW1lIiwiX2NvbmZpZ0NoYW5nZUxpc3RlbmVyIiwiX3dvcmtlciIsIl9jbGllbnQiLCJjb25zdHJ1Y3RvciIsImRlZmF1bHRzIiwidGhpcyIsIndpbmRvdyIsInNldEludGVydmFsIiwiX2NoZWNrSWZJZGxlIiwib25EaWRDaGFuZ2UiLCJfc3RvcFdvcmtlciIsImRpc3Bvc2UiLCJjbGVhckludGVydmFsIiwiRGF0ZSIsIm5vdyIsIl9nZXRDbGllbnQiLCJlZGl0b3IiLCJjcmVhdGVXZWJXb3JrZXIiLCJtb2R1bGVJZCIsImxhYmVsIiwibGFuZ3VhZ2VJZCIsImNyZWF0ZURhdGEiLCJvcHRpb25zIiwiZ2V0UHJveHkiLCJnZXRMYW5ndWFnZVNlcnZpY2VXb3JrZXIiLCJyZXNvdXJjZXMiLCJ0aGVuIiwiY2xpZW50IiwiXyIsIndpdGhTeW5jZWRSZXNvdXJjZXMiLCJNSU5fVkFMVUUiLCJNQVhfVkFMVUUiLCJjcmVhdGUiLCJsaW5lIiwiY2hhcmFjdGVyIiwiTnVtYmVyIiwiaXMiLCJ2YWx1ZSIsImNhbmRpZGF0ZSIsIklzIiwib2JqZWN0TGl0ZXJhbCIsIm9uZSIsInR3byIsInRocmVlIiwiZm91ciIsInN0YXJ0IiwiZW5kIiwiRXJyb3IiLCJ1cmkiLCJyYW5nZSIsImRlZmluZWQiLCJzdHJpbmciLCJ1bmRlZmluZWQiLCJ0YXJnZXRVcmkiLCJ0YXJnZXRSYW5nZSIsInRhcmdldFNlbGVjdGlvblJhbmdlIiwib3JpZ2luU2VsZWN0aW9uUmFuZ2UiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJhbHBoYSIsIm51bWJlclJhbmdlIiwiY29sb3IiLCJ0ZXh0RWRpdCIsImFkZGl0aW9uYWxUZXh0RWRpdHMiLCJ0eXBlZEFycmF5Iiwic3RhcnRMaW5lIiwiZW5kTGluZSIsInN0YXJ0Q2hhcmFjdGVyIiwiZW5kQ2hhcmFjdGVyIiwia2luZCIsInJlc3VsdCIsImxvY2F0aW9uIiwibWVzc2FnZSIsIldhcm5pbmciLCJJbmZvcm1hdGlvbiIsIkhpbnQiLCJVbm5lY2Vzc2FyeSIsIkRlcHJlY2F0ZWQiLCJocmVmIiwic2V2ZXJpdHkiLCJjb2RlIiwic291cmNlIiwicmVsYXRlZEluZm9ybWF0aW9uIiwiX2EiLCJudW1iZXIiLCJjb2RlRGVzY3JpcHRpb24iLCJ0aXRsZSIsImNvbW1hbmQiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyZXBsYWNlIiwibmV3VGV4dCIsImluc2VydCIsInBvc2l0aW9uIiwiZGVsIiwibmVlZHNDb25maXJtYXRpb24iLCJkZXNjcmlwdGlvbiIsImJvb2xlYW4iLCJhbm5vdGF0aW9uIiwiYW5ub3RhdGlvbklkIiwidGV4dERvY3VtZW50IiwiZWRpdHMiLCJPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIiLCJBcnJheSIsImlzQXJyYXkiLCJvdmVyd3JpdGUiLCJpZ25vcmVJZkV4aXN0cyIsIm9sZFVyaSIsIm5ld1VyaSIsInJlY3Vyc2l2ZSIsImlnbm9yZUlmTm90RXhpc3RzIiwiY2hhbmdlcyIsImRvY3VtZW50Q2hhbmdlcyIsImV2ZXJ5IiwiY2hhbmdlIiwiVGV4dERvY3VtZW50SWRlbnRpZmllciIsIlRleHREb2N1bWVudElkZW50aWZpZXIyIiwiVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciIsIlZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIyIiwiT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyMiIsIlRleHREb2N1bWVudEl0ZW0iLCJUZXh0RG9jdW1lbnRJdGVtMiIsIk1hcmt1cEtpbmQiLCJNYXJrdXBLaW5kMiIsIk1hcmt1cENvbnRlbnQiLCJDb21wbGV0aW9uSXRlbUtpbmQiLCJDb21wbGV0aW9uSXRlbUtpbmQyIiwiSW5zZXJ0VGV4dEZvcm1hdCIsIkluc2VydFRleHRGb3JtYXQyIiwiQ29tcGxldGlvbkl0ZW1UYWciLCJJbnNlcnRSZXBsYWNlRWRpdCIsIkluc2VydFJlcGxhY2VFZGl0MiIsIkluc2VydFRleHRNb2RlIiwiSW5zZXJ0VGV4dE1vZGUyIiwiQ29tcGxldGlvbkl0ZW0iLCJDb21wbGV0aW9uTGlzdCIsIk1hcmtlZFN0cmluZyIsIk1hcmtlZFN0cmluZzIiLCJIb3ZlciIsIlBhcmFtZXRlckluZm9ybWF0aW9uIiwiU2lnbmF0dXJlSW5mb3JtYXRpb24iLCJEb2N1bWVudEhpZ2hsaWdodEtpbmQiLCJEb2N1bWVudEhpZ2hsaWdodEtpbmQyIiwiRG9jdW1lbnRIaWdobGlnaHQiLCJTeW1ib2xLaW5kIiwiU3ltYm9sS2luZDIiLCJTeW1ib2xUYWciLCJTeW1ib2xJbmZvcm1hdGlvbiIsIkRvY3VtZW50U3ltYm9sIiwiRG9jdW1lbnRTeW1ib2wyIiwiQ29kZUFjdGlvbktpbmQiLCJDb2RlQWN0aW9uS2luZDIiLCJDb2RlQWN0aW9uQ29udGV4dCIsIkNvZGVBY3Rpb25Db250ZXh0MiIsIkNvZGVBY3Rpb24iLCJDb2RlQWN0aW9uMiIsIkNvZGVMZW5zIiwiQ29kZUxlbnMyIiwiRm9ybWF0dGluZ09wdGlvbnMiLCJGb3JtYXR0aW5nT3B0aW9uczIiLCJEb2N1bWVudExpbmsiLCJEb2N1bWVudExpbmsyIiwiU2VsZWN0aW9uUmFuZ2UiLCJTZWxlY3Rpb25SYW5nZTIiLCJUZXh0RG9jdW1lbnQiLCJUZXh0RWRpdENoYW5nZUltcGwiLCJUZXh0RWRpdENoYW5nZUltcGwyIiwiY2hhbmdlQW5ub3RhdGlvbnMiLCJlZGl0IiwiaWQiLCJhc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyIsIm1hbmFnZSIsInB1c2giLCJkZWxldGUiLCJhZGQiLCJhbGwiLCJjbGVhciIsInNwbGljZSIsIkNoYW5nZUFubm90YXRpb25zIiwiQ2hhbmdlQW5ub3RhdGlvbnMyIiwiYW5ub3RhdGlvbnMiLCJfYW5ub3RhdGlvbnMiLCJfY291bnRlciIsIl9zaXplIiwiY29uZmlndXJhYmxlIiwiaWRPckFubm90YXRpb24iLCJuZXh0SWQiLCJ0b1N0cmluZyIsIldvcmtzcGFjZUNoYW5nZTIiLCJ3b3Jrc3BhY2VFZGl0IiwiX3RoaXMiLCJfdGV4dEVkaXRDaGFuZ2VzIiwiX3dvcmtzcGFjZUVkaXQiLCJfY2hhbmdlQW5ub3RhdGlvbnMiLCJmb3JFYWNoIiwidGV4dEVkaXRDaGFuZ2UiLCJrZXlzIiwiaW5pdERvY3VtZW50Q2hhbmdlcyIsInNpemUiLCJnZXRUZXh0RWRpdENoYW5nZSIsInZlcnNpb24iLCJ0ZXh0RG9jdW1lbnRFZGl0IiwiaW5pdENoYW5nZXMiLCJjcmVhdGVGaWxlIiwib3B0aW9uc09yQW5ub3RhdGlvbiIsIm9wZXJhdGlvbiIsInJlbmFtZUZpbGUiLCJkZWxldGVGaWxlIiwidGV4dCIsIlBsYWluVGV4dCIsIk1hcmtkb3duIiwiVGV4dCIsIk1ldGhvZCIsIkZ1bmN0aW9uIiwiQ29uc3RydWN0b3IiLCJGaWVsZCIsIlZhcmlhYmxlIiwiQ2xhc3MiLCJJbnRlcmZhY2UiLCJNb2R1bGUiLCJQcm9wZXJ0eSIsIlVuaXQiLCJWYWx1ZSIsIkVudW0iLCJLZXl3b3JkIiwiU25pcHBldCIsIkZpbGUiLCJSZWZlcmVuY2UiLCJGb2xkZXIiLCJFbnVtTWVtYmVyIiwiQ29uc3RhbnQiLCJTdHJ1Y3QiLCJFdmVudCIsIk9wZXJhdG9yIiwiVHlwZVBhcmFtZXRlciIsImFzSXMiLCJhZGp1c3RJbmRlbnRhdGlvbiIsIml0ZW1zIiwiaXNJbmNvbXBsZXRlIiwiZnJvbVBsYWluVGV4dCIsInBsYWluVGV4dCIsImxhbmd1YWdlIiwiY29udGVudHMiLCJkb2N1bWVudGF0aW9uIiwicGFyYW1ldGVycyIsIlJlYWQiLCJXcml0ZSIsIk5hbWVzcGFjZSIsIlBhY2thZ2UiLCJTdHJpbmciLCJCb29sZWFuIiwiS2V5IiwiTnVsbCIsIm5hbWUiLCJjb250YWluZXJOYW1lIiwiZGV0YWlsIiwic2VsZWN0aW9uUmFuZ2UiLCJjaGlsZHJlbiIsImRlcHJlY2F0ZWQiLCJ0YWdzIiwiRW1wdHkiLCJRdWlja0ZpeCIsIlJlZmFjdG9yIiwiUmVmYWN0b3JFeHRyYWN0IiwiUmVmYWN0b3JJbmxpbmUiLCJSZWZhY3RvclJld3JpdGUiLCJTb3VyY2UiLCJTb3VyY2VPcmdhbml6ZUltcG9ydHMiLCJTb3VyY2VGaXhBbGwiLCJkaWFnbm9zdGljcyIsIm9ubHkiLCJraW5kT3JDb21tYW5kT3JFZGl0IiwiY2hlY2tLaW5kIiwiaXNQcmVmZXJyZWQiLCJkYXRhIiwidGFiU2l6ZSIsImluc2VydFNwYWNlcyIsInRhcmdldCIsInBhcmVudCIsIlRleHREb2N1bWVudDIiLCJtZXJnZVNvcnQiLCJjb21wYXJlIiwicCIsImxlZnQiLCJzbGljZSIsInJpZ2h0IiwibGVmdElkeCIsInJpZ2h0SWR4IiwiaSIsInJldCIsImNvbnRlbnQiLCJGdWxsVGV4dERvY3VtZW50IiwibGluZUNvdW50IiwiZnVuYyIsImdldFRleHQiLCJwb3NpdGlvbkF0Iiwib2Zmc2V0QXQiLCJhcHBseUVkaXRzIiwiZG9jdW1lbnQiLCJzb3J0ZWRFZGl0cyIsImEiLCJiIiwiZGlmZiIsImxhc3RNb2RpZmllZE9mZnNldCIsImUiLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsInN1YnN0cmluZyIsIklzMiIsIkZ1bGxUZXh0RG9jdW1lbnQyIiwiX3VyaSIsIl9sYW5ndWFnZUlkIiwiX3ZlcnNpb24iLCJfY29udGVudCIsIl9saW5lT2Zmc2V0cyIsInVwZGF0ZSIsImV2ZW50IiwiZ2V0TGluZU9mZnNldHMiLCJsaW5lT2Zmc2V0cyIsImlzTGluZVN0YXJ0IiwiY2giLCJjaGFyQXQiLCJvZmZzZXQiLCJNYXRoIiwibWF4IiwibWluIiwibG93IiwiaGlnaCIsIm1pZCIsImZsb29yIiwibGluZU9mZnNldCIsIm5leHRMaW5lT2Zmc2V0IiwiY2hlY2siLCJEaWFnbm9zdGljc0FkYXB0ZXIiLCJjb25maWdDaGFuZ2VFdmVudCIsIm9uTW9kZWxBZGQiLCJtb2RlbCIsImhhbmRsZSIsIm1vZGVJZCIsImdldExhbmd1YWdlSWQiLCJfbGlzdGVuZXIiLCJvbkRpZENoYW5nZUNvbnRlbnQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiX2RvVmFsaWRhdGUiLCJvbk1vZGVsUmVtb3ZlZCIsInNldE1vZGVsTWFya2VycyIsInVyaVN0ciIsImxpc3RlbmVyIiwiX2Rpc3Bvc2FibGVzIiwib25EaWRDcmVhdGVNb2RlbCIsIm9uV2lsbERpc3Bvc2VNb2RlbCIsIm9uRGlkQ2hhbmdlTW9kZWxMYW5ndWFnZSIsImdldE1vZGVscyIsImQiLCJyZXNvdXJjZSIsIndvcmtlciIsImRvVmFsaWRhdGlvbiIsIm1hcmtlcnMiLCJtYXAiLCJkaWFnIiwidG9TZXZlcml0eSIsInN0YXJ0TGluZU51bWJlciIsInN0YXJ0Q29sdW1uIiwiZW5kTGluZU51bWJlciIsImVuZENvbHVtbiIsInRvRGlhZ25vc3RpY3MiLCJnZXRNb2RlbCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImxzU2V2ZXJpdHkiLCJNYXJrZXJTZXZlcml0eSIsIkluZm8iLCJDb21wbGV0aW9uQWRhcHRlciIsIl90cmlnZ2VyQ2hhcmFjdGVycyIsInRyaWdnZXJDaGFyYWN0ZXJzIiwicHJvdmlkZUNvbXBsZXRpb25JdGVtcyIsImNvbnRleHQiLCJ0b2tlbiIsImRvQ29tcGxldGUiLCJmcm9tUG9zaXRpb24iLCJpbmZvIiwid29yZEluZm8iLCJnZXRXb3JkVW50aWxQb3NpdGlvbiIsIndvcmRSYW5nZSIsImxpbmVOdW1iZXIiLCJlbnRyeSIsIml0ZW0iLCJpbnNlcnRUZXh0Iiwic29ydFRleHQiLCJmaWx0ZXJUZXh0IiwiYyIsInRvQ29tcGxldGlvbkl0ZW1LaW5kIiwidG9SYW5nZSIsInRvVGV4dEVkaXQiLCJpbnNlcnRUZXh0Rm9ybWF0IiwiaW5zZXJ0VGV4dFJ1bGVzIiwibGFuZ3VhZ2VzIiwiQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZSIsIkluc2VydEFzU25pcHBldCIsInN1Z2dlc3Rpb25zIiwiY29sdW1uIiwiZnJvbVJhbmdlIiwibUl0ZW1LaW5kIiwiSG92ZXJBZGFwdGVyIiwicHJvdmlkZUhvdmVyIiwiZG9Ib3ZlciIsInRvTWFya2VkU3RyaW5nQXJyYXkiLCJ0b01hcmtkb3duU3RyaW5nIiwidGhpbmciLCJEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIiLCJwcm92aWRlRG9jdW1lbnRIaWdobGlnaHRzIiwiZmluZERvY3VtZW50SGlnaGxpZ2h0cyIsImVudHJpZXMiLCJ0b0RvY3VtZW50SGlnaGxpZ2h0S2luZCIsIkRlZmluaXRpb25BZGFwdGVyIiwicHJvdmlkZURlZmluaXRpb24iLCJmaW5kRGVmaW5pdGlvbiIsImRlZmluaXRpb24iLCJ0b0xvY2F0aW9uIiwiVXJpIiwicGFyc2UiLCJSZWZlcmVuY2VBZGFwdGVyIiwicHJvdmlkZVJlZmVyZW5jZXMiLCJmaW5kUmVmZXJlbmNlcyIsIlJlbmFtZUFkYXB0ZXIiLCJwcm92aWRlUmVuYW1lRWRpdHMiLCJuZXdOYW1lIiwiZG9SZW5hbWUiLCJyZXNvdXJjZUVkaXRzIiwidmVyc2lvbklkIiwidG9Xb3Jrc3BhY2VFZGl0IiwiRG9jdW1lbnRTeW1ib2xBZGFwdGVyIiwicHJvdmlkZURvY3VtZW50U3ltYm9scyIsImZpbmREb2N1bWVudFN5bWJvbHMiLCJ0b1N5bWJvbEtpbmQiLCJtS2luZCIsIkRvY3VtZW50TGlua0FkYXB0ZXIiLCJwcm92aWRlTGlua3MiLCJmaW5kRG9jdW1lbnRMaW5rcyIsImxpbmtzIiwidXJsIiwiRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyIiwicHJvdmlkZURvY3VtZW50Rm9ybWF0dGluZ0VkaXRzIiwiZm9ybWF0IiwiZnJvbUZvcm1hdHRpbmdPcHRpb25zIiwiRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIiLCJwcm92aWRlRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0cyIsIkRvY3VtZW50Q29sb3JBZGFwdGVyIiwicHJvdmlkZURvY3VtZW50Q29sb3JzIiwiZmluZERvY3VtZW50Q29sb3JzIiwiaW5mb3MiLCJwcm92aWRlQ29sb3JQcmVzZW50YXRpb25zIiwiZ2V0Q29sb3JQcmVzZW50YXRpb25zIiwicHJlc2VudGF0aW9ucyIsInByZXNlbnRhdGlvbiIsIkZvbGRpbmdSYW5nZUFkYXB0ZXIiLCJwcm92aWRlRm9sZGluZ1JhbmdlcyIsImdldEZvbGRpbmdSYW5nZXMiLCJyYW5nZXMiLCJDb21tZW50IiwiSW1wb3J0cyIsIlJlZ2lvbiIsInRvRm9sZGluZ1JhbmdlS2luZCIsIlNlbGVjdGlvblJhbmdlQWRhcHRlciIsInByb3ZpZGVTZWxlY3Rpb25SYW5nZXMiLCJwb3NpdGlvbnMiLCJnZXRTZWxlY3Rpb25SYW5nZXMiLCJzZWxlY3Rpb25SYW5nZXMiLCJzZXR1cE1vZGUiLCJkaXNwb3NhYmxlcyIsInByb3ZpZGVycyIsInVyaXMiLCJtb2RlQ29uZmlndXJhdGlvbiIsImRpc3Bvc2VBbGwiLCJjb21wbGV0aW9uSXRlbXMiLCJyZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIiLCJob3ZlcnMiLCJyZWdpc3RlckhvdmVyUHJvdmlkZXIiLCJkb2N1bWVudEhpZ2hsaWdodHMiLCJyZWdpc3RlckRvY3VtZW50SGlnaGxpZ2h0UHJvdmlkZXIiLCJkZWZpbml0aW9ucyIsInJlZ2lzdGVyRGVmaW5pdGlvblByb3ZpZGVyIiwicmVmZXJlbmNlcyIsInJlZ2lzdGVyUmVmZXJlbmNlUHJvdmlkZXIiLCJkb2N1bWVudFN5bWJvbHMiLCJyZWdpc3RlckRvY3VtZW50U3ltYm9sUHJvdmlkZXIiLCJyZW5hbWUiLCJyZWdpc3RlclJlbmFtZVByb3ZpZGVyIiwiY29sb3JzIiwicmVnaXN0ZXJDb2xvclByb3ZpZGVyIiwiZm9sZGluZ1JhbmdlcyIsInJlZ2lzdGVyRm9sZGluZ1JhbmdlUHJvdmlkZXIiLCJyZWdpc3RlclNlbGVjdGlvblJhbmdlUHJvdmlkZXIiLCJkb2N1bWVudEZvcm1hdHRpbmdFZGl0cyIsInJlZ2lzdGVyRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyIiwiZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0cyIsInJlZ2lzdGVyRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIiLCJyZWdpc3RlclByb3ZpZGVycyIsImFzRGlzcG9zYWJsZSIsInBvcCJdLCJzb3VyY2VSb290IjoiIn0=