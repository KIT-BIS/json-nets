{
    "name": "scope3tool",
    "defaultUIAssistMode": "assisted",
    "defaultTransitionType": "activity",
    "defaultPlaceType": "scope1",
    "allowAutoLayout": false,
    "visualisationConfig": {
        "show": true
    },
    "examples": [
        {
            "name": "Kamera",
            "net": {
                "typeData": {
                    "placeTypes": {
                        "c49b0296-19cf-4857-90c0-3f93b638b877": "start",
                        "f1f4dfea-5277-4c6a-88f2-b76d3a12ce5d": "control",
                        "cd4b6f24-d1b8-458d-815a-5dece4b147ac": "end",
                        "bd54b190-4747-4b82-a2b0-0b4851681059": "control"
                    },
                    "transitionTypes": {
                        "9ab06d0d-29d3-4580-bf44-8e36194e65f1": "activity",
                        "7f9900f0-7d76-4067-b22e-391bdd91a101": "activity",
                        "a8940d72-5eff-49ae-98f3-ac64e086ff8d": "activity"
                    }
                },
                "netData": {
                    "places": [
                        {
                            "id": "c49b0296-19cf-4857-90c0-3f93b638b877",
                            "name": "Start",
                            "marking": [
                                {
                                    "amount": 1,
                                    "ghgFactor": 0,
                                    "scope": "start",
                                    "pds": 0
                                }
                            ],
                            "schema": {
                                "type": "array",
                                "title": "start",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "c49b0296-19cf-4857-90c0-3f93b638b877"
                            }
                        },
                        {
                            "id": "f1f4dfea-5277-4c6a-88f2-b76d3a12ce5d",
                            "name": "p1",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "f1f4dfea-5277-4c6a-88f2-b76d3a12ce5d"
                            }
                        },
                        {
                            "id": "cd4b6f24-d1b8-458d-815a-5dece4b147ac",
                            "name": "Kamera",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "end",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "cd4b6f24-d1b8-458d-815a-5dece4b147ac"
                            }
                        },
                        {
                            "id": "bd54b190-4747-4b82-a2b0-0b4851681059",
                            "name": "p2",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "bd54b190-4747-4b82-a2b0-0b4851681059"
                            }
                        }
                    ],
                    "transitions": [
                        {
                            "id": "9ab06d0d-29d3-4580-bf44-8e36194e65f1",
                            "name": "Montage",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p1_key": "local output_p1_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p1_value": "local output_p1_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "7f9900f0-7d76-4067-b22e-391bdd91a101",
                            "name": "Reinigung",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p2_key": "local output_p2_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p2_value": "local output_p2_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "a8940d72-5eff-49ae-98f3-ac64e086ff8d",
                            "name": "Prüfung",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_kamera_key": "local output_kamera_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_kamera_value": "local output_kamera_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        }
                    ],
                    "arcs": [
                        {
                            "id": "2fec368f-9bd4-41f2-bfb6-fd0901c9d325",
                            "filter": "$.*",
                            "fromId": "c49b0296-19cf-4857-90c0-3f93b638b877",
                            "toId": "9ab06d0d-29d3-4580-bf44-8e36194e65f1"
                        },
                        {
                            "id": "03a523fd-aa6c-4f9e-aebc-b30acdb1dc04",
                            "filter": "$",
                            "fromId": "9ab06d0d-29d3-4580-bf44-8e36194e65f1",
                            "toId": "f1f4dfea-5277-4c6a-88f2-b76d3a12ce5d"
                        },
                        {
                            "id": "6b836a80-ac07-4b53-b0ee-7367cb417425",
                            "filter": "$.*",
                            "fromId": "f1f4dfea-5277-4c6a-88f2-b76d3a12ce5d",
                            "toId": "7f9900f0-7d76-4067-b22e-391bdd91a101"
                        },
                        {
                            "id": "3e4a241e-f6b4-49fd-963a-485682dee440",
                            "filter": "$",
                            "fromId": "7f9900f0-7d76-4067-b22e-391bdd91a101",
                            "toId": "bd54b190-4747-4b82-a2b0-0b4851681059"
                        },
                        {
                            "id": "aee2a50a-3045-49ff-9a60-2a4bede9ba1d",
                            "filter": "$.*",
                            "fromId": "bd54b190-4747-4b82-a2b0-0b4851681059",
                            "toId": "a8940d72-5eff-49ae-98f3-ac64e086ff8d"
                        },
                        {
                            "id": "12e6cf18-84f2-41cd-bff2-1a211d93754d",
                            "filter": "$",
                            "fromId": "a8940d72-5eff-49ae-98f3-ac64e086ff8d",
                            "toId": "cd4b6f24-d1b8-458d-815a-5dece4b147ac"
                        }
                    ]
                },
                "layoutData": {
                    "cells": [
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 348,
                                "y": 360
                            },
                            "angle": 0,
                            "id": "9ab06d0d-29d3-4580-bf44-8e36194e65f1",
                            "jsonnetsType": "transition",
                            "z": 1,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Montage"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 696,
                                "y": 360
                            },
                            "angle": 0,
                            "id": "7f9900f0-7d76-4067-b22e-391bdd91a101",
                            "jsonnetsType": "transition",
                            "z": 2,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Reinigung"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 1032,
                                "y": 360
                            },
                            "angle": 0,
                            "id": "a8940d72-5eff-49ae-98f3-ac64e086ff8d",
                            "jsonnetsType": "transition",
                            "z": 3,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Prüfung"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 204,
                                "y": 360
                            },
                            "angle": 0,
                            "tokens": 1,
                            "id": "c49b0296-19cf-4857-90c0-3f93b638b877",
                            "jsonnetsType": "place",
                            "z": 4,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Start"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 552,
                                "y": 360
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "f1f4dfea-5277-4c6a-88f2-b76d3a12ce5d",
                            "jsonnetsType": "place",
                            "z": 5,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p1"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 1248,
                                "y": 360
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "cd4b6f24-d1b8-458d-815a-5dece4b147ac",
                            "jsonnetsType": "place",
                            "z": 6,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Kamera"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 900,
                                "y": 360
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "bd54b190-4747-4b82-a2b0-0b4851681059",
                            "jsonnetsType": "place",
                            "z": 7,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p2"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "c49b0296-19cf-4857-90c0-3f93b638b877",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "9ab06d0d-29d3-4580-bf44-8e36194e65f1",
                                "selector": ".root"
                            },
                            "id": "2fec368f-9bd4-41f2-bfb6-fd0901c9d325",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 8,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "9ab06d0d-29d3-4580-bf44-8e36194e65f1",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "f1f4dfea-5277-4c6a-88f2-b76d3a12ce5d",
                                "selector": ".root"
                            },
                            "id": "03a523fd-aa6c-4f9e-aebc-b30acdb1dc04",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 9,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "f1f4dfea-5277-4c6a-88f2-b76d3a12ce5d",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "7f9900f0-7d76-4067-b22e-391bdd91a101",
                                "selector": ".root"
                            },
                            "id": "6b836a80-ac07-4b53-b0ee-7367cb417425",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 10,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "7f9900f0-7d76-4067-b22e-391bdd91a101",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "bd54b190-4747-4b82-a2b0-0b4851681059",
                                "selector": ".root"
                            },
                            "id": "3e4a241e-f6b4-49fd-963a-485682dee440",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 11,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "bd54b190-4747-4b82-a2b0-0b4851681059",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "a8940d72-5eff-49ae-98f3-ac64e086ff8d",
                                "selector": ".root"
                            },
                            "id": "aee2a50a-3045-49ff-9a60-2a4bede9ba1d",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 12,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "a8940d72-5eff-49ae-98f3-ac64e086ff8d",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "cd4b6f24-d1b8-458d-815a-5dece4b147ac",
                                "selector": ".root"
                            },
                            "id": "12e6cf18-84f2-41cd-bff2-1a211d93754d",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 13,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "name": "Chip",
            "net": {
                "typeData": {
                    "placeTypes": {
                        "1ccfb8d3-f7b8-415c-acbb-87313e9241b3": "start",
                        "626ede19-6726-45bf-b355-341f3b2d290e": "control",
                        "c1f857bb-220a-4ea0-aa0e-82a8dae72243": "control",
                        "6437bc37-738c-4d32-8c31-5d21821116aa": "control",
                        "84c18531-ecc9-4595-a717-71ab141e17af": "control",
                        "4ce5f483-ed78-4c30-bd67-5f7f161541e7": "control",
                        "54473421-8f35-47de-b64a-bc7ae45a2ea6": "control",
                        "58d13880-c38c-4a0f-8a41-642bf69009e0": "control",
                        "74a6a016-cdc3-4a3f-833c-6561d5e8dc08": "control",
                        "0256c4d8-833a-4318-9d4b-9f1c1cd46565": "control",
                        "a6d0ebbc-4df6-4c67-bae7-a5b3f38b1454": "end",
                        "2c8c59c6-eddf-44c8-885c-f1434af4360c": "scope2"
                    },
                    "transitionTypes": {
                        "589f4456-a1c2-47b9-b8a9-7502d40447ad": "activity",
                        "00bf5b16-edf5-49aa-be39-5702f0657392": "activity",
                        "c4b7aad3-0472-4528-8324-95557d8a5f23": "activity",
                        "3388253a-bd47-4743-a84e-57e33bb2dd69": "activity",
                        "6649229c-dc74-49b3-81c4-16bcaf2df2de": "activity",
                        "7211dcc4-5212-4b32-b057-ea94869b20ee": "activity",
                        "9abe5df7-814c-4395-b25b-dd529fbf423f": "activity",
                        "09de952b-e9b9-484e-b277-ec53b1b18d8b": "activity",
                        "09a0982b-c37a-432b-9636-05548b0b683b": "activity",
                        "123cd5e5-f7f2-462f-8a2c-4b7d9a926b04": "activity"
                    }
                },
                "netData": {
                    "places": [
                        {
                            "id": "1ccfb8d3-f7b8-415c-acbb-87313e9241b3",
                            "name": "Start",
                            "marking": [
                                {
                                    "amount": 1,
                                    "ghgFactor": 0,
                                    "scope": "start",
                                    "pds": 0
                                }
                            ],
                            "schema": {
                                "type": "array",
                                "title": "start",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "1ccfb8d3-f7b8-415c-acbb-87313e9241b3"
                            }
                        },
                        {
                            "id": "626ede19-6726-45bf-b355-341f3b2d290e",
                            "name": "p1",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "626ede19-6726-45bf-b355-341f3b2d290e"
                            }
                        },
                        {
                            "id": "c1f857bb-220a-4ea0-aa0e-82a8dae72243",
                            "name": "p2",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "c1f857bb-220a-4ea0-aa0e-82a8dae72243"
                            }
                        },
                        {
                            "id": "6437bc37-738c-4d32-8c31-5d21821116aa",
                            "name": "p3",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "6437bc37-738c-4d32-8c31-5d21821116aa"
                            }
                        },
                        {
                            "id": "84c18531-ecc9-4595-a717-71ab141e17af",
                            "name": "p4",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "84c18531-ecc9-4595-a717-71ab141e17af"
                            }
                        },
                        {
                            "id": "4ce5f483-ed78-4c30-bd67-5f7f161541e7",
                            "name": "p5",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "4ce5f483-ed78-4c30-bd67-5f7f161541e7"
                            }
                        },
                        {
                            "id": "54473421-8f35-47de-b64a-bc7ae45a2ea6",
                            "name": "p6",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "54473421-8f35-47de-b64a-bc7ae45a2ea6"
                            }
                        },
                        {
                            "id": "58d13880-c38c-4a0f-8a41-642bf69009e0",
                            "name": "p7",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "58d13880-c38c-4a0f-8a41-642bf69009e0"
                            }
                        },
                        {
                            "id": "74a6a016-cdc3-4a3f-833c-6561d5e8dc08",
                            "name": "p8",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "74a6a016-cdc3-4a3f-833c-6561d5e8dc08"
                            }
                        },
                        {
                            "id": "a6d0ebbc-4df6-4c67-bae7-a5b3f38b1454",
                            "name": "Chip",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "end",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "a6d0ebbc-4df6-4c67-bae7-a5b3f38b1454"
                            }
                        },
                        {
                            "id": "0256c4d8-833a-4318-9d4b-9f1c1cd46565",
                            "name": "p9",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "0256c4d8-833a-4318-9d4b-9f1c1cd46565"
                            }
                        }
                    ],
                    "transitions": [
                        {
                            "id": "589f4456-a1c2-47b9-b8a9-7502d40447ad",
                            "name": "Lithografie",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p1_key": "local output_p1_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p1_value": "local output_p1_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "00bf5b16-edf5-49aa-be39-5702f0657392",
                            "name": "Dampfphasenabscheidung",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p2_key": "local output_p2_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p2_value": "local output_p2_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "c4b7aad3-0472-4528-8324-95557d8a5f23",
                            "name": "Epitaxie",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p3_key": "local output_p3_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p3_value": "local output_p3_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "3388253a-bd47-4743-a84e-57e33bb2dd69",
                            "name": "Dotieren",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p4_key": "local output_p4_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p4_value": "local output_p4_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "6649229c-dc74-49b3-81c4-16bcaf2df2de",
                            "name": "Diffussion",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p5_key": "local output_p5_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p5_value": "local output_p5_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "7211dcc4-5212-4b32-b057-ea94869b20ee",
                            "name": "Nassprozesse",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p6_key": "local output_p6_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p6_value": "local output_p6_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "9abe5df7-814c-4395-b25b-dd529fbf423f",
                            "name": "Trockenätzen",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p7_key": "local output_p7_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p7_value": "local output_p7_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "09de952b-e9b9-484e-b277-ec53b1b18d8b",
                            "name": "Beschichten",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p8_key": "local output_p8_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p8_value": "local output_p8_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "09a0982b-c37a-432b-9636-05548b0b683b",
                            "name": "Polieren",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p9_key": "local output_p9_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p9_value": "local output_p9_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "123cd5e5-f7f2-462f-8a2c-4b7d9a926b04",
                            "name": "Metrologie",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_chip_key": "local output_chip_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_chip_value": "local output_chip_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        }
                    ],
                    "arcs": [
                        {
                            "id": "1db9e399-2f4c-40df-8525-967520f257f5",
                            "filter": "$.*",
                            "fromId": "1ccfb8d3-f7b8-415c-acbb-87313e9241b3",
                            "toId": "589f4456-a1c2-47b9-b8a9-7502d40447ad"
                        },
                        {
                            "id": "1306fd03-766e-4c1e-accb-c2744e221301",
                            "filter": "$",
                            "fromId": "589f4456-a1c2-47b9-b8a9-7502d40447ad",
                            "toId": "626ede19-6726-45bf-b355-341f3b2d290e"
                        },
                        {
                            "id": "57c342a1-36ff-4b82-8fa7-fc7bc502434c",
                            "filter": "$.*",
                            "fromId": "626ede19-6726-45bf-b355-341f3b2d290e",
                            "toId": "00bf5b16-edf5-49aa-be39-5702f0657392"
                        },
                        {
                            "id": "54f08425-a3d5-4ab4-8b1d-bc51f5a43d73",
                            "filter": "$",
                            "fromId": "00bf5b16-edf5-49aa-be39-5702f0657392",
                            "toId": "c1f857bb-220a-4ea0-aa0e-82a8dae72243"
                        },
                        {
                            "id": "b0056d56-4888-40a2-8bd6-1c8cf904c29b",
                            "filter": "$.*",
                            "fromId": "c1f857bb-220a-4ea0-aa0e-82a8dae72243",
                            "toId": "c4b7aad3-0472-4528-8324-95557d8a5f23"
                        },
                        {
                            "id": "e1a943b2-fee8-4961-a41d-b95ba022528a",
                            "filter": "$",
                            "fromId": "c4b7aad3-0472-4528-8324-95557d8a5f23",
                            "toId": "6437bc37-738c-4d32-8c31-5d21821116aa"
                        },
                        {
                            "id": "bcc337af-901d-4735-b740-43b57acd8c95",
                            "filter": "$.*",
                            "fromId": "6437bc37-738c-4d32-8c31-5d21821116aa",
                            "toId": "3388253a-bd47-4743-a84e-57e33bb2dd69"
                        },
                        {
                            "id": "dd535a8f-7a85-4e11-9b38-adf4c307a796",
                            "filter": "$",
                            "fromId": "3388253a-bd47-4743-a84e-57e33bb2dd69",
                            "toId": "84c18531-ecc9-4595-a717-71ab141e17af"
                        },
                        {
                            "id": "5abc56e8-3e3e-49d1-b0b3-673eea0dd027",
                            "filter": "$.*",
                            "fromId": "84c18531-ecc9-4595-a717-71ab141e17af",
                            "toId": "6649229c-dc74-49b3-81c4-16bcaf2df2de"
                        },
                        {
                            "id": "692a6008-670c-4415-917f-c78b426f47f9",
                            "filter": "$",
                            "fromId": "6649229c-dc74-49b3-81c4-16bcaf2df2de",
                            "toId": "4ce5f483-ed78-4c30-bd67-5f7f161541e7"
                        },
                        {
                            "id": "ddc6e979-4c04-413a-b98f-99b61337c44d",
                            "filter": "$.*",
                            "fromId": "4ce5f483-ed78-4c30-bd67-5f7f161541e7",
                            "toId": "7211dcc4-5212-4b32-b057-ea94869b20ee"
                        },
                        {
                            "id": "d312cb51-db72-4c88-9e30-a9d0c60b5dfe",
                            "filter": "$",
                            "fromId": "7211dcc4-5212-4b32-b057-ea94869b20ee",
                            "toId": "54473421-8f35-47de-b64a-bc7ae45a2ea6"
                        },
                        {
                            "id": "8b54b8a8-f2bb-404d-953f-307d33f4af07",
                            "filter": "$.*",
                            "fromId": "54473421-8f35-47de-b64a-bc7ae45a2ea6",
                            "toId": "9abe5df7-814c-4395-b25b-dd529fbf423f"
                        },
                        {
                            "id": "493716c2-ac90-48b0-abd3-48abbdedf7b4",
                            "filter": "$",
                            "fromId": "9abe5df7-814c-4395-b25b-dd529fbf423f",
                            "toId": "58d13880-c38c-4a0f-8a41-642bf69009e0"
                        },
                        {
                            "id": "739a7280-ff27-440b-acd4-5e184f257175",
                            "filter": "$.*",
                            "fromId": "58d13880-c38c-4a0f-8a41-642bf69009e0",
                            "toId": "09de952b-e9b9-484e-b277-ec53b1b18d8b"
                        },
                        {
                            "id": "5e830217-0bbe-4cad-b36c-05405fc6282c",
                            "filter": "$",
                            "fromId": "09de952b-e9b9-484e-b277-ec53b1b18d8b",
                            "toId": "74a6a016-cdc3-4a3f-833c-6561d5e8dc08"
                        },
                        {
                            "id": "de186182-5c9b-4eb2-ac70-af87d3e90b32",
                            "filter": "$.*",
                            "fromId": "74a6a016-cdc3-4a3f-833c-6561d5e8dc08",
                            "toId": "09a0982b-c37a-432b-9636-05548b0b683b"
                        },
                        {
                            "id": "86640be4-3672-466a-9934-4c65d64f4087",
                            "filter": "$",
                            "fromId": "09a0982b-c37a-432b-9636-05548b0b683b",
                            "toId": "0256c4d8-833a-4318-9d4b-9f1c1cd46565"
                        },
                        {
                            "id": "65494ab6-bacb-419c-973a-23adb0b630c2",
                            "filter": "$.*",
                            "fromId": "0256c4d8-833a-4318-9d4b-9f1c1cd46565",
                            "toId": "123cd5e5-f7f2-462f-8a2c-4b7d9a926b04"
                        },
                        {
                            "id": "45fd2474-4e75-4548-83c4-6d14be8e3c97",
                            "filter": "$",
                            "fromId": "123cd5e5-f7f2-462f-8a2c-4b7d9a926b04",
                            "toId": "a6d0ebbc-4df6-4c67-bae7-a5b3f38b1454"
                        }
                    ]
                },
                "layoutData": {
                    "cells": [
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 288,
                                "y": 300
                            },
                            "angle": 0,
                            "id": "589f4456-a1c2-47b9-b8a9-7502d40447ad",
                            "jsonnetsType": "transition",
                            "z": 1,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Lithografie"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 708,
                                "y": 300
                            },
                            "angle": 0,
                            "id": "00bf5b16-edf5-49aa-be39-5702f0657392",
                            "jsonnetsType": "transition",
                            "z": 2,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Dampfphasenabscheidung"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 1104,
                                "y": 300
                            },
                            "angle": 0,
                            "id": "c4b7aad3-0472-4528-8324-95557d8a5f23",
                            "jsonnetsType": "transition",
                            "z": 3,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Epitaxie"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 1308,
                                "y": 444
                            },
                            "angle": 0,
                            "id": "3388253a-bd47-4743-a84e-57e33bb2dd69",
                            "jsonnetsType": "transition",
                            "z": 4,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Dotieren"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 1104,
                                "y": 600
                            },
                            "angle": 0,
                            "id": "6649229c-dc74-49b3-81c4-16bcaf2df2de",
                            "jsonnetsType": "transition",
                            "z": 5,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Diffussion"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 708,
                                "y": 600
                            },
                            "angle": 0,
                            "id": "7211dcc4-5212-4b32-b057-ea94869b20ee",
                            "jsonnetsType": "transition",
                            "z": 6,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Nassprozesse"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 288,
                                "y": 600
                            },
                            "angle": 0,
                            "id": "9abe5df7-814c-4395-b25b-dd529fbf423f",
                            "jsonnetsType": "transition",
                            "z": 7,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Trockenätzen"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 84,
                                "y": 744
                            },
                            "angle": 0,
                            "id": "09de952b-e9b9-484e-b277-ec53b1b18d8b",
                            "jsonnetsType": "transition",
                            "z": 8,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Beschichten"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 276,
                                "y": 876
                            },
                            "angle": 0,
                            "id": "09a0982b-c37a-432b-9636-05548b0b683b",
                            "jsonnetsType": "transition",
                            "z": 9,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Polieren"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 720,
                                "y": 876
                            },
                            "angle": 0,
                            "id": "123cd5e5-f7f2-462f-8a2c-4b7d9a926b04",
                            "jsonnetsType": "transition",
                            "z": 10,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Metrologie"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 96,
                                "y": 300
                            },
                            "angle": 0,
                            "tokens": 1,
                            "id": "1ccfb8d3-f7b8-415c-acbb-87313e9241b3",
                            "jsonnetsType": "place",
                            "z": 11,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Start"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 528,
                                "y": 300
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "626ede19-6726-45bf-b355-341f3b2d290e",
                            "jsonnetsType": "place",
                            "z": 12,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p1"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 947,
                                "y": 299
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "c1f857bb-220a-4ea0-aa0e-82a8dae72243",
                            "jsonnetsType": "place",
                            "z": 13,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p2"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 1332,
                                "y": 300
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "6437bc37-738c-4d32-8c31-5d21821116aa",
                            "jsonnetsType": "place",
                            "z": 14,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p3"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 1332,
                                "y": 600
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "84c18531-ecc9-4595-a717-71ab141e17af",
                            "jsonnetsType": "place",
                            "z": 15,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p4"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 948,
                                "y": 600
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "4ce5f483-ed78-4c30-bd67-5f7f161541e7",
                            "jsonnetsType": "place",
                            "z": 16,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p5"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 516,
                                "y": 600
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "54473421-8f35-47de-b64a-bc7ae45a2ea6",
                            "jsonnetsType": "place",
                            "z": 17,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p6"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 108,
                                "y": 600
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "58d13880-c38c-4a0f-8a41-642bf69009e0",
                            "jsonnetsType": "place",
                            "z": 18,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p7"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 108,
                                "y": 876
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "74a6a016-cdc3-4a3f-833c-6561d5e8dc08",
                            "jsonnetsType": "place",
                            "z": 19,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p8"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 960,
                                "y": 876
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "a6d0ebbc-4df6-4c67-bae7-a5b3f38b1454",
                            "jsonnetsType": "place",
                            "z": 20,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Chip"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 504,
                                "y": 876
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "0256c4d8-833a-4318-9d4b-9f1c1cd46565",
                            "jsonnetsType": "place",
                            "z": 21,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p9"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "1ccfb8d3-f7b8-415c-acbb-87313e9241b3",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "589f4456-a1c2-47b9-b8a9-7502d40447ad",
                                "selector": ".root"
                            },
                            "id": "1db9e399-2f4c-40df-8525-967520f257f5",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 22,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "589f4456-a1c2-47b9-b8a9-7502d40447ad",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "626ede19-6726-45bf-b355-341f3b2d290e",
                                "selector": ".root"
                            },
                            "id": "1306fd03-766e-4c1e-accb-c2744e221301",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 23,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "626ede19-6726-45bf-b355-341f3b2d290e",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "00bf5b16-edf5-49aa-be39-5702f0657392",
                                "selector": ".root"
                            },
                            "id": "57c342a1-36ff-4b82-8fa7-fc7bc502434c",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 24,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "00bf5b16-edf5-49aa-be39-5702f0657392",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "c1f857bb-220a-4ea0-aa0e-82a8dae72243",
                                "selector": ".root"
                            },
                            "id": "54f08425-a3d5-4ab4-8b1d-bc51f5a43d73",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 25,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "c1f857bb-220a-4ea0-aa0e-82a8dae72243",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "c4b7aad3-0472-4528-8324-95557d8a5f23",
                                "selector": ".root"
                            },
                            "id": "b0056d56-4888-40a2-8bd6-1c8cf904c29b",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 26,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "c4b7aad3-0472-4528-8324-95557d8a5f23",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "6437bc37-738c-4d32-8c31-5d21821116aa",
                                "selector": ".root"
                            },
                            "id": "e1a943b2-fee8-4961-a41d-b95ba022528a",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 27,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "6437bc37-738c-4d32-8c31-5d21821116aa",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "3388253a-bd47-4743-a84e-57e33bb2dd69",
                                "selector": ".root"
                            },
                            "id": "bcc337af-901d-4735-b740-43b57acd8c95",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 28,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "3388253a-bd47-4743-a84e-57e33bb2dd69",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "84c18531-ecc9-4595-a717-71ab141e17af",
                                "selector": ".root"
                            },
                            "id": "dd535a8f-7a85-4e11-9b38-adf4c307a796",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 29,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "84c18531-ecc9-4595-a717-71ab141e17af",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "6649229c-dc74-49b3-81c4-16bcaf2df2de",
                                "selector": ".root"
                            },
                            "id": "5abc56e8-3e3e-49d1-b0b3-673eea0dd027",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 30,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "6649229c-dc74-49b3-81c4-16bcaf2df2de",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "4ce5f483-ed78-4c30-bd67-5f7f161541e7",
                                "selector": ".root"
                            },
                            "id": "692a6008-670c-4415-917f-c78b426f47f9",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 31,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "4ce5f483-ed78-4c30-bd67-5f7f161541e7",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "7211dcc4-5212-4b32-b057-ea94869b20ee",
                                "selector": ".root"
                            },
                            "id": "ddc6e979-4c04-413a-b98f-99b61337c44d",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 32,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "7211dcc4-5212-4b32-b057-ea94869b20ee",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "54473421-8f35-47de-b64a-bc7ae45a2ea6",
                                "selector": ".root"
                            },
                            "id": "d312cb51-db72-4c88-9e30-a9d0c60b5dfe",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 33,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "54473421-8f35-47de-b64a-bc7ae45a2ea6",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "9abe5df7-814c-4395-b25b-dd529fbf423f",
                                "selector": ".root"
                            },
                            "id": "8b54b8a8-f2bb-404d-953f-307d33f4af07",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 34,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "9abe5df7-814c-4395-b25b-dd529fbf423f",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "58d13880-c38c-4a0f-8a41-642bf69009e0",
                                "selector": ".root"
                            },
                            "id": "493716c2-ac90-48b0-abd3-48abbdedf7b4",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 35,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "58d13880-c38c-4a0f-8a41-642bf69009e0",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "09de952b-e9b9-484e-b277-ec53b1b18d8b",
                                "selector": ".root"
                            },
                            "id": "739a7280-ff27-440b-acd4-5e184f257175",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 36,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "09de952b-e9b9-484e-b277-ec53b1b18d8b",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "74a6a016-cdc3-4a3f-833c-6561d5e8dc08",
                                "selector": ".root"
                            },
                            "id": "5e830217-0bbe-4cad-b36c-05405fc6282c",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 37,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "74a6a016-cdc3-4a3f-833c-6561d5e8dc08",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "09a0982b-c37a-432b-9636-05548b0b683b",
                                "selector": ".root"
                            },
                            "id": "de186182-5c9b-4eb2-ac70-af87d3e90b32",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 38,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "09a0982b-c37a-432b-9636-05548b0b683b",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "0256c4d8-833a-4318-9d4b-9f1c1cd46565",
                                "selector": ".root"
                            },
                            "id": "86640be4-3672-466a-9934-4c65d64f4087",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 39,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "0256c4d8-833a-4318-9d4b-9f1c1cd46565",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "123cd5e5-f7f2-462f-8a2c-4b7d9a926b04",
                                "selector": ".root"
                            },
                            "id": "65494ab6-bacb-419c-973a-23adb0b630c2",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 40,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "123cd5e5-f7f2-462f-8a2c-4b7d9a926b04",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "a6d0ebbc-4df6-4c67-bae7-a5b3f38b1454",
                                "selector": ".root"
                            },
                            "id": "45fd2474-4e75-4548-83c4-6d14be8e3c97",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 41,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "name": "Anschluss",
            "net": {
                "typeData": {
                    "placeTypes": {
                        "167bbbd6-95ec-4fd6-be40-26c1a487f170": "start",
                        "834fca4a-9079-417a-8768-afd52bcc0c94": "end",
                        "77993295-6870-418a-bd0d-b145e603292f": "control",
                        "2f69a08e-2351-4bdf-84d7-564928a829aa": "control"
                    },
                    "transitionTypes": {
                        "67438c44-8f16-41b3-ac44-0438014633c0": "activity",
                        "e6d19788-6dec-476e-a333-14397384d651": "activity",
                        "480049a0-4dbe-4f96-b7fc-2fdd039ed064": "activity"
                    }
                },
                "netData": {
                    "places": [
                        {
                            "id": "167bbbd6-95ec-4fd6-be40-26c1a487f170",
                            "name": "Start",
                            "marking": [
                                {
                                    "amount": 1,
                                    "ghgFactor": 0,
                                    "scope": "start",
                                    "pds": 0
                                }
                            ],
                            "schema": {
                                "type": "array",
                                "title": "start",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "167bbbd6-95ec-4fd6-be40-26c1a487f170"
                            }
                        },
                        {
                            "id": "77993295-6870-418a-bd0d-b145e603292f",
                            "name": "p1",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "77993295-6870-418a-bd0d-b145e603292f"
                            }
                        },
                        {
                            "id": "2f69a08e-2351-4bdf-84d7-564928a829aa",
                            "name": "p2",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "2f69a08e-2351-4bdf-84d7-564928a829aa"
                            }
                        },
                        {
                            "id": "834fca4a-9079-417a-8768-afd52bcc0c94",
                            "name": "Kameraanschluss",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "end",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "834fca4a-9079-417a-8768-afd52bcc0c94"
                            }
                        }
                    ],
                    "transitions": [
                        {
                            "id": "67438c44-8f16-41b3-ac44-0438014633c0",
                            "name": "Reinigen",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p1_key": "local output_p1_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p1_value": "local output_p1_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "e6d19788-6dec-476e-a333-14397384d651",
                            "name": "Löten",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p2_key": "local output_p2_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p2_value": "local output_p2_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "480049a0-4dbe-4f96-b7fc-2fdd039ed064",
                            "name": "Trennen",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_kameraanschluss_key": "local output_kameraanschluss_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_kameraanschluss_value": "local output_kameraanschluss_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        }
                    ],
                    "arcs": [
                        {
                            "id": "9005b5ac-3466-4378-8277-3332c51a2afe",
                            "filter": "$.*",
                            "fromId": "167bbbd6-95ec-4fd6-be40-26c1a487f170",
                            "toId": "67438c44-8f16-41b3-ac44-0438014633c0"
                        },
                        {
                            "id": "55fe0403-4136-4ace-8504-60e737ca6bef",
                            "filter": "$",
                            "fromId": "67438c44-8f16-41b3-ac44-0438014633c0",
                            "toId": "77993295-6870-418a-bd0d-b145e603292f"
                        },
                        {
                            "id": "e983560b-dfff-4fd4-ad18-21f9e485d471",
                            "filter": "$.*",
                            "fromId": "77993295-6870-418a-bd0d-b145e603292f",
                            "toId": "e6d19788-6dec-476e-a333-14397384d651"
                        },
                        {
                            "id": "c20f81e1-d19b-46b4-9262-438307da4af6",
                            "filter": "$",
                            "fromId": "e6d19788-6dec-476e-a333-14397384d651",
                            "toId": "2f69a08e-2351-4bdf-84d7-564928a829aa"
                        },
                        {
                            "id": "26da7c32-e6b0-4221-9a5b-2ccb9ce7560b",
                            "filter": "$.*",
                            "fromId": "2f69a08e-2351-4bdf-84d7-564928a829aa",
                            "toId": "480049a0-4dbe-4f96-b7fc-2fdd039ed064"
                        },
                        {
                            "id": "3826748f-3eb9-49d9-8d2a-54ae1952f284",
                            "filter": "$",
                            "fromId": "480049a0-4dbe-4f96-b7fc-2fdd039ed064",
                            "toId": "834fca4a-9079-417a-8768-afd52bcc0c94"
                        }
                    ]
                },
                "layoutData": {
                    "cells": [
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 300,
                                "y": 312
                            },
                            "angle": 0,
                            "id": "67438c44-8f16-41b3-ac44-0438014633c0",
                            "jsonnetsType": "transition",
                            "z": 1,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Reinigen"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 683,
                                "y": 311
                            },
                            "angle": 0,
                            "id": "e6d19788-6dec-476e-a333-14397384d651",
                            "jsonnetsType": "transition",
                            "z": 2,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Löten"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 1056,
                                "y": 312
                            },
                            "angle": 0,
                            "id": "480049a0-4dbe-4f96-b7fc-2fdd039ed064",
                            "jsonnetsType": "transition",
                            "z": 3,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Trennen"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 132,
                                "y": 312
                            },
                            "angle": 0,
                            "tokens": 1,
                            "id": "167bbbd6-95ec-4fd6-be40-26c1a487f170",
                            "jsonnetsType": "place",
                            "z": 4,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Start"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 528,
                                "y": 312
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "77993295-6870-418a-bd0d-b145e603292f",
                            "jsonnetsType": "place",
                            "z": 5,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p1"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 876,
                                "y": 312
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "2f69a08e-2351-4bdf-84d7-564928a829aa",
                            "jsonnetsType": "place",
                            "z": 6,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p2"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 1284,
                                "y": 312
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "834fca4a-9079-417a-8768-afd52bcc0c94",
                            "jsonnetsType": "place",
                            "z": 7,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Kameraanschluss"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "167bbbd6-95ec-4fd6-be40-26c1a487f170",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "67438c44-8f16-41b3-ac44-0438014633c0",
                                "selector": ".root"
                            },
                            "id": "9005b5ac-3466-4378-8277-3332c51a2afe",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 8,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "67438c44-8f16-41b3-ac44-0438014633c0",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "77993295-6870-418a-bd0d-b145e603292f",
                                "selector": ".root"
                            },
                            "id": "55fe0403-4136-4ace-8504-60e737ca6bef",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 9,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "77993295-6870-418a-bd0d-b145e603292f",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "e6d19788-6dec-476e-a333-14397384d651",
                                "selector": ".root"
                            },
                            "id": "e983560b-dfff-4fd4-ad18-21f9e485d471",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 10,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "e6d19788-6dec-476e-a333-14397384d651",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "2f69a08e-2351-4bdf-84d7-564928a829aa",
                                "selector": ".root"
                            },
                            "id": "c20f81e1-d19b-46b4-9262-438307da4af6",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 11,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "2f69a08e-2351-4bdf-84d7-564928a829aa",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "480049a0-4dbe-4f96-b7fc-2fdd039ed064",
                                "selector": ".root"
                            },
                            "id": "26da7c32-e6b0-4221-9a5b-2ccb9ce7560b",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 12,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "480049a0-4dbe-4f96-b7fc-2fdd039ed064",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "834fca4a-9079-417a-8768-afd52bcc0c94",
                                "selector": ".root"
                            },
                            "id": "3826748f-3eb9-49d9-8d2a-54ae1952f284",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 13,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "name": "Leiterplatte",
            "net": {
                "typeData": {
                    "placeTypes": {
                        "5309778c-2f6a-44c0-aa17-bb3f15b7a606": "start",
                        "b1987eda-8e08-4ced-b830-b6567f952ded": "control",
                        "f08869f7-1c58-44f1-a0ee-51f8d948856c": "control",
                        "4d6e9dac-bf68-4b7b-86e2-fdbbb1261448": "control",
                        "487ea0ae-a4de-43e7-bb49-5953c547398b": "control",
                        "d312e07b-ebb7-4901-baa3-4685f2ebff45": "control",
                        "d779b8e0-9388-4502-971c-bf3b4addc44e": "control",
                        "257dbecb-8cf9-4411-8f95-1c787c8333c4": "control",
                        "f5cf8f49-6389-4307-8c11-579e41685514": "control",
                        "6032860d-f236-4f7e-8be7-197934f4114b": "control",
                        "2575f3d8-5e2b-41d6-ad8f-0d085c266c07": "end"
                    },
                    "transitionTypes": {
                        "24b114f0-0cf6-4cac-9aad-e034420f35e3": "activity",
                        "ad131bbd-9f06-450f-92a9-02a23ff57dc9": "activity",
                        "282fe852-ee69-4f85-93c7-b8b2a3aabe06": "activity",
                        "c7c6e86a-5446-4ef5-ba45-d4547bff759d": "activity",
                        "cdfc3613-646a-45d2-80ff-d1a05eef5867": "activity",
                        "5b35b671-368c-42fc-8f5e-55acbe10d9de": "activity",
                        "5ae74711-b66a-4d67-831d-c69f190f6117": "activity",
                        "f73a9c93-3918-4ec1-9418-4c7ee1e4e1f0": "activity",
                        "cb95ac77-e8db-4099-8e29-4ac3121c2878": "activity",
                        "6c5f99f4-2b10-4dd9-8427-bd2bd18696a1": "activity"
                    }
                },
                "netData": {
                    "places": [
                        {
                            "id": "5309778c-2f6a-44c0-aa17-bb3f15b7a606",
                            "name": "Start",
                            "marking": [
                                {
                                    "amount": 1,
                                    "ghgFactor": 0,
                                    "scope": "start",
                                    "pds": 0
                                }
                            ],
                            "schema": {
                                "type": "array",
                                "title": "start",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "5309778c-2f6a-44c0-aa17-bb3f15b7a606"
                            }
                        },
                        {
                            "id": "b1987eda-8e08-4ced-b830-b6567f952ded",
                            "name": "p1",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "b1987eda-8e08-4ced-b830-b6567f952ded"
                            }
                        },
                        {
                            "id": "f08869f7-1c58-44f1-a0ee-51f8d948856c",
                            "name": "p2",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "f08869f7-1c58-44f1-a0ee-51f8d948856c"
                            }
                        },
                        {
                            "id": "4d6e9dac-bf68-4b7b-86e2-fdbbb1261448",
                            "name": "p3",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "4d6e9dac-bf68-4b7b-86e2-fdbbb1261448"
                            }
                        },
                        {
                            "id": "487ea0ae-a4de-43e7-bb49-5953c547398b",
                            "name": "p4",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "487ea0ae-a4de-43e7-bb49-5953c547398b"
                            }
                        },
                        {
                            "id": "d312e07b-ebb7-4901-baa3-4685f2ebff45",
                            "name": "p5",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "d312e07b-ebb7-4901-baa3-4685f2ebff45"
                            }
                        },
                        {
                            "id": "d779b8e0-9388-4502-971c-bf3b4addc44e",
                            "name": "p6",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "d779b8e0-9388-4502-971c-bf3b4addc44e"
                            }
                        },
                        {
                            "id": "257dbecb-8cf9-4411-8f95-1c787c8333c4",
                            "name": "p7",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "257dbecb-8cf9-4411-8f95-1c787c8333c4"
                            }
                        },
                        {
                            "id": "6032860d-f236-4f7e-8be7-197934f4114b",
                            "name": "p9",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "6032860d-f236-4f7e-8be7-197934f4114b"
                            }
                        },
                        {
                            "id": "2575f3d8-5e2b-41d6-ad8f-0d085c266c07",
                            "name": "Leiterplatte",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "end",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "2575f3d8-5e2b-41d6-ad8f-0d085c266c07"
                            }
                        },
                        {
                            "id": "f5cf8f49-6389-4307-8c11-579e41685514",
                            "name": "p8",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "f5cf8f49-6389-4307-8c11-579e41685514"
                            }
                        }
                    ],
                    "transitions": [
                        {
                            "id": "24b114f0-0cf6-4cac-9aad-e034420f35e3",
                            "name": "Lagenaufbau",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p1_key": "local output_p1_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p1_value": "local output_p1_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "ad131bbd-9f06-450f-92a9-02a23ff57dc9",
                            "name": "Laminieren",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p2_key": "local output_p2_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p2_value": "local output_p2_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "282fe852-ee69-4f85-93c7-b8b2a3aabe06",
                            "name": "Bohren",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p3_key": "local output_p3_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p3_value": "local output_p3_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "c7c6e86a-5446-4ef5-ba45-d4547bff759d",
                            "name": "Plating",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p4_key": "local output_p4_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p4_value": "local output_p4_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "cdfc3613-646a-45d2-80ff-d1a05eef5867",
                            "name": "Lötstoppmaske",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p5_key": "local output_p5_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p5_value": "local output_p5_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "5b35b671-368c-42fc-8f5e-55acbe10d9de",
                            "name": "Lithografie",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p6_key": "local output_p6_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p6_value": "local output_p6_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "5ae74711-b66a-4d67-831d-c69f190f6117",
                            "name": "Nachbearbeiten",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p7_key": "local output_p7_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p7_value": "local output_p7_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "f73a9c93-3918-4ec1-9418-4c7ee1e4e1f0",
                            "name": "Testen",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p8_key": "local output_p8_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p8_value": "local output_p8_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "cb95ac77-e8db-4099-8e29-4ac3121c2878",
                            "name": "Oberflächenfinish",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p9_key": "local output_p9_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p9_value": "local output_p9_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "6c5f99f4-2b10-4dd9-8427-bd2bd18696a1",
                            "name": "Legendendruck",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_leiterplatte_key": "local output_leiterplatte_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_leiterplatte_value": "local output_leiterplatte_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        }
                    ],
                    "arcs": [
                        {
                            "id": "ebc2cbb5-32c4-4d19-ae03-a525b2cafe46",
                            "filter": "$.*",
                            "fromId": "5309778c-2f6a-44c0-aa17-bb3f15b7a606",
                            "toId": "24b114f0-0cf6-4cac-9aad-e034420f35e3"
                        },
                        {
                            "id": "189b44da-07d6-4bf6-9512-b47cc9a673f7",
                            "filter": "$",
                            "fromId": "24b114f0-0cf6-4cac-9aad-e034420f35e3",
                            "toId": "b1987eda-8e08-4ced-b830-b6567f952ded"
                        },
                        {
                            "id": "394700a9-4fa6-4f52-b5c5-a1ec92fbf559",
                            "filter": "$.*",
                            "fromId": "b1987eda-8e08-4ced-b830-b6567f952ded",
                            "toId": "ad131bbd-9f06-450f-92a9-02a23ff57dc9"
                        },
                        {
                            "id": "663eb46f-5c4e-4050-a69d-ebc8c7d17f6f",
                            "filter": "$",
                            "fromId": "ad131bbd-9f06-450f-92a9-02a23ff57dc9",
                            "toId": "f08869f7-1c58-44f1-a0ee-51f8d948856c"
                        },
                        {
                            "id": "8eb7b925-fd54-489c-9a8b-8c5034a857bf",
                            "filter": "$.*",
                            "fromId": "f08869f7-1c58-44f1-a0ee-51f8d948856c",
                            "toId": "282fe852-ee69-4f85-93c7-b8b2a3aabe06"
                        },
                        {
                            "id": "33c16aeb-6a8c-407c-b847-00e69c01c724",
                            "filter": "$",
                            "fromId": "282fe852-ee69-4f85-93c7-b8b2a3aabe06",
                            "toId": "4d6e9dac-bf68-4b7b-86e2-fdbbb1261448"
                        },
                        {
                            "id": "ea62e657-95a9-4e5f-97d7-ab9d18e9966d",
                            "filter": "$.*",
                            "fromId": "4d6e9dac-bf68-4b7b-86e2-fdbbb1261448",
                            "toId": "c7c6e86a-5446-4ef5-ba45-d4547bff759d"
                        },
                        {
                            "id": "0d1cd340-ac29-415b-bf07-c97c8dd2144c",
                            "filter": "$",
                            "fromId": "c7c6e86a-5446-4ef5-ba45-d4547bff759d",
                            "toId": "487ea0ae-a4de-43e7-bb49-5953c547398b"
                        },
                        {
                            "id": "ecd4967b-149e-4db8-adbb-ecbe792c50b8",
                            "filter": "$.*",
                            "fromId": "487ea0ae-a4de-43e7-bb49-5953c547398b",
                            "toId": "cdfc3613-646a-45d2-80ff-d1a05eef5867"
                        },
                        {
                            "id": "8d9fb05d-0763-4c85-b354-d5cd9f5e2c71",
                            "filter": "$",
                            "fromId": "cdfc3613-646a-45d2-80ff-d1a05eef5867",
                            "toId": "d312e07b-ebb7-4901-baa3-4685f2ebff45"
                        },
                        {
                            "id": "1cbde8e6-32f6-45e5-a766-b144951b18fc",
                            "filter": "$.*",
                            "fromId": "d312e07b-ebb7-4901-baa3-4685f2ebff45",
                            "toId": "5b35b671-368c-42fc-8f5e-55acbe10d9de"
                        },
                        {
                            "id": "33ad877d-e190-4b1c-8c08-994cfb8057fb",
                            "filter": "$",
                            "fromId": "5b35b671-368c-42fc-8f5e-55acbe10d9de",
                            "toId": "d779b8e0-9388-4502-971c-bf3b4addc44e"
                        },
                        {
                            "id": "b7df865d-b5f2-4daf-9939-eb6605863784",
                            "filter": "$.*",
                            "fromId": "d779b8e0-9388-4502-971c-bf3b4addc44e",
                            "toId": "5ae74711-b66a-4d67-831d-c69f190f6117"
                        },
                        {
                            "id": "6a9ed89c-33f7-4132-89db-a3f4aa9706a7",
                            "filter": "$",
                            "fromId": "5ae74711-b66a-4d67-831d-c69f190f6117",
                            "toId": "257dbecb-8cf9-4411-8f95-1c787c8333c4"
                        },
                        {
                            "id": "6eab3779-35ef-4ca2-a4ff-ec648fde309a",
                            "filter": "$.*",
                            "fromId": "257dbecb-8cf9-4411-8f95-1c787c8333c4",
                            "toId": "f73a9c93-3918-4ec1-9418-4c7ee1e4e1f0"
                        },
                        {
                            "id": "2899503b-e44b-4994-8705-34d457f601fc",
                            "filter": "$",
                            "fromId": "f73a9c93-3918-4ec1-9418-4c7ee1e4e1f0",
                            "toId": "f5cf8f49-6389-4307-8c11-579e41685514"
                        },
                        {
                            "id": "a019943d-d5e9-4a95-9172-5f7fb1564528",
                            "filter": "$.*",
                            "fromId": "f5cf8f49-6389-4307-8c11-579e41685514",
                            "toId": "cb95ac77-e8db-4099-8e29-4ac3121c2878"
                        },
                        {
                            "id": "12d77567-c04b-4668-a54c-cd27c8700f54",
                            "filter": "$",
                            "fromId": "cb95ac77-e8db-4099-8e29-4ac3121c2878",
                            "toId": "6032860d-f236-4f7e-8be7-197934f4114b"
                        },
                        {
                            "id": "71278fb4-3e78-421a-98d2-8e0fe0c1046f",
                            "filter": "$.*",
                            "fromId": "6032860d-f236-4f7e-8be7-197934f4114b",
                            "toId": "6c5f99f4-2b10-4dd9-8427-bd2bd18696a1"
                        },
                        {
                            "id": "fb9cf236-7666-4473-9c86-9a8679a003b3",
                            "filter": "$",
                            "fromId": "6c5f99f4-2b10-4dd9-8427-bd2bd18696a1",
                            "toId": "2575f3d8-5e2b-41d6-ad8f-0d085c266c07"
                        }
                    ]
                },
                "layoutData": {
                    "cells": [
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 275,
                                "y": 275
                            },
                            "angle": 0,
                            "id": "24b114f0-0cf6-4cac-9aad-e034420f35e3",
                            "jsonnetsType": "transition",
                            "z": 1,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Lagenaufbau"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 648,
                                "y": 276
                            },
                            "angle": 0,
                            "id": "ad131bbd-9f06-450f-92a9-02a23ff57dc9",
                            "jsonnetsType": "transition",
                            "z": 2,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Laminieren"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 1068,
                                "y": 276
                            },
                            "angle": 0,
                            "id": "282fe852-ee69-4f85-93c7-b8b2a3aabe06",
                            "jsonnetsType": "transition",
                            "z": 3,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Bohren"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 1320,
                                "y": 420
                            },
                            "angle": 0,
                            "id": "c7c6e86a-5446-4ef5-ba45-d4547bff759d",
                            "jsonnetsType": "transition",
                            "z": 4,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Plating"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 1068,
                                "y": 564
                            },
                            "angle": 0,
                            "id": "cdfc3613-646a-45d2-80ff-d1a05eef5867",
                            "jsonnetsType": "transition",
                            "z": 5,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Lötstoppmaske"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 648,
                                "y": 564
                            },
                            "angle": 0,
                            "id": "5b35b671-368c-42fc-8f5e-55acbe10d9de",
                            "jsonnetsType": "transition",
                            "z": 6,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Lithografie"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 264,
                                "y": 564
                            },
                            "angle": 0,
                            "id": "5ae74711-b66a-4d67-831d-c69f190f6117",
                            "jsonnetsType": "transition",
                            "z": 7,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Nachbearbeiten"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 72,
                                "y": 744
                            },
                            "angle": 0,
                            "id": "f73a9c93-3918-4ec1-9418-4c7ee1e4e1f0",
                            "jsonnetsType": "transition",
                            "z": 8,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Testen"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 252,
                                "y": 912
                            },
                            "angle": 0,
                            "id": "cb95ac77-e8db-4099-8e29-4ac3121c2878",
                            "jsonnetsType": "transition",
                            "z": 9,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Oberflächenfinish"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 648,
                                "y": 912
                            },
                            "angle": 0,
                            "id": "6c5f99f4-2b10-4dd9-8427-bd2bd18696a1",
                            "jsonnetsType": "transition",
                            "z": 10,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Legendendruck"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 108,
                                "y": 276
                            },
                            "angle": 0,
                            "tokens": 1,
                            "id": "5309778c-2f6a-44c0-aa17-bb3f15b7a606",
                            "jsonnetsType": "place",
                            "z": 11,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Start"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 480,
                                "y": 276
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "b1987eda-8e08-4ced-b830-b6567f952ded",
                            "jsonnetsType": "place",
                            "z": 12,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p1"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 888,
                                "y": 276
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "f08869f7-1c58-44f1-a0ee-51f8d948856c",
                            "jsonnetsType": "place",
                            "z": 13,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p2"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 1344,
                                "y": 276
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "4d6e9dac-bf68-4b7b-86e2-fdbbb1261448",
                            "jsonnetsType": "place",
                            "z": 14,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p3"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 1344,
                                "y": 564
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "487ea0ae-a4de-43e7-bb49-5953c547398b",
                            "jsonnetsType": "place",
                            "z": 15,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p4"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 876,
                                "y": 564
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "d312e07b-ebb7-4901-baa3-4685f2ebff45",
                            "jsonnetsType": "place",
                            "z": 16,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p5"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 468,
                                "y": 564
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "d779b8e0-9388-4502-971c-bf3b4addc44e",
                            "jsonnetsType": "place",
                            "z": 17,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p6"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 96,
                                "y": 564
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "257dbecb-8cf9-4411-8f95-1c787c8333c4",
                            "jsonnetsType": "place",
                            "z": 18,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p7"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 480,
                                "y": 912
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "6032860d-f236-4f7e-8be7-197934f4114b",
                            "jsonnetsType": "place",
                            "z": 19,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p9"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 876,
                                "y": 912
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "2575f3d8-5e2b-41d6-ad8f-0d085c266c07",
                            "jsonnetsType": "place",
                            "z": 20,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Leiterplatte"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 96,
                                "y": 912
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "f5cf8f49-6389-4307-8c11-579e41685514",
                            "jsonnetsType": "place",
                            "z": 21,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p8"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "5309778c-2f6a-44c0-aa17-bb3f15b7a606",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "24b114f0-0cf6-4cac-9aad-e034420f35e3",
                                "selector": ".root"
                            },
                            "id": "ebc2cbb5-32c4-4d19-ae03-a525b2cafe46",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 22,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "24b114f0-0cf6-4cac-9aad-e034420f35e3",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "b1987eda-8e08-4ced-b830-b6567f952ded",
                                "selector": ".root"
                            },
                            "id": "189b44da-07d6-4bf6-9512-b47cc9a673f7",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 23,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "b1987eda-8e08-4ced-b830-b6567f952ded",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "ad131bbd-9f06-450f-92a9-02a23ff57dc9",
                                "selector": ".root"
                            },
                            "id": "394700a9-4fa6-4f52-b5c5-a1ec92fbf559",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 24,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "ad131bbd-9f06-450f-92a9-02a23ff57dc9",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "f08869f7-1c58-44f1-a0ee-51f8d948856c",
                                "selector": ".root"
                            },
                            "id": "663eb46f-5c4e-4050-a69d-ebc8c7d17f6f",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 25,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "f08869f7-1c58-44f1-a0ee-51f8d948856c",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "282fe852-ee69-4f85-93c7-b8b2a3aabe06",
                                "selector": ".root"
                            },
                            "id": "8eb7b925-fd54-489c-9a8b-8c5034a857bf",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 26,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "282fe852-ee69-4f85-93c7-b8b2a3aabe06",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "4d6e9dac-bf68-4b7b-86e2-fdbbb1261448",
                                "selector": ".root"
                            },
                            "id": "33c16aeb-6a8c-407c-b847-00e69c01c724",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 27,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "4d6e9dac-bf68-4b7b-86e2-fdbbb1261448",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "c7c6e86a-5446-4ef5-ba45-d4547bff759d",
                                "selector": ".root"
                            },
                            "id": "ea62e657-95a9-4e5f-97d7-ab9d18e9966d",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 28,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "c7c6e86a-5446-4ef5-ba45-d4547bff759d",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "487ea0ae-a4de-43e7-bb49-5953c547398b",
                                "selector": ".root"
                            },
                            "id": "0d1cd340-ac29-415b-bf07-c97c8dd2144c",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 29,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "487ea0ae-a4de-43e7-bb49-5953c547398b",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "cdfc3613-646a-45d2-80ff-d1a05eef5867",
                                "selector": ".root"
                            },
                            "id": "ecd4967b-149e-4db8-adbb-ecbe792c50b8",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 30,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "cdfc3613-646a-45d2-80ff-d1a05eef5867",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "d312e07b-ebb7-4901-baa3-4685f2ebff45",
                                "selector": ".root"
                            },
                            "id": "8d9fb05d-0763-4c85-b354-d5cd9f5e2c71",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 31,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "d312e07b-ebb7-4901-baa3-4685f2ebff45",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "5b35b671-368c-42fc-8f5e-55acbe10d9de",
                                "selector": ".root"
                            },
                            "id": "1cbde8e6-32f6-45e5-a766-b144951b18fc",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 32,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "5b35b671-368c-42fc-8f5e-55acbe10d9de",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "d779b8e0-9388-4502-971c-bf3b4addc44e",
                                "selector": ".root"
                            },
                            "id": "33ad877d-e190-4b1c-8c08-994cfb8057fb",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 33,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "d779b8e0-9388-4502-971c-bf3b4addc44e",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "5ae74711-b66a-4d67-831d-c69f190f6117",
                                "selector": ".root"
                            },
                            "id": "b7df865d-b5f2-4daf-9939-eb6605863784",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 34,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "5ae74711-b66a-4d67-831d-c69f190f6117",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "257dbecb-8cf9-4411-8f95-1c787c8333c4",
                                "selector": ".root"
                            },
                            "id": "6a9ed89c-33f7-4132-89db-a3f4aa9706a7",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 35,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "257dbecb-8cf9-4411-8f95-1c787c8333c4",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "f73a9c93-3918-4ec1-9418-4c7ee1e4e1f0",
                                "selector": ".root"
                            },
                            "id": "6eab3779-35ef-4ca2-a4ff-ec648fde309a",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 36,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "f73a9c93-3918-4ec1-9418-4c7ee1e4e1f0",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "f5cf8f49-6389-4307-8c11-579e41685514",
                                "selector": ".root"
                            },
                            "id": "2899503b-e44b-4994-8705-34d457f601fc",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 37,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "f5cf8f49-6389-4307-8c11-579e41685514",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "cb95ac77-e8db-4099-8e29-4ac3121c2878",
                                "selector": ".root"
                            },
                            "id": "a019943d-d5e9-4a95-9172-5f7fb1564528",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 38,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "cb95ac77-e8db-4099-8e29-4ac3121c2878",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "6032860d-f236-4f7e-8be7-197934f4114b",
                                "selector": ".root"
                            },
                            "id": "12d77567-c04b-4668-a54c-cd27c8700f54",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 39,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "6032860d-f236-4f7e-8be7-197934f4114b",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "6c5f99f4-2b10-4dd9-8427-bd2bd18696a1",
                                "selector": ".root"
                            },
                            "id": "71278fb4-3e78-421a-98d2-8e0fe0c1046f",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 40,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "6c5f99f4-2b10-4dd9-8427-bd2bd18696a1",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "2575f3d8-5e2b-41d6-ad8f-0d085c266c07",
                                "selector": ".root"
                            },
                            "id": "fb9cf236-7666-4473-9c86-9a8679a003b3",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 41,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "name": "Wafer",
            "net": {
                "typeData": {
                    "placeTypes": {
                        "5826fe10-c01b-486e-b213-9e33f30cf8c2": "start",
                        "8be9e972-2eba-4766-8af4-1d5e18f2f0d3": "end",
                        "6b2916e9-3c05-4b3c-8f4d-469b81cb05a9": "control",
                        "d52d8bfb-4e9e-4e45-8487-6794fb4c9c60": "control",
                        "f5c8291f-8cb8-4f85-825a-33e170c20c11": "control",
                        "f1205391-5230-47f3-b7ac-6615d1830898": "control",
                        "8d30c6c3-65d0-4485-a8cd-714ee0ba569c": "control",
                        "825401fa-60cd-497d-927e-ccd110cbd236": "control"
                    },
                    "transitionTypes": {
                        "83447b3c-d063-4eb3-82df-d6ac7e5838f9": "activity",
                        "be938c8c-eb3f-4019-9248-d06df11f6668": "activity",
                        "7da089da-d214-432c-a8fd-6ab38081843b": "activity",
                        "425ec761-277c-4bc6-8b63-60e651b1223e": "activity",
                        "3d887d06-6b5e-4733-b487-fb28393f995a": "activity",
                        "9df90d66-8f44-4709-aa9e-015d92d6f907": "activity",
                        "e364df88-9898-4317-9dd4-71eced03218c": "activity"
                    }
                },
                "netData": {
                    "places": [
                        {
                            "id": "5826fe10-c01b-486e-b213-9e33f30cf8c2",
                            "name": "Start",
                            "marking": [
                                {
                                    "amount": 1,
                                    "ghgFactor": 0,
                                    "scope": "start",
                                    "pds": 0
                                }
                            ],
                            "schema": {
                                "type": "array",
                                "title": "start",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "5826fe10-c01b-486e-b213-9e33f30cf8c2"
                            }
                        },
                        {
                            "id": "6b2916e9-3c05-4b3c-8f4d-469b81cb05a9",
                            "name": "p1",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "6b2916e9-3c05-4b3c-8f4d-469b81cb05a9"
                            }
                        },
                        {
                            "id": "d52d8bfb-4e9e-4e45-8487-6794fb4c9c60",
                            "name": "p2",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "d52d8bfb-4e9e-4e45-8487-6794fb4c9c60"
                            }
                        },
                        {
                            "id": "f5c8291f-8cb8-4f85-825a-33e170c20c11",
                            "name": "p3",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "f5c8291f-8cb8-4f85-825a-33e170c20c11"
                            }
                        },
                        {
                            "id": "f1205391-5230-47f3-b7ac-6615d1830898",
                            "name": "p4",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "f1205391-5230-47f3-b7ac-6615d1830898"
                            }
                        },
                        {
                            "id": "8d30c6c3-65d0-4485-a8cd-714ee0ba569c",
                            "name": "p5",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "8d30c6c3-65d0-4485-a8cd-714ee0ba569c"
                            }
                        },
                        {
                            "id": "825401fa-60cd-497d-927e-ccd110cbd236",
                            "name": "p6",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "control",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "825401fa-60cd-497d-927e-ccd110cbd236"
                            }
                        },
                        {
                            "id": "8be9e972-2eba-4766-8af4-1d5e18f2f0d3",
                            "name": "Wafer",
                            "marking": [],
                            "schema": {
                                "type": "array",
                                "title": "end",
                                "maxItems": 1,
                                "items": {
                                    "type": "object"
                                },
                                "$id": "8be9e972-2eba-4766-8af4-1d5e18f2f0d3"
                            }
                        }
                    ],
                    "transitions": [
                        {
                            "id": "83447b3c-d063-4eb3-82df-d6ac7e5838f9",
                            "name": "Siliziumpulver einschmelzen",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p1_key": "local output_p1_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p1_value": "local output_p1_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "be938c8c-eb3f-4019-9248-d06df11f6668",
                            "name": "Reinigen",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p2_key": "local output_p2_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p2_value": "local output_p2_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "7da089da-d214-432c-a8fd-6ab38081843b",
                            "name": "Polysilizium einschmelzen",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p3_key": "local output_p3_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p3_value": "local output_p3_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "425ec761-277c-4bc6-8b63-60e651b1223e",
                            "name": "Czochralski-Verfahren",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p4_key": "local output_p4_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p4_value": "local output_p4_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "3d887d06-6b5e-4733-b487-fb28393f995a",
                            "name": "Sägen",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p5_key": "local output_p5_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p5_value": "local output_p5_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "9df90d66-8f44-4709-aa9e-015d92d6f907",
                            "name": "Schleifen",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_p6_key": "local output_p6_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_p6_value": "local output_p6_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        },
                        {
                            "id": "e364df88-9898-4317-9dd4-71eced03218c",
                            "name": "Oberflächenbehandlung",
                            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
                            "guard": "true",
                            "customVariables": {
                                "Allokation": "100"
                            },
                            "keyVarSnippets": {
                                "output_wafer_key": "local output_wafer_key = '-';"
                            },
                            "fragmentVarSnippets": {
                                "output_wafer_value": "local output_wafer_value = { scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };"
                            }
                        }
                    ],
                    "arcs": [
                        {
                            "id": "9952bbb5-ee12-47f5-9f8c-6ecc65e9978e",
                            "filter": "$.*",
                            "fromId": "5826fe10-c01b-486e-b213-9e33f30cf8c2",
                            "toId": "83447b3c-d063-4eb3-82df-d6ac7e5838f9"
                        },
                        {
                            "id": "98564d96-90e1-4bd7-88d1-7ea2fd0e3e6a",
                            "filter": "$",
                            "fromId": "83447b3c-d063-4eb3-82df-d6ac7e5838f9",
                            "toId": "6b2916e9-3c05-4b3c-8f4d-469b81cb05a9"
                        },
                        {
                            "id": "fd2ec139-fb41-47fe-801b-3bb11b1e8e25",
                            "filter": "$.*",
                            "fromId": "6b2916e9-3c05-4b3c-8f4d-469b81cb05a9",
                            "toId": "be938c8c-eb3f-4019-9248-d06df11f6668"
                        },
                        {
                            "id": "ae5dc3e8-7f0d-4f8a-84bd-4881cdfef516",
                            "filter": "$",
                            "fromId": "be938c8c-eb3f-4019-9248-d06df11f6668",
                            "toId": "d52d8bfb-4e9e-4e45-8487-6794fb4c9c60"
                        },
                        {
                            "id": "1dd9e330-42b4-4cfc-a172-e17023e63f43",
                            "filter": "$.*",
                            "fromId": "d52d8bfb-4e9e-4e45-8487-6794fb4c9c60",
                            "toId": "7da089da-d214-432c-a8fd-6ab38081843b"
                        },
                        {
                            "id": "da9e1ee2-3c85-4829-890c-ebdc01a38a4e",
                            "filter": "$",
                            "fromId": "7da089da-d214-432c-a8fd-6ab38081843b",
                            "toId": "f5c8291f-8cb8-4f85-825a-33e170c20c11"
                        },
                        {
                            "id": "bb71cb17-306f-4249-8af8-b6fbd3f72196",
                            "filter": "$.*",
                            "fromId": "f5c8291f-8cb8-4f85-825a-33e170c20c11",
                            "toId": "425ec761-277c-4bc6-8b63-60e651b1223e"
                        },
                        {
                            "id": "3b591ef6-51bf-4910-add7-4a58d16cc052",
                            "filter": "$",
                            "fromId": "425ec761-277c-4bc6-8b63-60e651b1223e",
                            "toId": "f1205391-5230-47f3-b7ac-6615d1830898"
                        },
                        {
                            "id": "d9e4a496-a108-4cd5-a4e3-5613f1cac1fb",
                            "filter": "$.*",
                            "fromId": "f1205391-5230-47f3-b7ac-6615d1830898",
                            "toId": "3d887d06-6b5e-4733-b487-fb28393f995a"
                        },
                        {
                            "id": "19df2ab5-08d5-4766-915d-88fd58c604ad",
                            "filter": "$",
                            "fromId": "3d887d06-6b5e-4733-b487-fb28393f995a",
                            "toId": "8d30c6c3-65d0-4485-a8cd-714ee0ba569c"
                        },
                        {
                            "id": "6830cef6-fba6-47ab-9e98-831a79189874",
                            "filter": "$.*",
                            "fromId": "8d30c6c3-65d0-4485-a8cd-714ee0ba569c",
                            "toId": "9df90d66-8f44-4709-aa9e-015d92d6f907"
                        },
                        {
                            "id": "01d4e222-45b7-4b90-91fd-24fb2b4b3703",
                            "filter": "$",
                            "fromId": "9df90d66-8f44-4709-aa9e-015d92d6f907",
                            "toId": "825401fa-60cd-497d-927e-ccd110cbd236"
                        },
                        {
                            "id": "0aa216cb-2780-478a-bfe7-0b5767c073a6",
                            "filter": "$.*",
                            "fromId": "825401fa-60cd-497d-927e-ccd110cbd236",
                            "toId": "e364df88-9898-4317-9dd4-71eced03218c"
                        },
                        {
                            "id": "3414b4ea-d6c5-431f-ad59-3f6a4cdc8c04",
                            "filter": "$",
                            "fromId": "e364df88-9898-4317-9dd4-71eced03218c",
                            "toId": "8be9e972-2eba-4766-8af4-1d5e18f2f0d3"
                        }
                    ]
                },
                "layoutData": {
                    "cells": [
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 300,
                                "y": 264
                            },
                            "angle": 0,
                            "id": "83447b3c-d063-4eb3-82df-d6ac7e5838f9",
                            "jsonnetsType": "transition",
                            "z": 1,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Siliziumpulver einschmelzen"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 648,
                                "y": 264
                            },
                            "angle": 0,
                            "id": "be938c8c-eb3f-4019-9248-d06df11f6668",
                            "jsonnetsType": "transition",
                            "z": 2,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Reinigen"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 1032,
                                "y": 264
                            },
                            "angle": 0,
                            "id": "7da089da-d214-432c-a8fd-6ab38081843b",
                            "jsonnetsType": "transition",
                            "z": 3,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Polysilizium einschmelzen"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 1272,
                                "y": 396
                            },
                            "angle": 0,
                            "id": "425ec761-277c-4bc6-8b63-60e651b1223e",
                            "jsonnetsType": "transition",
                            "z": 4,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Czochralski-Verfahren"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 1032,
                                "y": 516
                            },
                            "angle": 0,
                            "id": "3d887d06-6b5e-4733-b487-fb28393f995a",
                            "jsonnetsType": "transition",
                            "z": 5,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Sägen"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 648,
                                "y": 516
                            },
                            "angle": 0,
                            "id": "9df90d66-8f44-4709-aa9e-015d92d6f907",
                            "jsonnetsType": "transition",
                            "z": 6,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Schleifen"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Transition",
                            "size": {
                                "width": 100,
                                "height": 50
                            },
                            "position": {
                                "x": 300,
                                "y": 516
                            },
                            "angle": 0,
                            "id": "e364df88-9898-4317-9dd4-71eced03218c",
                            "jsonnetsType": "transition",
                            "z": 7,
                            "attrs": {
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Oberflächenbehandlung"
                                },
                                ".root": {
                                    "fill": "hsl(204, 71%, 39%)",
                                    "stroke": "hsl(0, 0%, 21%)"
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 132,
                                "y": 264
                            },
                            "angle": 0,
                            "tokens": 1,
                            "id": "5826fe10-c01b-486e-b213-9e33f30cf8c2",
                            "jsonnetsType": "place",
                            "z": 8,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Start"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 504,
                                "y": 264
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "6b2916e9-3c05-4b3c-8f4d-469b81cb05a9",
                            "jsonnetsType": "place",
                            "z": 9,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p1"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 840,
                                "y": 264
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "d52d8bfb-4e9e-4e45-8487-6794fb4c9c60",
                            "jsonnetsType": "place",
                            "z": 10,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p2"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 1296,
                                "y": 264
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "f5c8291f-8cb8-4f85-825a-33e170c20c11",
                            "jsonnetsType": "place",
                            "z": 11,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p3"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 1296,
                                "y": 516
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "f1205391-5230-47f3-b7ac-6615d1830898",
                            "jsonnetsType": "place",
                            "z": 12,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p4"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 840,
                                "y": 516
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "8d30c6c3-65d0-4485-a8cd-714ee0ba569c",
                            "jsonnetsType": "place",
                            "z": 13,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p5"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 504,
                                "y": 516
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "825401fa-60cd-497d-927e-ccd110cbd236",
                            "jsonnetsType": "place",
                            "z": 14,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "p6"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "pn.Place",
                            "size": {
                                "width": 50,
                                "height": 50
                            },
                            "position": {
                                "x": 132,
                                "y": 516
                            },
                            "angle": 0,
                            "tokens": 0,
                            "id": "8be9e972-2eba-4766-8af4-1d5e18f2f0d3",
                            "jsonnetsType": "place",
                            "z": 15,
                            "attrs": {
                                ".root": {
                                    "stroke": "hsl(204, 71%, 39%)",
                                    "stroke-width": 3
                                },
                                ".label": {
                                    "fill": "#7a7e9b",
                                    "text": "Wafer"
                                },
                                ".tokens > circle": {
                                    "fill": "#7a7e9b"
                                },
                                ".alot > text": {
                                    "fill": "#7a7e9b",
                                    "font-family": "Courier New",
                                    "font-size": 20,
                                    "font-weight": "bold",
                                    "ref-x": 0,
                                    "ref-y": 0,
                                    "y-alignment": -0.2
                                },
                                "body": {
                                    "cursor": "auto"
                                },
                                "label": {
                                    "cursor": "auto"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "5826fe10-c01b-486e-b213-9e33f30cf8c2",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "83447b3c-d063-4eb3-82df-d6ac7e5838f9",
                                "selector": ".root"
                            },
                            "id": "9952bbb5-ee12-47f5-9f8c-6ecc65e9978e",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 16,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "83447b3c-d063-4eb3-82df-d6ac7e5838f9",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "6b2916e9-3c05-4b3c-8f4d-469b81cb05a9",
                                "selector": ".root"
                            },
                            "id": "98564d96-90e1-4bd7-88d1-7ea2fd0e3e6a",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 17,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "6b2916e9-3c05-4b3c-8f4d-469b81cb05a9",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "be938c8c-eb3f-4019-9248-d06df11f6668",
                                "selector": ".root"
                            },
                            "id": "fd2ec139-fb41-47fe-801b-3bb11b1e8e25",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 18,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "be938c8c-eb3f-4019-9248-d06df11f6668",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "d52d8bfb-4e9e-4e45-8487-6794fb4c9c60",
                                "selector": ".root"
                            },
                            "id": "ae5dc3e8-7f0d-4f8a-84bd-4881cdfef516",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 19,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "d52d8bfb-4e9e-4e45-8487-6794fb4c9c60",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "7da089da-d214-432c-a8fd-6ab38081843b",
                                "selector": ".root"
                            },
                            "id": "1dd9e330-42b4-4cfc-a172-e17023e63f43",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 20,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "7da089da-d214-432c-a8fd-6ab38081843b",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "f5c8291f-8cb8-4f85-825a-33e170c20c11",
                                "selector": ".root"
                            },
                            "id": "da9e1ee2-3c85-4829-890c-ebdc01a38a4e",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 21,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "f5c8291f-8cb8-4f85-825a-33e170c20c11",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "425ec761-277c-4bc6-8b63-60e651b1223e",
                                "selector": ".root"
                            },
                            "id": "bb71cb17-306f-4249-8af8-b6fbd3f72196",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 22,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "425ec761-277c-4bc6-8b63-60e651b1223e",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "f1205391-5230-47f3-b7ac-6615d1830898",
                                "selector": ".root"
                            },
                            "id": "3b591ef6-51bf-4910-add7-4a58d16cc052",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 23,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "f1205391-5230-47f3-b7ac-6615d1830898",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "3d887d06-6b5e-4733-b487-fb28393f995a",
                                "selector": ".root"
                            },
                            "id": "d9e4a496-a108-4cd5-a4e3-5613f1cac1fb",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 24,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "3d887d06-6b5e-4733-b487-fb28393f995a",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "8d30c6c3-65d0-4485-a8cd-714ee0ba569c",
                                "selector": ".root"
                            },
                            "id": "19df2ab5-08d5-4766-915d-88fd58c604ad",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 25,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "8d30c6c3-65d0-4485-a8cd-714ee0ba569c",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "9df90d66-8f44-4709-aa9e-015d92d6f907",
                                "selector": ".root"
                            },
                            "id": "6830cef6-fba6-47ab-9e98-831a79189874",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 26,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "9df90d66-8f44-4709-aa9e-015d92d6f907",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "825401fa-60cd-497d-927e-ccd110cbd236",
                                "selector": ".root"
                            },
                            "id": "01d4e222-45b7-4b90-91fd-24fb2b4b3703",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 27,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "825401fa-60cd-497d-927e-ccd110cbd236",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "e364df88-9898-4317-9dd4-71eced03218c",
                                "selector": ".root"
                            },
                            "id": "0aa216cb-2780-478a-bfe7-0b5767c073a6",
                            "jsonnetsType": "preset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 28,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        },
                        {
                            "type": "standard.Link",
                            "source": {
                                "id": "e364df88-9898-4317-9dd4-71eced03218c",
                                "selector": ".root"
                            },
                            "target": {
                                "id": "8be9e972-2eba-4766-8af4-1d5e18f2f0d3",
                                "selector": ".root"
                            },
                            "id": "3414b4ea-d6c5-431f-ad59-3f6a4cdc8c04",
                            "jsonnetsType": "postset",
                            "connector": {
                                "name": "straight",
                                "args": {
                                    "cornerType": "cubic"
                                }
                            },
                            "z": 29,
                            "vertices": [],
                            "attrs": {
                                ".connection": {
                                    "fill": "none",
                                    "stroke-linejoin": "round",
                                    "stroke-width": "2",
                                    "stroke": "#4b4a67"
                                }
                            }
                        }
                    ]
                }
            }
        }
    ],
    "transitionTypes": [
        {
            "id": "activity",
            "title": "Aktivität",
            "description": "Eine Transition stellt eine Aktivität (wie zum Beispiel 'Löten') in Ihrem Prozessmodell dar. Fügen Sie der Aktivität Input-Stellen (Kreise) vom Typ 'Scope 1 - Emissionen', 'Scope 2 - Emissionen' oder 'Scope 3 - Emissionen' zu, um die der Aktivität zuzuordnenden Treibhausgasemissionen zu erfassen. Über das Feld 'Allokation' können Sie die berechneten Gesamt-Emissionen prozentual skalieren.",
            "keySnippet": "'-';",
            "valueSnippet": "{ scope: 'control', ghgFactorUnit: 'kg CO2e / Stueck', ghgFactor: totalFootprint, amount: 1, unit: 'Stueck (Stueckzahl)', type: 'Primaerdaten', pds: outputPDS, footprintContributions: footprintContributions, sankeyNodes: sankeyNodes,sankeyLinks: sankeyLinks, nodeName: transition_name, '$visualisations': visualisations };",
            "preface": "// calculations\n// ghg factors in kg CO2e per g\nlocal ghgFactors = { 'NF3': 13.4, 'SF6': 18.3, 'CF4': 5.3};\nlocal calculateFootprint(component) = component.amount  * (if component.scope == 1 then (if component.unit == 'mg' then 0.001 else if component.unit == 'kg' then 1000 else 1) * ghgFactors[component.ghg] * component.scalingFactor else if component.scope == 2 then (if component.unit == 'Wh' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'g CO2e / kWh' then 0.001 else if component.ghgFactorUnit == 'mg CO2e / kWh' then 0.000001 else 1) * component.scalingFactor else if component.scope == 3 then (if component.unit == 'mg (Gewicht)' then 0.000001 else if component.unit == 'g (Gewicht)' then 0.001 else 1) * component.ghgFactor * (if component.ghgFactorUnit == 'mg CO2e / Stueck oder kg' then 0.000001 else if component.ghgFactorUnit == 'g CO2e / Stueck oder kg' then 0.001 else 1) * component.scalingFactor else component.ghgFactor) * Allokation / 100;\nlocal individualFootprints = std.map(calculateFootprint,input_values);\n// calculate Scope 1-Emissions\nlocal generateScope1Contribution(index,element) = if (element.scope == 1) then { name: input_names[index], value: individualFootprints[index] };\nlocal sum(arr, n) = if (n <= 0) then 0 else sum(arr, n-1) + arr[n-1];\nlocal totalFootprint = sum(individualFootprints, std.length(individualFootprints));\nlocal calculatePCFShare(partFootprint) = if totalFootprint > 0 then partFootprint/totalFootprint else 0;\nlocal footprintShares = std.map(calculatePCFShare,individualFootprints);\nlocal calculatePrimaryDataShare(index) = footprintShares[index] * input_values[index].pds;\nlocal primaryDataShares = std.map(calculatePrimaryDataShare,std.range(0,std.length(input_values)-1));\nlocal outputPDS = sum(primaryDataShares,std.length(primaryDataShares));\n// for each emission input (not start or control-flow place) an object containing name and ghg-emission as value is created\nlocal generateFootprintContribution(index,element) = if ((element.scope != 'start') && (element.scope != 'control')) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope2Contribution(index,element) = if (element.scope == 2) then { name: input_names[index], value: individualFootprints[index] };\nlocal generateScope3Contribution(index,element) = if (element.scope == 3) then { name: input_names[index], value: individualFootprints[index] };\nlocal filterNull(element) = element != null;\nlocal footprintContributionsFromThisTransition = std.filter(filterNull,std.mapWithIndex(generateFootprintContribution,input_values));\nlocal scope1FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope1Contribution,input_values));\nlocal scope2FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope2Contribution,input_values));\nlocal scope3FromThisTransition = std.filter(filterNull,std.mapWithIndex(generateScope3Contribution,input_values));\n// fetch contributions from incoming places\nlocal filterControl(element) = element.scope == 'control';\nlocal incomingControlPlaces = std.filter(filterControl, input_values);\nlocal getContribution(element) = element.footprintContributions;\nlocal getScope1Contribution(element) = element.footprintContributions['1'];\nlocal getScope2Contribution(element) = element.footprintContributions['2'];\nlocal getScope3Contribution(element) = element.footprintContributions['3'];\nlocal incomingScope1Contributions = std.flattenArrays(std.map(getScope1Contribution,incomingControlPlaces));\nlocal incomingScope2Contributions = std.flattenArrays(std.map(getScope2Contribution,incomingControlPlaces));\nlocal incomingScope3Contributions = std.flattenArrays(std.map(getScope3Contribution,incomingControlPlaces));\nlocal footprintContributions = { '1': incomingScope1Contributions + scope1FromThisTransition, '2': incomingScope2Contributions + scope2FromThisTransition,'3': incomingScope3Contributions + scope3FromThisTransition};\nlocal scope1Contributions = incomingScope1Contributions + scope1FromThisTransition;\nlocal scope2Contributions = incomingScope2Contributions + scope2FromThisTransition;\nlocal scope3Contributions = incomingScope3Contributions + scope3FromThisTransition;\n// for each incoming place\nlocal generateSankeyNode(index,element) = if (input_values[index].scope != 'control') && (input_values[index].scope != 'start') then { name: element }; local getNodes(element) = element.sankeyNodes;\nlocal incomingNodes = std.flattenArrays(std.map(getNodes,incomingControlPlaces));\nlocal sankeyNodes = incomingNodes + std.filter(filterNull,std.mapWithIndex(generateSankeyNode,input_names)) + [{ name: transition_name }];\n//currently assuming we have exactly one output place\nlocal generateSankeyLink(element) = { source: element.name, value: element.value, target: transition_name };\nlocal getLinks(element) = element.sankeyLinks;\nlocal incomingLinks = std.flattenArrays(std.map(getLinks,incomingControlPlaces));\nlocal controlLink = if std.length(incomingControlPlaces) > 0 then [{ source: incomingControlPlaces[0].nodeName, target: transition_name, value: incomingControlPlaces[0].ghgFactor }] else [];\nlocal sankeyLinks = incomingLinks + std.map(generateSankeyLink,footprintContributionsFromThisTransition) + controlLink;\n// Visualisations:\nlocal visualisations = [{\n'type': 'number',\n'unit': 'kg CO2e',\n'description': 'THG-Fussabdruck',\n'value': totalFootprint\n},\n{\n'type': 'sunburst',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sunburst)',\n'value': [\n{\n'name': 'Scope 1',\n'children': scope1Contributions\n},\n{\n'name': 'Scope 2',\n'children': scope2Contributions\n},\n{\n'name': 'Scope 3',\n'children': scope3Contributions\n}\n]\n}\n,{\n'type': 'sankey',\n'unit': 'kg CO2e',\n'description': 'THG-Beiträge (Sankey)',\n'value': {\n'data': sankeyNodes,\n'links': sankeyLinks\n}\n},\n{\n'type': 'number',\n'unit': '%',\n'description': 'Primärdatenanteil',\n'value': outputPDS * 100\n}];",
            "guard": "true",
            "presetFilter": "$.*",
            "postsetFilter": "$",
            "customVariables": {
                "Allokation": "100"
            }
        }
    ],
    "placeTypes": [
        {
            "id": "start",
            "externalInteraction": {
                "type": "none"
            },
            "schema": {
                "type": "array",
                "title": "Start",
                "description": "Um Berechnungen durchführen zu können, muss das Prozessmodell am Anfang genau einen Knoten vom Typ 'Start' haben.",
                "maxItems": 1,
                "items": {
                    "type": "object"
                }
            },
            "marking": [
                {
                    "amount": 1,
                    "ghgFactor": 0,
                    "scope": "start",
                    "pds": 0
                }
            ]
        },
        {
            "id": "end",
            "externalInteraction": {
                "type": "push",
                "url": "https://s3t.uber.space/footprints/"
            },
            "schema": {
                "type": "array",
                "title": "Ende",
                "description": "Das Prozessmodell sollte am Ende einen Knoten vom Typ 'Ende' haben. Wenn eine Berechung abgeschlossen wurde, und Daten im Knoten vorhanden sind, können Sie die Daten veröffentlichen und so in das Lieferketten-Verzeichnis laden.",
                "maxItems": 1,
                "items": {
                    "type": "object"
                }
            },
            "marking": []
        },
        {
            "id": "control",
            "externalInteraction": {
                "type": "none"
            },
            "schema": {
                "type": "array",
                "title": "Kontrollfluss",
                "description": "Um Berechnungen durchführen zu können, müssen Aktivitäten miteinander mit Knoten vom Typ 'Kontrollfluss' verbunden werden.",
                "maxItems": 1,
                "items": {
                    "type": "object"
                }
            },
            "marking": []
        },
        {
            "id": "scope1",
            "externalInteraction": {
                "type": "none"
            },
            "schema": {
                "type": "array",
                "title": "Scope 1 - Emissionen",
                "description": "Wählen Sie zunächst das betreffende <b>Treibhausgas</b> im Formular aus. Als <b>Maßeinheit</b> können Sie 'mg', 'g' oder 'kg' wählen. Über den <b>Skalierungsfaktor</b> können Sie die anzurechnende <b>Menge</b> skalieren. Wenn zum Beispiel die Hälfte der angegebenen Menge angerechnet werden soll, geben Sie den <b>Skalierungsfaktor</b> '0,5' an.",
                "maxItems": 1,
                "items": {
                    "type": "object",
                    "properties": {
                        "scope": {
                            "type": "number",
                            "title": "Scope",
                            "enum": [
                                1
                            ],
                            "readOnly": true
                        },
                        "ghg": {
                            "type": "string",
                            "title": "Treibhausgas",
                            "enum": [
                                "NF3",
                                "SF6",
                                "CF4"
                            ],
                            "default": "NF3",
                            "description": "Wählen Sie das emittierte Treibhausgas aus."
                        },
                        "unit": {
                            "type": "string",
                            "title": "Maßeinheit für Mengenangabe",
                            "enum": [
                                "mg",
                                "g",
                                "kg"
                            ],
                            "default": "g",
                            "description": "Wählen Sie die Maßeinheit aus, in der Sie die Menge angeben möchten."
                        },
                        "amount": {
                            "type": "number",
                            "title": "Menge",
                            "description": "Mengenangabe in mg, g oder kg für das emittierte Treibhausgas."
                        },
                        "scalingFactor": {
                            "type": "number",
                            "title": "Skalierungsfaktor",
                            "default": 1,
                            "description": "Die angegebene Menge wird mit dem Skalierungsfaktor multipliziert."
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "Primaerdaten"
                            ],
                            "title": "Datentyp",
                            "readOnly": true
                        },
                        "note": {
                            "type": "string",
                            "title": "Notiz",
                            "description": "In diesem Feld können Sie Anmerkungen hinterlegen."
                        }
                    },
                    "required": [
                        "scope",
                        "ghg",
                        "unit",
                        "amount",
                        "scalingFactor",
                        "type"
                    ]
                }
            },
            "marking": [
                {
                    "scope": 1,
                    "amount": 1,
                    "unit": "g",
                    "ghg": "NF3",
                    "scalingFactor": 1,
                    "type": "Primaerdaten",
                    "pds": 1,
                    "note": "test"
                }
            ]
        },
        {
            "id": "scope2",
            "externalInteraction": {
                "type": "none"
            },
            "schema": {
                "type": "array",
                "title": "Scope 2 - Emissionen",
                "description": "Wählen Sie zunächst eine <b>Maßeinheit</b> ('Wh' oder 'kWh') für den angegebenen <b>Energieverbrauch</b>. Der <b>Emissionsfaktor</b> gibt an, welche Menge an Treibhausgasen <i>pro kWh</i> mit der Erzeugung der bezogenen Energie verbunden sind. Als <b>Maßeinheit für den Emissionsfaktor</b> können Sie 'mg', 'g' oder 'kg' CO2e / kWh auswählen. Über den <b>Skalierungsfaktor</b> können Sie den anzurechnenden Energieverbrauch skalieren. Wenn zum Beispiel die Hälfte der angegebenen Menge angerechnet werden soll, geben Sie den <b>Skalierungsfaktor</b> '0,5' an.",
                "maxItems": 1,
                "items": {
                    "type": "object",
                    "properties": {
                        "scope": {
                            "type": "number",
                            "enum": [
                                2
                            ],
                            "title": "Scope",
                            "readOnly": true
                        },
                        "unit": {
                            "type": "string",
                            "enum": [
                                "Wh",
                                "kWh"
                            ],
                            "default": "kWh",
                            "title": "Maßeinheit für Energieverbrauch",
                            "description": "Wählen Sie die Maßeinheit aus, in der Sie den Energieverbrauch angeben möchten."
                        },
                        "amount": {
                            "type": "number",
                            "title": "Energieverbrauch",
                            "description": "Mengenangabe in Wh oder kWh für den Energieverbrauch."
                        },
                        "ghgFactorUnit": {
                            "type": "string",
                            "enum": [
                                "mg CO2e / kWh",
                                "g CO2e / kWh",
                                "kg CO2e / kWh"
                            ],
                            "default": "kg CO2e / kWh",
                            "title": "Maßeinheit für Emissionsfaktor",
                            "description": "Wählen Sie die Maßeinheit aus, in der Sie den Emissionsfaktor angeben möchten."
                        },
                        "ghgFactor": {
                            "type": "number",
                            "title": "Emissionsfaktor",
                            "description": "Angabe der Menge an emittierten Treibhausgasen in mg, g oder kg CO2e pro kWh."
                        },
                        "scalingFactor": {
                            "type": "number",
                            "title": "Skalierungsfaktor",
                            "default": 1,
                            "description": "Der angegebene Energieverbrauch wird mit dem Skalierungsfaktor multipliziert."
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "Primaerdaten"
                            ],
                            "title": "Datentyp",
                            "readOnly": true
                        },
                        "note": {
                            "type": "string",
                            "title": "Notiz",
                            "description": "In diesem Feld können Sie Anmerkungen hinterlegen."
                        }
                    },
                    "required": [
                        "scope",
                        "unit",
                        "amount",
                        "ghgFactorUnit",
                        "ghgFactor",
                        "scalingFactor",
                        "type"
                    ]
                }
            },
            "marking": [
                {
                    "scope": 2,
                    "unit": "kWh",
                    "amount": 1,
                    "ghgFactorUnit": "kg CO2e / kWh",
                    "ghgFactor": 1,
                    "scalingFactor": 1,
                    "type": "Primaerdaten",
                    "pds": 1,
                    "note": ""
                }
            ]
        },
        {
            "id": "scope3-secondary",
            "externalInteraction": {
                "type": "none"
            },
            "schema": {
                "type": "array",
                "title": "Scope 3 - Emissionen (Sekundärdaten)",
                "description": "Wählen Sie zunächst die <b>Maßeinheit</b> (entweder 'Stückzahl' oder 'Gewicht' in mg, g oder kg) für die Angabe der Menge an Material oder Komponenten. Der <b>Emissionsfaktor</b> gibt an, welche Menge an Treibhausgasen mit der Produktion des Materials oder der Komponente verbunden sind. Die Angabe des Emissionsfaktors erfolgt immer <i>pro Stück oder kg</i>. Als <b>Maßeinheit für den Emissionsfaktor</b> können Sie 'mg', 'g' oder 'kg' CO2e / Stück oder kg auswählen. Über den <b>Skalierungsfaktor</b> können Sie die anzurechnende <b>Menge</b> skalieren. Wenn zum Beispiel die Hälfte der angegebenen Menge angerechnet werden soll, geben Sie den <b>Skalierungsfaktor</b> '0,5' an.",
                "maxItems": 1,
                "items": {
                    "type": "object",
                    "properties": {
                        "scope": {
                            "type": "number",
                            "enum": [
                                3
                            ],
                            "readOnly": true
                        },
                        "unit": {
                            "type": "string",
                            "title": "Maßeinheit für Mengenangabe",
                            "enum": [
                                "mg (Gewicht)",
                                "g (Gewicht)",
                                "kg (Gewicht)",
                                "Stueck (Stueckzahl)"
                            ],
                            "description": "Wählen Sie die Maßeinheit aus, in der Sie die Menge an Material oder Komponenten angeben möchten."
                        },
                        "amount": {
                            "type": "number",
                            "title": "Menge",
                            "description": "Mengenangabe in Gewicht (mg, g oder kg) oder als Stückzahl."
                        },
                        "ghgFactorUnit": {
                            "type": "string",
                            "enum": [
                                "mg CO2e / Stueck oder kg",
                                "g CO2e / Stueck oder kg",
                                "kg CO2e / Stueck oder kg"
                            ],
                            "default": "kg CO2e / Stueck oder kg",
                            "title": "Maßeinheit für Emissionsfaktor",
                            "description": "Wählen Sie die Maßeinheit aus, in der Sie den Emissionsfaktor angeben möchten."
                        },
                        "ghgFactor": {
                            "type": "number",
                            "title": "Emissionsfaktor",
                            "description": "Angabe der Menge an emittierten Treibhausgasen in mg, g oder kg CO2e / Stück oder kg."
                        },
                        "scalingFactor": {
                            "type": "number",
                            "title": "Skalierungsfaktor",
                            "default": 1,
                            "description": "Die angegebene Menge wird mit dem Skalierungsfaktor multipliziert."
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "Sekundaerdaten"
                            ],
                            "title": "Datentyp",
                            "readOnly": true
                        },
                        "note": {
                            "type": "string",
                            "title": "Notiz",
                            "description": "In diesem Feld können Sie Anmerkungen hinterlegen."
                        }
                    },
                    "required": [
                        "scope",
                        "unit",
                        "amount",
                        "ghgFactorUnit",
                        "ghgFactor",
                        "scalingFactor",
                        "type"
                    ]
                }
            },
            "marking": [
                {
                    "scope": 3,
                    "unit": "Stueck (Stueckzahl)",
                    "amount": 1,
                    "ghgFactorUnit": "kg CO2e / Stueck oder kg",
                    "ghgFactor": 1,
                    "scalingFactor": 1,
                    "type": "Sekundaerdaten",
                    "pds": 0,
                    "note": ""
                }
            ]
        },
        {
            "id": "scope3-primary",
            "externalInteraction": {
                "type": "pull",
                "url": "https://s3t.uber.space/footprints/",
                "enforcedMarking": {
                    "scope": 3,
                    "title": "scope3",
                    "scalingFactor": 1,
                    "fromSupplyChain": true,
                    "note": "loaded"
                }
            },
            "schema": {
                "type": "array",
                "title": "Scope 3 - Emissionen (Primärdaten)",
                "description": "Laden Sie Primärdaten von Ihren Lieferanten aus dem Lieferkettenverzeichnis. Nach dem Laden können Sie den von ihrem Lieferanten übermittelten <b>Emissionsfaktor</b> und <b>Primärdatenanteil</b> einsehen. Es wird angenommen, dass die Angaben zu Treibhausgasemission von Ihrem Lieferanten in <i>kg CO2e pro Stück</i> erfolgen. Sie können eine <b>Mengenangabe</b> als Stückzahl vornehmen und die angegebene Menge über einen <b>Skalierungsfaktor</b> skalieren. Wenn zum Beispiel die Hälfte der angegebenen Menge angerechnet werden soll, geben Sie den <b>Skalierungsfaktor</b> '0,5' an.",
                "maxItems": 1,
                "items": {
                    "type": "object",
                    "properties": {
                        "scope": {
                            "type": "number",
                            "title": "Scope",
                            "enum": [
                                3
                            ],
                            "readOnly": true
                        },
                        "unit": {
                            "type": "string",
                            "title": "Mengeneinheit",
                            "enum": [
                                "Stueck (Stueckzahl)"
                            ],
                            "readOnly": true
                        },
                        "amount": {
                            "type": "number",
                            "title": "Menge",
                            "description": "Mengenangabe als Stückzahl."
                        },
                        "ghgFactorUnit": {
                            "type": "string",
                            "enum": [
                                "kg CO2e / Stueck"
                            ],
                            "default": "kg CO2e / Stueck",
                            "title": "Maßeinheit für Emissionsfaktor",
                            "readOnly": true
                        },
                        "scalingFactor": {
                            "type": "number",
                            "title": "Skalierungsfaktor",
                            "default": 1,
                            "description": "Die angegebene Menge wird mit dem Skalierungsfaktor multipliziert."
                        },
                        "ghgFactor": {
                            "type": "number",
                            "title": "Emissionsfaktor",
                            "readOnly": true
                        },
                        "pds": {
                            "type": "number",
                            "title": "Primaerdatenanteil",
                            "readOnly": true
                        },
                        "note": {
                            "type": "string",
                            "title": "Notiz",
                            "description": "In diesem Feld können Sie Anmerkungen hinterlegen."
                        }
                    },
                    "required": [
                        "scope",
                        "unit",
                        "amount",
                        "ghgFactorUnit",
                        "ghgFactor",
                        "scalingFactor",
                        "pds"
                    ]
                }
            },
            "marking": []
        }
    ]
}